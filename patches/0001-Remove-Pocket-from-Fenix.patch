From f1ac5a7ab2041029298b157fbc524ea10e4e1d7f Mon Sep 17 00:00:00 2001
From: Stan Ionascu <779592+stanionascu@users.noreply.github.com>
Date: Mon, 1 Jan 2024 13:02:41 +0000
Subject: [PATCH] Remove Pocket from Fenix


diff --git a/android-components/components/service/pocket/.gitignore b/android-components/components/service/pocket/.gitignore
deleted file mode 100644
index 3c06d0139f..0000000000
--- a/android-components/components/service/pocket/.gitignore
+++ /dev/null
@@ -1,2 +0,0 @@
-src/test/resources/pocket/apiKey.txt
-src/test/resources/pocket/listenAccessToken.txt
diff --git a/android-components/components/service/pocket/README.md b/android-components/components/service/pocket/README.md
deleted file mode 100644
index 86c2e0ec75..0000000000
--- a/android-components/components/service/pocket/README.md
+++ /dev/null
@@ -1,44 +0,0 @@
-# [Android Components](../../../README.md) > Service > Pocket
-
-A library for easily getting Pocket recommendations that transparently handles downloading, caching and periodically refreshing Pocket data.
-
-Currently this supports:
-
-- Pocket recommended stories.
-- Pocket sponsored stories.
-
-## Usage
-1. For Pocket recommended stories:
-   - Use `PocketStoriesService#startPeriodicStoriesRefresh` and `PocketStoriesService#stopPeriodicStoriesRefresh`
-     as high up in the client app as possible (preferably in the Application object or in a single Activity) to ensure the
-     background story refresh functionality works for the entirety of the app lifetime.
-   - Use `PocketStoriesService.getStories` to get the current list of Pocket recommended stories.
-
-2. For Pocket sponsored stories:
-   - Use `PocketStoriesService#startPeriodicSponsoredStoriesRefresh` and `PocketStoriesService#stopPeriodicSponsoredStoriesRefresh`
-     as high up in the client app as possible (preferably in the Application object or in a single Activity) to ensure the
-     background story refresh functionality works for the entirety of the app lifetime.
-   - Use `PocketStoriesService.getSponsoredStories` to get the current list of Pocket recommended stories.
-   - Use `PocketStoriesService,recordStoriesImpressions` to try and persist that a list of sponsored stories were shown to the user. (Safe to call even if those stories are not persisted).
-   - Use `PocketStoriesService.deleteProfile` to delete all server stored information about the device to which sponsored stories were previously downloaded. This may include data like network ip and application tokens.
-
-   ##### Pacing and rotating:
-   A new `PocketSponsoredStoryCaps` is available in the response from `PocketStoriesService.getSponsoredStories` which allows checking `currentImpressions`, `lifetimeCount`, `flightCount`, `flightPeriod` based on which the client can decide which stories to show.
-   All this is based on clients calling `PocketStoriesService,recordStoriesImpressions` to record new impressions in between application restarts.
-
-
-
-
-### Setting up the dependency
-
-Use Gradle to download the library from [maven.mozilla.org](https://maven.mozilla.org/) ([Setup repository](../../../README.md#maven-repository)):
-
-```Groovy
-implementation "org.mozilla.components:service-pocket:{latest-version}"
-```
-
-## License
-
-    This Source Code Form is subject to the terms of the Mozilla Public
-    License, v. 2.0. If a copy of the MPL was not distributed with this
-    file, You can obtain one at http://mozilla.org/MPL/2.0/
diff --git a/android-components/components/service/pocket/build.gradle b/android-components/components/service/pocket/build.gradle
deleted file mode 100644
index 0faa4d63b0..0000000000
--- a/android-components/components/service/pocket/build.gradle
+++ /dev/null
@@ -1,72 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-apply plugin: 'com.android.library'
-apply plugin: 'kotlin-android'
-apply plugin: 'com.google.devtools.ksp'
-
-android {
-    defaultConfig {
-        minSdkVersion config.minSdkVersion
-        compileSdk config.compileSdkVersion
-        targetSdkVersion config.targetSdkVersion
-        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
-
-        ksp {
-            arg("room.schemaLocation", "$projectDir/schemas".toString())
-        }
-    }
-
-    buildTypes {
-        release {
-            minifyEnabled false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
-    }
-
-    sourceSets {
-        test.assets.srcDirs += files("$projectDir/schemas".toString())
-        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
-    }
-
-    namespace 'mozilla.components.service.pocket'
-}
-
-dependencies {
-    implementation ComponentsDependencies.kotlin_coroutines
-
-    implementation ComponentsDependencies.androidx_core_ktx
-    implementation ComponentsDependencies.androidx_work_runtime
-    implementation ComponentsDependencies.androidx_room_runtime
-    ksp ComponentsDependencies.androidx_room_compiler
-
-    implementation project(':support-ktx')
-    implementation project(':support-base')
-    implementation project(':concept-fetch')
-
-    testImplementation ComponentsDependencies.kotlin_reflect
-
-    testImplementation ComponentsDependencies.androidx_arch_core_testing
-    testImplementation ComponentsDependencies.androidx_test_core
-    testImplementation ComponentsDependencies.androidx_test_junit
-    testImplementation ComponentsDependencies.testing_coroutines
-    testImplementation ComponentsDependencies.testing_robolectric
-    testImplementation ComponentsDependencies.androidx_room_testing
-    testImplementation ComponentsDependencies.androidx_work_testing
-
-    testImplementation project(':support-test')
-    testImplementation project(':lib-fetch-httpurlconnection')
-
-    androidTestImplementation project(':support-android-test')
-
-    androidTestImplementation ComponentsDependencies.androidx_room_testing
-    androidTestImplementation ComponentsDependencies.androidx_arch_core_testing
-    androidTestImplementation ComponentsDependencies.androidx_test_core
-    androidTestImplementation ComponentsDependencies.androidx_test_runner
-    androidTestImplementation ComponentsDependencies.androidx_test_rules
-}
-
-apply from: '../../../android-lint.gradle'
-apply from: '../../../publish.gradle'
-ext.configurePublish(config.componentsGroupId, archivesBaseName, project.ext.description)
diff --git a/android-components/components/service/pocket/proguard-rules.pro b/android-components/components/service/pocket/proguard-rules.pro
deleted file mode 100644
index f1b424510d..0000000000
--- a/android-components/components/service/pocket/proguard-rules.pro
+++ /dev/null
@@ -1,21 +0,0 @@
-# Add project specific ProGuard rules here.
-# You can control the set of applied configuration files using the
-# proguardFiles setting in build.gradle.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
-
-# Uncomment this to preserve the line number information for
-# debugging stack traces.
-#-keepattributes SourceFile,LineNumberTable
-
-# If you keep the line number information, uncomment this to
-# hide the original source file name.
-#-renamesourcefileattribute SourceFile
diff --git a/android-components/components/service/pocket/schemas/mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase/1.json b/android-components/components/service/pocket/schemas/mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase/1.json
deleted file mode 100644
index 683a6d1176..0000000000
--- a/android-components/components/service/pocket/schemas/mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase/1.json
+++ /dev/null
@@ -1,70 +0,0 @@
-{
-  "formatVersion": 1,
-  "database": {
-    "version": 1,
-    "identityHash": "6f93143cfe11253bf96ec0ff80483bcf",
-    "entities": [
-      {
-        "tableName": "stories",
-        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`url` TEXT NOT NULL, `title` TEXT NOT NULL, `imageUrl` TEXT NOT NULL, `publisher` TEXT NOT NULL, `category` TEXT NOT NULL, `timeToRead` INTEGER NOT NULL, `timesShown` INTEGER NOT NULL, PRIMARY KEY(`url`))",
-        "fields": [
-          {
-            "fieldPath": "url",
-            "columnName": "url",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "title",
-            "columnName": "title",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "imageUrl",
-            "columnName": "imageUrl",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "publisher",
-            "columnName": "publisher",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "category",
-            "columnName": "category",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "timeToRead",
-            "columnName": "timeToRead",
-            "affinity": "INTEGER",
-            "notNull": true
-          },
-          {
-            "fieldPath": "timesShown",
-            "columnName": "timesShown",
-            "affinity": "INTEGER",
-            "notNull": true
-          }
-        ],
-        "primaryKey": {
-          "columnNames": [
-            "url"
-          ],
-          "autoGenerate": false
-        },
-        "indices": [],
-        "foreignKeys": []
-      }
-    ],
-    "views": [],
-    "setupQueries": [
-      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
-      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '6f93143cfe11253bf96ec0ff80483bcf')"
-    ]
-  }
-}
\ No newline at end of file
diff --git a/android-components/components/service/pocket/schemas/mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase/2.json b/android-components/components/service/pocket/schemas/mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase/2.json
deleted file mode 100644
index 963deb138b..0000000000
--- a/android-components/components/service/pocket/schemas/mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase/2.json
+++ /dev/null
@@ -1,120 +0,0 @@
-{
-  "formatVersion": 1,
-  "database": {
-    "version": 2,
-    "identityHash": "1ea41b5cc0791d92dd8f0db8b387fe6c",
-    "entities": [
-      {
-        "tableName": "stories",
-        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`url` TEXT NOT NULL, `title` TEXT NOT NULL, `imageUrl` TEXT NOT NULL, `publisher` TEXT NOT NULL, `category` TEXT NOT NULL, `timeToRead` INTEGER NOT NULL, `timesShown` INTEGER NOT NULL, PRIMARY KEY(`url`))",
-        "fields": [
-          {
-            "fieldPath": "url",
-            "columnName": "url",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "title",
-            "columnName": "title",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "imageUrl",
-            "columnName": "imageUrl",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "publisher",
-            "columnName": "publisher",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "category",
-            "columnName": "category",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "timeToRead",
-            "columnName": "timeToRead",
-            "affinity": "INTEGER",
-            "notNull": true
-          },
-          {
-            "fieldPath": "timesShown",
-            "columnName": "timesShown",
-            "affinity": "INTEGER",
-            "notNull": true
-          }
-        ],
-        "primaryKey": {
-          "columnNames": [
-            "url"
-          ],
-          "autoGenerate": false
-        },
-        "indices": [],
-        "foreignKeys": []
-      },
-      {
-        "tableName": "spocs",
-        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`url` TEXT NOT NULL, `title` TEXT NOT NULL, `imageUrl` TEXT NOT NULL, `sponsor` TEXT NOT NULL, `clickShim` TEXT NOT NULL, `impressionShim` TEXT NOT NULL, PRIMARY KEY(`url`))",
-        "fields": [
-          {
-            "fieldPath": "url",
-            "columnName": "url",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "title",
-            "columnName": "title",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "imageUrl",
-            "columnName": "imageUrl",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "sponsor",
-            "columnName": "sponsor",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "clickShim",
-            "columnName": "clickShim",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "impressionShim",
-            "columnName": "impressionShim",
-            "affinity": "TEXT",
-            "notNull": true
-          }
-        ],
-        "primaryKey": {
-          "columnNames": [
-            "url"
-          ],
-          "autoGenerate": false
-        },
-        "indices": [],
-        "foreignKeys": []
-      }
-    ],
-    "views": [],
-    "setupQueries": [
-      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
-      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '1ea41b5cc0791d92dd8f0db8b387fe6c')"
-    ]
-  }
-}
\ No newline at end of file
diff --git a/android-components/components/service/pocket/schemas/mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase/3.json b/android-components/components/service/pocket/schemas/mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase/3.json
deleted file mode 100644
index 967bb2a9c4..0000000000
--- a/android-components/components/service/pocket/schemas/mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase/3.json
+++ /dev/null
@@ -1,194 +0,0 @@
-{
-  "formatVersion": 1,
-  "database": {
-    "version": 3,
-    "identityHash": "966f55824415a21a73640bd2641772f2",
-    "entities": [
-      {
-        "tableName": "stories",
-        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`url` TEXT NOT NULL, `title` TEXT NOT NULL, `imageUrl` TEXT NOT NULL, `publisher` TEXT NOT NULL, `category` TEXT NOT NULL, `timeToRead` INTEGER NOT NULL, `timesShown` INTEGER NOT NULL, PRIMARY KEY(`url`))",
-        "fields": [
-          {
-            "fieldPath": "url",
-            "columnName": "url",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "title",
-            "columnName": "title",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "imageUrl",
-            "columnName": "imageUrl",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "publisher",
-            "columnName": "publisher",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "category",
-            "columnName": "category",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "timeToRead",
-            "columnName": "timeToRead",
-            "affinity": "INTEGER",
-            "notNull": true
-          },
-          {
-            "fieldPath": "timesShown",
-            "columnName": "timesShown",
-            "affinity": "INTEGER",
-            "notNull": true
-          }
-        ],
-        "primaryKey": {
-          "columnNames": [
-            "url"
-          ],
-          "autoGenerate": false
-        },
-        "indices": [],
-        "foreignKeys": []
-      },
-      {
-        "tableName": "spocs",
-        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER NOT NULL, `url` TEXT NOT NULL, `title` TEXT NOT NULL, `imageUrl` TEXT NOT NULL, `sponsor` TEXT NOT NULL, `clickShim` TEXT NOT NULL, `impressionShim` TEXT NOT NULL, `priority` INTEGER NOT NULL, `lifetimeCapCount` INTEGER NOT NULL, `flightCapCount` INTEGER NOT NULL, `flightCapPeriod` INTEGER NOT NULL, PRIMARY KEY(`id`))",
-        "fields": [
-          {
-            "fieldPath": "id",
-            "columnName": "id",
-            "affinity": "INTEGER",
-            "notNull": true
-          },
-          {
-            "fieldPath": "url",
-            "columnName": "url",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "title",
-            "columnName": "title",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "imageUrl",
-            "columnName": "imageUrl",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "sponsor",
-            "columnName": "sponsor",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "clickShim",
-            "columnName": "clickShim",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "impressionShim",
-            "columnName": "impressionShim",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "priority",
-            "columnName": "priority",
-            "affinity": "INTEGER",
-            "notNull": true
-          },
-          {
-            "fieldPath": "lifetimeCapCount",
-            "columnName": "lifetimeCapCount",
-            "affinity": "INTEGER",
-            "notNull": true
-          },
-          {
-            "fieldPath": "flightCapCount",
-            "columnName": "flightCapCount",
-            "affinity": "INTEGER",
-            "notNull": true
-          },
-          {
-            "fieldPath": "flightCapPeriod",
-            "columnName": "flightCapPeriod",
-            "affinity": "INTEGER",
-            "notNull": true
-          }
-        ],
-        "primaryKey": {
-          "columnNames": [
-            "id"
-          ],
-          "autoGenerate": false
-        },
-        "indices": [],
-        "foreignKeys": []
-      },
-      {
-        "tableName": "spocs_impressions",
-        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`spocId` INTEGER NOT NULL, `impressionId` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `impressionDateInSeconds` INTEGER NOT NULL, FOREIGN KEY(`spocId`) REFERENCES `spocs`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE )",
-        "fields": [
-          {
-            "fieldPath": "spocId",
-            "columnName": "spocId",
-            "affinity": "INTEGER",
-            "notNull": true
-          },
-          {
-            "fieldPath": "impressionId",
-            "columnName": "impressionId",
-            "affinity": "INTEGER",
-            "notNull": true
-          },
-          {
-            "fieldPath": "impressionDateInSeconds",
-            "columnName": "impressionDateInSeconds",
-            "affinity": "INTEGER",
-            "notNull": true
-          }
-        ],
-        "primaryKey": {
-          "columnNames": [
-            "impressionId"
-          ],
-          "autoGenerate": true
-        },
-        "indices": [],
-        "foreignKeys": [
-          {
-            "table": "spocs",
-            "onDelete": "CASCADE",
-            "onUpdate": "NO ACTION",
-            "columns": [
-              "spocId"
-            ],
-            "referencedColumns": [
-              "id"
-            ]
-          }
-        ]
-      }
-    ],
-    "views": [],
-    "setupQueries": [
-      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
-      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '966f55824415a21a73640bd2641772f2')"
-    ]
-  }
-}
\ No newline at end of file
diff --git a/android-components/components/service/pocket/schemas/mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase/4.json b/android-components/components/service/pocket/schemas/mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase/4.json
deleted file mode 100644
index 16bad4b59c..0000000000
--- a/android-components/components/service/pocket/schemas/mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase/4.json
+++ /dev/null
@@ -1,204 +0,0 @@
-{
-  "formatVersion": 1,
-  "database": {
-    "version": 4,
-    "identityHash": "cc5b4d41781399f6ab7f123c10546acc",
-    "entities": [
-      {
-        "tableName": "stories",
-        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`url` TEXT NOT NULL, `title` TEXT NOT NULL, `imageUrl` TEXT NOT NULL, `publisher` TEXT NOT NULL, `category` TEXT NOT NULL, `timeToRead` INTEGER NOT NULL, `timesShown` INTEGER NOT NULL, PRIMARY KEY(`url`))",
-        "fields": [
-          {
-            "fieldPath": "url",
-            "columnName": "url",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "title",
-            "columnName": "title",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "imageUrl",
-            "columnName": "imageUrl",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "publisher",
-            "columnName": "publisher",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "category",
-            "columnName": "category",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "timeToRead",
-            "columnName": "timeToRead",
-            "affinity": "INTEGER",
-            "notNull": true
-          },
-          {
-            "fieldPath": "timesShown",
-            "columnName": "timesShown",
-            "affinity": "INTEGER",
-            "notNull": true
-          }
-        ],
-        "primaryKey": {
-          "columnNames": [
-            "url"
-          ],
-          "autoGenerate": false
-        },
-        "indices": [],
-        "foreignKeys": []
-      },
-      {
-        "tableName": "spocs",
-        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER NOT NULL, `url` TEXT NOT NULL, `title` TEXT NOT NULL, `imageUrl` TEXT NOT NULL, `sponsor` TEXT NOT NULL, `clickShim` TEXT NOT NULL, `impressionShim` TEXT NOT NULL, `priority` INTEGER NOT NULL, `lifetimeCapCount` INTEGER NOT NULL, `flightCapCount` INTEGER NOT NULL, `flightCapPeriod` INTEGER NOT NULL, PRIMARY KEY(`id`))",
-        "fields": [
-          {
-            "fieldPath": "id",
-            "columnName": "id",
-            "affinity": "INTEGER",
-            "notNull": true
-          },
-          {
-            "fieldPath": "url",
-            "columnName": "url",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "title",
-            "columnName": "title",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "imageUrl",
-            "columnName": "imageUrl",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "sponsor",
-            "columnName": "sponsor",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "clickShim",
-            "columnName": "clickShim",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "impressionShim",
-            "columnName": "impressionShim",
-            "affinity": "TEXT",
-            "notNull": true
-          },
-          {
-            "fieldPath": "priority",
-            "columnName": "priority",
-            "affinity": "INTEGER",
-            "notNull": true
-          },
-          {
-            "fieldPath": "lifetimeCapCount",
-            "columnName": "lifetimeCapCount",
-            "affinity": "INTEGER",
-            "notNull": true
-          },
-          {
-            "fieldPath": "flightCapCount",
-            "columnName": "flightCapCount",
-            "affinity": "INTEGER",
-            "notNull": true
-          },
-          {
-            "fieldPath": "flightCapPeriod",
-            "columnName": "flightCapPeriod",
-            "affinity": "INTEGER",
-            "notNull": true
-          }
-        ],
-        "primaryKey": {
-          "columnNames": [
-            "id"
-          ],
-          "autoGenerate": false
-        },
-        "indices": [],
-        "foreignKeys": []
-      },
-      {
-        "tableName": "spocs_impressions",
-        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`spocId` INTEGER NOT NULL, `impressionId` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `impressionDateInSeconds` INTEGER NOT NULL, FOREIGN KEY(`spocId`) REFERENCES `spocs`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE )",
-        "fields": [
-          {
-            "fieldPath": "spocId",
-            "columnName": "spocId",
-            "affinity": "INTEGER",
-            "notNull": true
-          },
-          {
-            "fieldPath": "impressionId",
-            "columnName": "impressionId",
-            "affinity": "INTEGER",
-            "notNull": true
-          },
-          {
-            "fieldPath": "impressionDateInSeconds",
-            "columnName": "impressionDateInSeconds",
-            "affinity": "INTEGER",
-            "notNull": true
-          }
-        ],
-        "primaryKey": {
-          "columnNames": [
-            "impressionId"
-          ],
-          "autoGenerate": true
-        },
-        "indices": [
-          {
-            "name": "index_spocs_impressions_spocId",
-            "unique": false,
-            "columnNames": [
-              "spocId"
-            ],
-            "orders": [],
-            "createSql": "CREATE INDEX IF NOT EXISTS `index_spocs_impressions_spocId` ON `${TABLE_NAME}` (`spocId`)"
-          }
-        ],
-        "foreignKeys": [
-          {
-            "table": "spocs",
-            "onDelete": "CASCADE",
-            "onUpdate": "NO ACTION",
-            "columns": [
-              "spocId"
-            ],
-            "referencedColumns": [
-              "id"
-            ]
-          }
-        ]
-      }
-    ],
-    "views": [],
-    "setupQueries": [
-      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
-      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, 'cc5b4d41781399f6ab7f123c10546acc')"
-    ]
-  }
-}
\ No newline at end of file
diff --git a/android-components/components/service/pocket/src/androidTest/java/mozilla/components/service/pocket/stories/db/PocketRecommendationsDatabaseTest.kt b/android-components/components/service/pocket/src/androidTest/java/mozilla/components/service/pocket/stories/db/PocketRecommendationsDatabaseTest.kt
deleted file mode 100644
index fed7f5ff68..0000000000
--- a/android-components/components/service/pocket/src/androidTest/java/mozilla/components/service/pocket/stories/db/PocketRecommendationsDatabaseTest.kt
+++ /dev/null
@@ -1,726 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories.db
-
-import android.content.Context
-import androidx.arch.core.executor.testing.InstantTaskExecutorRule
-import androidx.room.Room
-import androidx.room.testing.MigrationTestHelper
-import androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory
-import androidx.test.core.app.ApplicationProvider
-import androidx.test.platform.app.InstrumentationRegistry
-import kotlinx.coroutines.runBlocking
-import mozilla.components.service.pocket.spocs.db.SpocEntity
-import mozilla.components.service.pocket.spocs.db.SpocImpressionEntity
-import mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase.Companion
-import org.junit.After
-import org.junit.Assert.assertEquals
-import org.junit.Before
-import org.junit.Rule
-import org.junit.Test
-import java.util.concurrent.ExecutorService
-import java.util.concurrent.Executors
-
-private const val MIGRATION_TEST_DB = "migration-test"
-
-class PocketRecommendationsDatabaseTest {
-    private lateinit var context: Context
-    private lateinit var executor: ExecutorService
-    private lateinit var database: PocketRecommendationsDatabase
-
-    @get:Rule
-    @Suppress("DEPRECATION")
-    val helper: MigrationTestHelper = MigrationTestHelper(
-        InstrumentationRegistry.getInstrumentation(),
-        PocketRecommendationsDatabase::class.java.canonicalName,
-        FrameworkSQLiteOpenHelperFactory(),
-    )
-
-    @get:Rule
-    var instantTaskExecutorRule = InstantTaskExecutorRule()
-
-    @Before
-    fun setUp() {
-        executor = Executors.newSingleThreadExecutor()
-
-        context = ApplicationProvider.getApplicationContext()
-        database = Room.inMemoryDatabaseBuilder(context, PocketRecommendationsDatabase::class.java).build()
-    }
-
-    @After
-    fun tearDown() {
-        executor.shutdown()
-        database.clearAllTables()
-    }
-
-    @Test
-    fun `test1To2MigrationAddsNewSpocsTable`() = runBlocking {
-        // Create the database with the version 1 schema
-        val dbVersion1 = helper.createDatabase(MIGRATION_TEST_DB, 1).apply {
-            execSQL(
-                "INSERT INTO " +
-                    "'${PocketRecommendationsDatabase.TABLE_NAME_STORIES}' " +
-                    "(url, title, imageUrl, publisher, category, timeToRead, timesShown) " +
-                    "VALUES (" +
-                    "'${story.url}'," +
-                    "'${story.title}'," +
-                    "'${story.imageUrl}'," +
-                    "'${story.publisher}'," +
-                    "'${story.category}'," +
-                    "'${story.timeToRead}'," +
-                    "'${story.timesShown}'" +
-                    ")",
-            )
-        }
-        // Validate the persisted data which will be re-checked after migration
-        dbVersion1.query(
-            "SELECT * FROM ${PocketRecommendationsDatabase.TABLE_NAME_STORIES}",
-        ).use { cursor ->
-            assertEquals(1, cursor.count)
-
-            cursor.moveToFirst()
-            assertEquals(
-                story,
-                PocketStoryEntity(
-                    url = cursor.getString(0),
-                    title = cursor.getString(1),
-                    imageUrl = cursor.getString(2),
-                    publisher = cursor.getString(3),
-                    category = cursor.getString(4),
-                    timeToRead = cursor.getInt(5),
-                    timesShown = cursor.getLong(6),
-                ),
-            )
-        }
-
-        // Migrate the initial database to the version 2 schema
-        val dbVersion2 = helper.runMigrationsAndValidate(
-            MIGRATION_TEST_DB,
-            2,
-            true,
-            Migrations.migration_1_2,
-        ).apply {
-            execSQL(
-                "INSERT INTO " +
-                    "'${PocketRecommendationsDatabase.TABLE_NAME_SPOCS}' " +
-                    "(url, title, imageUrl, sponsor, clickShim, impressionShim) " +
-                    "VALUES (" +
-                    "'${spoc.url}'," +
-                    "'${spoc.title}'," +
-                    "'${spoc.imageUrl}'," +
-                    "'${spoc.sponsor}'," +
-                    "'${spoc.clickShim}'," +
-                    "'${spoc.impressionShim}'" +
-                    ")",
-            )
-        }
-        // Re-check the initial data we had
-        dbVersion2.query(
-            "SELECT * FROM ${PocketRecommendationsDatabase.TABLE_NAME_STORIES}",
-        ).use { cursor ->
-            assertEquals(1, cursor.count)
-
-            cursor.moveToFirst()
-            assertEquals(
-                story,
-                PocketStoryEntity(
-                    url = cursor.getString(0),
-                    title = cursor.getString(1),
-                    imageUrl = cursor.getString(2),
-                    publisher = cursor.getString(3),
-                    category = cursor.getString(4),
-                    timeToRead = cursor.getInt(5),
-                    timesShown = cursor.getLong(6),
-                ),
-            )
-        }
-        // Finally validate that the new spocs are persisted successfully
-        dbVersion2.query(
-            "SELECT * FROM ${PocketRecommendationsDatabase.TABLE_NAME_SPOCS}",
-        ).use { cursor ->
-            assertEquals(1, cursor.count)
-
-            cursor.moveToFirst()
-            assertEquals(spoc.url, cursor.getString(0))
-            assertEquals(spoc.title, cursor.getString(1))
-            assertEquals(spoc.imageUrl, cursor.getString(2))
-            assertEquals(spoc.sponsor, cursor.getString(3))
-            assertEquals(spoc.clickShim, cursor.getString(4))
-            assertEquals(spoc.impressionShim, cursor.getString(5))
-        }
-    }
-
-    @Test
-    fun `test2To3MigrationDropsOldSpocsTableAndAddsNewSpocsAndSpocsImpressionsTables`() = runBlocking {
-        // Create the database with the version 2 schema
-        val dbVersion2 = helper.createDatabase(MIGRATION_TEST_DB, 2).apply {
-            execSQL(
-                "INSERT INTO " +
-                    "'${Companion.TABLE_NAME_STORIES}' " +
-                    "(url, title, imageUrl, publisher, category, timeToRead, timesShown) " +
-                    "VALUES (" +
-                    "'${story.url}'," +
-                    "'${story.title}'," +
-                    "'${story.imageUrl}'," +
-                    "'${story.publisher}'," +
-                    "'${story.category}'," +
-                    "'${story.timeToRead}'," +
-                    "'${story.timesShown}'" +
-                    ")",
-            )
-            execSQL(
-                "INSERT INTO " +
-                    "'${PocketRecommendationsDatabase.TABLE_NAME_SPOCS}' " +
-                    "(url, title, imageUrl, sponsor, clickShim, impressionShim) " +
-                    "VALUES (" +
-                    "'${spoc.url}'," +
-                    "'${spoc.title}'," +
-                    "'${spoc.imageUrl}'," +
-                    "'${spoc.sponsor}'," +
-                    "'${spoc.clickShim}'," +
-                    "'${spoc.impressionShim}'" +
-                    ")",
-            )
-        }
-
-        // Validate the recommended stories data which will be re-checked after migration
-        dbVersion2.query(
-            "SELECT * FROM ${Companion.TABLE_NAME_STORIES}",
-        ).use { cursor ->
-            assertEquals(1, cursor.count)
-
-            cursor.moveToFirst()
-            assertEquals(
-                story,
-                PocketStoryEntity(
-                    url = cursor.getString(0),
-                    title = cursor.getString(1),
-                    imageUrl = cursor.getString(2),
-                    publisher = cursor.getString(3),
-                    category = cursor.getString(4),
-                    timeToRead = cursor.getInt(5),
-                    timesShown = cursor.getLong(6),
-                ),
-            )
-        }
-
-        // Migrate to v3 database
-        val dbVersion3 = helper.runMigrationsAndValidate(
-            MIGRATION_TEST_DB,
-            3,
-            true,
-            Migrations.migration_2_3,
-        )
-
-        // Check that recommended stories are unchanged.
-        dbVersion3.query(
-            "SELECT * FROM ${PocketRecommendationsDatabase.TABLE_NAME_STORIES}",
-        ).use { cursor ->
-            assertEquals(1, cursor.count)
-
-            cursor.moveToFirst()
-            assertEquals(
-                story,
-                PocketStoryEntity(
-                    url = cursor.getString(0),
-                    title = cursor.getString(1),
-                    imageUrl = cursor.getString(2),
-                    publisher = cursor.getString(3),
-                    category = cursor.getString(4),
-                    timeToRead = cursor.getInt(5),
-                    timesShown = cursor.getLong(6),
-                ),
-            )
-        }
-
-        // Finally validate that we have two new empty tables for spocs and spocs impressions.
-        dbVersion3.query(
-            "SELECT * FROM ${PocketRecommendationsDatabase.TABLE_NAME_SPOCS}",
-        ).use { cursor ->
-            assertEquals(0, cursor.count)
-            assertEquals(11, cursor.columnCount)
-
-            assertEquals("id", cursor.getColumnName(0))
-            assertEquals("url", cursor.getColumnName(1))
-            assertEquals("title", cursor.getColumnName(2))
-            assertEquals("imageUrl", cursor.getColumnName(3))
-            assertEquals("sponsor", cursor.getColumnName(4))
-            assertEquals("clickShim", cursor.getColumnName(5))
-            assertEquals("impressionShim", cursor.getColumnName(6))
-            assertEquals("priority", cursor.getColumnName(7))
-            assertEquals("lifetimeCapCount", cursor.getColumnName(8))
-            assertEquals("flightCapCount", cursor.getColumnName(9))
-            assertEquals("flightCapPeriod", cursor.getColumnName(10))
-        }
-        dbVersion3.query(
-            "SELECT * FROM ${PocketRecommendationsDatabase.TABLE_NAME_SPOCS_IMPRESSIONS}",
-        ).use { cursor ->
-            assertEquals(0, cursor.count)
-            assertEquals(3, cursor.columnCount)
-
-            assertEquals("spocId", cursor.getColumnName(0))
-            assertEquals("impressionId", cursor.getColumnName(1))
-            assertEquals("impressionDateInSeconds", cursor.getColumnName(2))
-        }
-    }
-
-    @Test
-    fun `test1To3MigrationAddsNewSpocsAndSpocsImpressionsTables`() = runBlocking {
-        // Create the database with the version 1 schema
-        val dbVersion1 = helper.createDatabase(MIGRATION_TEST_DB, 1).apply {
-            execSQL(
-                "INSERT INTO " +
-                    "'${Companion.TABLE_NAME_STORIES}' " +
-                    "(url, title, imageUrl, publisher, category, timeToRead, timesShown) " +
-                    "VALUES (" +
-                    "'${story.url}'," +
-                    "'${story.title}'," +
-                    "'${story.imageUrl}'," +
-                    "'${story.publisher}'," +
-                    "'${story.category}'," +
-                    "'${story.timeToRead}'," +
-                    "'${story.timesShown}'" +
-                    ")",
-            )
-        }
-        // Validate the persisted data which will be re-checked after migration
-        dbVersion1.query(
-            "SELECT * FROM ${Companion.TABLE_NAME_STORIES}",
-        ).use { cursor ->
-            assertEquals(1, cursor.count)
-
-            cursor.moveToFirst()
-            assertEquals(
-                story,
-                PocketStoryEntity(
-                    url = cursor.getString(0),
-                    title = cursor.getString(1),
-                    imageUrl = cursor.getString(2),
-                    publisher = cursor.getString(3),
-                    category = cursor.getString(4),
-                    timeToRead = cursor.getInt(5),
-                    timesShown = cursor.getLong(6),
-                ),
-            )
-        }
-
-        val impression = SpocImpressionEntity(spoc.id).apply {
-            impressionId = 1
-            impressionDateInSeconds = 700L
-        }
-        // Migrate the initial database to the version 2 schema
-        val dbVersion3 = helper.runMigrationsAndValidate(
-            MIGRATION_TEST_DB,
-            3,
-            true,
-            Migrations.migration_1_3,
-        ).apply {
-            execSQL(
-                "INSERT INTO " +
-                    "'${PocketRecommendationsDatabase.TABLE_NAME_SPOCS}' (" +
-                    "id, url, title, imageUrl, sponsor, clickShim, impressionShim, " +
-                    "priority, lifetimeCapCount, flightCapCount, flightCapPeriod" +
-                    ") VALUES (" +
-                    "'${spoc.id}'," +
-                    "'${spoc.url}'," +
-                    "'${spoc.title}'," +
-                    "'${spoc.imageUrl}'," +
-                    "'${spoc.sponsor}'," +
-                    "'${spoc.clickShim}'," +
-                    "'${spoc.impressionShim}'," +
-                    "'${spoc.priority}'," +
-                    "'${spoc.lifetimeCapCount}'," +
-                    "'${spoc.flightCapCount}'," +
-                    "'${spoc.flightCapPeriod}'" +
-                    ")",
-            )
-
-            execSQL(
-                "INSERT INTO " +
-                    "'${PocketRecommendationsDatabase.TABLE_NAME_SPOCS_IMPRESSIONS}' (" +
-                    "spocId, impressionId, impressionDateInSeconds" +
-                    ") VALUES (" +
-                    "'${impression.spocId}'," +
-                    "'${impression.impressionId}'," +
-                    "'${impression.impressionDateInSeconds}'" +
-                    ")",
-            )
-        }
-        // Re-check the initial data we had
-        dbVersion3.query(
-            "SELECT * FROM ${PocketRecommendationsDatabase.TABLE_NAME_STORIES}",
-        ).use { cursor ->
-            assertEquals(1, cursor.count)
-
-            cursor.moveToFirst()
-            assertEquals(
-                story,
-                PocketStoryEntity(
-                    url = cursor.getString(0),
-                    title = cursor.getString(1),
-                    imageUrl = cursor.getString(2),
-                    publisher = cursor.getString(3),
-                    category = cursor.getString(4),
-                    timeToRead = cursor.getInt(5),
-                    timesShown = cursor.getLong(6),
-                ),
-            )
-        }
-        // Finally validate that the new spocs are persisted successfully
-        dbVersion3.query(
-            "SELECT * FROM ${PocketRecommendationsDatabase.TABLE_NAME_SPOCS}",
-        ).use { cursor ->
-            assertEquals(1, cursor.count)
-
-            cursor.moveToFirst()
-            assertEquals(spoc.id, cursor.getInt(0))
-            assertEquals(spoc.url, cursor.getString(1))
-            assertEquals(spoc.title, cursor.getString(2))
-            assertEquals(spoc.imageUrl, cursor.getString(3))
-            assertEquals(spoc.sponsor, cursor.getString(4))
-            assertEquals(spoc.clickShim, cursor.getString(5))
-            assertEquals(spoc.impressionShim, cursor.getString(6))
-            assertEquals(spoc.priority, cursor.getInt(7))
-            assertEquals(spoc.lifetimeCapCount, cursor.getInt(8))
-            assertEquals(spoc.flightCapCount, cursor.getInt(9))
-            assertEquals(spoc.flightCapPeriod, cursor.getInt(10))
-        }
-        // And that the impression was also persisted successfully
-        dbVersion3.query(
-            "SELECT * FROM ${PocketRecommendationsDatabase.TABLE_NAME_SPOCS_IMPRESSIONS}",
-        ).use { cursor ->
-            assertEquals(1, cursor.count)
-
-            cursor.moveToFirst()
-            assertEquals(impression.spocId, cursor.getInt(0))
-            assertEquals(impression.impressionId, cursor.getInt(1))
-            assertEquals(impression.impressionDateInSeconds, cursor.getLong(2))
-        }
-    }
-
-    @Test
-    fun `test3To4MigrationAddsNewIndexKeepsOldDataAndAllowsNewData`() = runBlocking {
-        // Create the database with the version 3 schema
-        val dbVersion3 = helper.createDatabase(MIGRATION_TEST_DB, 3).apply {
-            execSQL(
-                "INSERT INTO " +
-                    "'${Companion.TABLE_NAME_STORIES}' " +
-                    "(url, title, imageUrl, publisher, category, timeToRead, timesShown) " +
-                    "VALUES (" +
-                    "'${story.url}'," +
-                    "'${story.title}'," +
-                    "'${story.imageUrl}'," +
-                    "'${story.publisher}'," +
-                    "'${story.category}'," +
-                    "'${story.timeToRead}'," +
-                    "'${story.timesShown}'" +
-                    ")",
-            )
-            execSQL(
-                "INSERT INTO " +
-                    "'${PocketRecommendationsDatabase.TABLE_NAME_SPOCS}' (" +
-                    "id, url, title, imageUrl, sponsor, clickShim, impressionShim, " +
-                    "priority, lifetimeCapCount, flightCapCount, flightCapPeriod" +
-                    ") VALUES (" +
-                    "'${spoc.id}'," +
-                    "'${spoc.url}'," +
-                    "'${spoc.title}'," +
-                    "'${spoc.imageUrl}'," +
-                    "'${spoc.sponsor}'," +
-                    "'${spoc.clickShim}'," +
-                    "'${spoc.impressionShim}'," +
-                    "'${spoc.priority}'," +
-                    "'${spoc.lifetimeCapCount}'," +
-                    "'${spoc.flightCapCount}'," +
-                    "'${spoc.flightCapPeriod}'" +
-                    ")",
-            )
-            execSQL(
-                "INSERT INTO " +
-                    "'${PocketRecommendationsDatabase.TABLE_NAME_SPOCS_IMPRESSIONS}' (" +
-                    "spocId, impressionId, impressionDateInSeconds" +
-                    ") VALUES (" +
-                    "${spoc.id}, 0, 1" +
-                    ")",
-            )
-            // Add a new impression of the same spoc to test proper the index uniqueness
-            execSQL(
-                "INSERT INTO " +
-                    "'${PocketRecommendationsDatabase.TABLE_NAME_SPOCS_IMPRESSIONS}' (" +
-                    "spocId, impressionId, impressionDateInSeconds" +
-                    ") VALUES (" +
-                    "${spoc.id}, 1, 2" +
-                    ")",
-            )
-        }
-
-        // Validate the data before migration
-        dbVersion3.query(
-            "SELECT * FROM ${Companion.TABLE_NAME_STORIES}",
-        ).use { cursor ->
-            assertEquals(1, cursor.count)
-
-            cursor.moveToFirst()
-            assertEquals(
-                story,
-                PocketStoryEntity(
-                    url = cursor.getString(0),
-                    title = cursor.getString(1),
-                    imageUrl = cursor.getString(2),
-                    publisher = cursor.getString(3),
-                    category = cursor.getString(4),
-                    timeToRead = cursor.getInt(5),
-                    timesShown = cursor.getLong(6),
-                ),
-            )
-        }
-        dbVersion3.query(
-            "SELECT * FROM ${Companion.TABLE_NAME_SPOCS}",
-        ).use { cursor ->
-            assertEquals(1, cursor.count)
-
-            cursor.moveToFirst()
-            assertEquals(
-                spoc,
-                SpocEntity(
-                    id = cursor.getInt(0),
-                    url = cursor.getString(1),
-                    title = cursor.getString(2),
-                    imageUrl = cursor.getString(3),
-                    sponsor = cursor.getString(4),
-                    clickShim = cursor.getString(5),
-                    impressionShim = cursor.getString(6),
-                    priority = cursor.getInt(7),
-                    lifetimeCapCount = cursor.getInt(8),
-                    flightCapCount = cursor.getInt(9),
-                    flightCapPeriod = cursor.getInt(10),
-                ),
-            )
-        }
-        dbVersion3.query(
-            "SELECT * FROM ${Companion.TABLE_NAME_SPOCS_IMPRESSIONS}",
-        ).use { cursor ->
-            assertEquals(2, cursor.count)
-
-            cursor.moveToFirst()
-            assertEquals(spoc.id, cursor.getInt(0))
-            cursor.moveToNext()
-            assertEquals(spoc.id, cursor.getInt(0))
-        }
-
-        // Migrate to v4 database
-        val dbVersion4 = helper.runMigrationsAndValidate(
-            MIGRATION_TEST_DB,
-            4,
-            true,
-            Migrations.migration_3_4,
-        )
-
-        // Check that we have the same data as before. Just that a new index was added for faster queries.
-        dbVersion4.query(
-            "SELECT * FROM ${Companion.TABLE_NAME_STORIES}",
-        ).use { cursor ->
-            assertEquals(1, cursor.count)
-
-            cursor.moveToFirst()
-            assertEquals(
-                story,
-                PocketStoryEntity(
-                    url = cursor.getString(0),
-                    title = cursor.getString(1),
-                    imageUrl = cursor.getString(2),
-                    publisher = cursor.getString(3),
-                    category = cursor.getString(4),
-                    timeToRead = cursor.getInt(5),
-                    timesShown = cursor.getLong(6),
-                ),
-            )
-        }
-        dbVersion4.query(
-            "SELECT * FROM ${Companion.TABLE_NAME_SPOCS}",
-        ).use { cursor ->
-            assertEquals(1, cursor.count)
-
-            cursor.moveToFirst()
-            assertEquals(
-                spoc,
-                SpocEntity(
-                    id = cursor.getInt(0),
-                    url = cursor.getString(1),
-                    title = cursor.getString(2),
-                    imageUrl = cursor.getString(3),
-                    sponsor = cursor.getString(4),
-                    clickShim = cursor.getString(5),
-                    impressionShim = cursor.getString(6),
-                    priority = cursor.getInt(7),
-                    lifetimeCapCount = cursor.getInt(8),
-                    flightCapCount = cursor.getInt(9),
-                    flightCapPeriod = cursor.getInt(10),
-                ),
-            )
-        }
-        dbVersion4.query(
-            "SELECT * FROM ${Companion.TABLE_NAME_SPOCS_IMPRESSIONS}",
-        ).use { cursor ->
-            assertEquals(2, cursor.count)
-
-            cursor.moveToFirst()
-            assertEquals(spoc.id, cursor.getInt(0))
-            cursor.moveToNext()
-            assertEquals(spoc.id, cursor.getInt(0))
-        }
-
-        // After adding an index check that inserting new data works as expected
-        val otherSpoc = spoc.copy(
-            id = spoc.id + 2,
-            url = spoc.url + "2",
-            title = spoc.title + "2",
-            imageUrl = spoc.imageUrl + "2",
-            sponsor = spoc.sponsor + "2",
-            clickShim = spoc.clickShim + "2",
-            impressionShim = spoc.impressionShim + "2",
-            priority = spoc.priority + 2,
-            lifetimeCapCount = spoc.lifetimeCapCount - 2,
-            flightCapCount = spoc.flightCapPeriod * 2,
-            flightCapPeriod = spoc.flightCapPeriod / 2,
-        )
-        dbVersion4.execSQL(
-            "INSERT INTO " +
-                "'${PocketRecommendationsDatabase.TABLE_NAME_SPOCS}' (" +
-                "id, url, title, imageUrl, sponsor, clickShim, impressionShim, " +
-                "priority, lifetimeCapCount, flightCapCount, flightCapPeriod" +
-                ") VALUES (" +
-                "'${otherSpoc.id}'," +
-                "'${otherSpoc.url}'," +
-                "'${otherSpoc.title}'," +
-                "'${otherSpoc.imageUrl}'," +
-                "'${otherSpoc.sponsor}'," +
-                "'${otherSpoc.clickShim}'," +
-                "'${otherSpoc.impressionShim}'," +
-                "'${otherSpoc.priority}'," +
-                "'${otherSpoc.lifetimeCapCount}'," +
-                "'${otherSpoc.flightCapCount}'," +
-                "'${otherSpoc.flightCapPeriod}'" +
-                ")",
-        )
-        dbVersion4.execSQL(
-            "INSERT INTO " +
-                "'${PocketRecommendationsDatabase.TABLE_NAME_SPOCS_IMPRESSIONS}' (" +
-                "spocId, impressionId, impressionDateInSeconds" +
-                ") VALUES (" +
-                "${spoc.id}, 22, 33" +
-                ")",
-        )
-        // Test a new spoc and a new impressions of it are properly recorded.Z
-        dbVersion4.execSQL(
-            "INSERT INTO " +
-                "'${PocketRecommendationsDatabase.TABLE_NAME_SPOCS_IMPRESSIONS}' (" +
-                "spocId, impressionId, impressionDateInSeconds" +
-                ") VALUES (" +
-                "${otherSpoc.id}, 23, 34" +
-                ")",
-        )
-        // Add a new impression of the same spoc to test proper the index uniqueness
-        dbVersion4.execSQL(
-            "INSERT INTO " +
-                "'${PocketRecommendationsDatabase.TABLE_NAME_SPOCS_IMPRESSIONS}' (" +
-                "spocId, impressionId, impressionDateInSeconds" +
-                ") VALUES (" +
-                "${otherSpoc.id}, 24, 35" +
-                ")",
-        )
-        dbVersion4.query(
-            "SELECT * FROM ${Companion.TABLE_NAME_SPOCS} ORDER BY 'id'",
-        ).use { cursor ->
-            assertEquals(2, cursor.count)
-
-            cursor.moveToFirst()
-            assertEquals(
-                spoc,
-                SpocEntity(
-                    id = cursor.getInt(0),
-                    url = cursor.getString(1),
-                    title = cursor.getString(2),
-                    imageUrl = cursor.getString(3),
-                    sponsor = cursor.getString(4),
-                    clickShim = cursor.getString(5),
-                    impressionShim = cursor.getString(6),
-                    priority = cursor.getInt(7),
-                    lifetimeCapCount = cursor.getInt(8),
-                    flightCapCount = cursor.getInt(9),
-                    flightCapPeriod = cursor.getInt(10),
-                ),
-            )
-
-            cursor.moveToNext()
-            assertEquals(
-                otherSpoc,
-                SpocEntity(
-                    id = cursor.getInt(0),
-                    url = cursor.getString(1),
-                    title = cursor.getString(2),
-                    imageUrl = cursor.getString(3),
-                    sponsor = cursor.getString(4),
-                    clickShim = cursor.getString(5),
-                    impressionShim = cursor.getString(6),
-                    priority = cursor.getInt(7),
-                    lifetimeCapCount = cursor.getInt(8),
-                    flightCapCount = cursor.getInt(9),
-                    flightCapPeriod = cursor.getInt(10),
-                ),
-            )
-        }
-        dbVersion4.query(
-            "SELECT * FROM ${Companion.TABLE_NAME_SPOCS_IMPRESSIONS} ORDER BY 'impressionId'",
-        ).use { cursor ->
-            assertEquals(5, cursor.count)
-
-            cursor.moveToFirst()
-            assertEquals(spoc.id, cursor.getInt(0))
-            assertEquals(0, cursor.getInt(1))
-            assertEquals(1, cursor.getInt(2))
-            cursor.moveToNext()
-            assertEquals(spoc.id, cursor.getInt(0))
-            assertEquals(1, cursor.getInt(1))
-            assertEquals(2, cursor.getInt(2))
-            cursor.moveToNext()
-            assertEquals(spoc.id, cursor.getInt(0))
-            assertEquals(22, cursor.getInt(1))
-            assertEquals(33, cursor.getInt(2))
-            cursor.moveToNext()
-            assertEquals(otherSpoc.id, cursor.getInt(0))
-            assertEquals(23, cursor.getInt(1))
-            assertEquals(34, cursor.getInt(2))
-            cursor.moveToNext()
-            assertEquals(otherSpoc.id, cursor.getInt(0))
-            assertEquals(24, cursor.getInt(1))
-            assertEquals(35, cursor.getInt(2))
-        }
-    }
-}
-
-private val story = PocketStoryEntity(
-    title = "How to Get Rid of Black Mold Naturally",
-    url = "https://getpocket.com/explore/item/how-to-get-rid-of-black-mold-naturally",
-    imageUrl = "https://img-getpocket.cdn.mozilla.net/{wh}/filters:format(jpeg):quality(60):no_upscale():strip_exif()/https%3A%2F%2Fpocket-image-cache.com%2F1200x%2Ffilters%3Aformat(jpg)%3Aextract_focal()%2Fhttps%253A%252F%252Fpocket-syndicated-images.s3.amazonaws.com%252Farticles%252F6757%252F1628024495_6109ae86db6cc.png",
-    publisher = "Pocket",
-    category = "general",
-    timeToRead = 4,
-    timesShown = 23,
-)
-
-private val spoc = SpocEntity(
-    id = 191739319,
-    url = "https://i.geistm.com/l/GC_7ReasonsKetoV2_Journiest?bcid=601c567ac5b18a0414cce1d4&bhid=624f3ea9adad7604086ac6b3&utm_content=PKT_A_7ReasonsKetoV2_Journiest_40702022_RawMeatballUGC_130Off_601c567ac5b18a0414cce1d4_624f3ea9adad7604086ac6b3&tv=su4&ct=NAT-PK-PROS-130OFF5WEEK-037&utm_medium=DB&utm_source=pocket~geistm&utm_campaign=PKT_A_7ReasonsKetoV2_Journiest_40702022_RawMeatballUGC_130Off",
-    title = "Eating Keto Has Never Been So Easy With Green Chef",
-    imageUrl = "https://img-getpocket.cdn.mozilla.net/direct?url=realUrl.png&resize=w618-h310",
-    sponsor = "Green Chef",
-    clickShim = "193815086ClickShim",
-    impressionShim = "193815086ImpressionShim",
-    priority = 3,
-    lifetimeCapCount = 50,
-    flightCapCount = 10,
-    flightCapPeriod = 86400,
-)
diff --git a/android-components/components/service/pocket/src/main/AndroidManifest.xml b/android-components/components/service/pocket/src/main/AndroidManifest.xml
deleted file mode 100644
index e16cda1d34..0000000000
--- a/android-components/components/service/pocket/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<!-- This Source Code Form is subject to the terms of the Mozilla Public
-   - License, v. 2.0. If a copy of the MPL was not distributed with this
-   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
-<manifest />
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/GlobalDependencyProvider.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/GlobalDependencyProvider.kt
deleted file mode 100644
index f05dd7dbe7..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/GlobalDependencyProvider.kt
+++ /dev/null
@@ -1,69 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket
-
-import android.annotation.SuppressLint
-import mozilla.components.service.pocket.spocs.SpocsUseCases
-import mozilla.components.service.pocket.stories.PocketStoriesUseCases
-
-/**
- * Provides global access to the dependencies needed for updating Pocket stories.
- */
-internal object GlobalDependencyProvider {
-    internal object RecommendedStories {
-        /**
-         * Possible actions regarding the list of recommended stories.
-         */
-        @SuppressLint("StaticFieldLeak")
-        internal var useCases: PocketStoriesUseCases? = null
-            private set
-
-        /**
-         * Convenience method for setting all details used when communicating with the Pocket server.
-         *
-         * @param useCases [PocketStoriesUseCases] containing all possible actions regarding
-         * the list of recommended stories.
-         */
-        internal fun initialize(
-            useCases: PocketStoriesUseCases,
-        ) {
-            this.useCases = useCases
-        }
-
-        /**
-         * Convenience method for cleaning up any resources held for communicating with the Pocket server.
-         */
-        internal fun reset() {
-            this.useCases = null
-        }
-    }
-
-    internal object SponsoredStories {
-        /**
-         * Possible actions regarding the list of sponsored stories.
-         */
-        @SuppressLint("StaticFieldLeak")
-        internal var useCases: SpocsUseCases? = null
-            private set
-
-        /**
-         * Convenience method for setting all details used when communicating with the Pocket server.
-         *
-         * @param useCases [SpocsUseCases] containing all possible actions regarding the list of sponsored stories.
-         */
-        internal fun initialize(
-            useCases: SpocsUseCases,
-        ) {
-            this.useCases = useCases
-        }
-
-        /**
-         * Convenience method for cleaning up any resources held for communicating with the Pocket server.
-         */
-        internal fun reset() {
-            useCases = null
-        }
-    }
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/Logger.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/Logger.kt
deleted file mode 100644
index ab1732b707..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/Logger.kt
+++ /dev/null
@@ -1,12 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket
-
-import mozilla.components.support.base.log.logger.Logger
-
-/**
- * Internal logger for the ":service-pocket" module.
- */
-internal val logger = Logger("service-pocket")
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/PocketStoriesConfig.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/PocketStoriesConfig.kt
deleted file mode 100644
index ba077afb0b..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/PocketStoriesConfig.kt
+++ /dev/null
@@ -1,68 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket
-
-import mozilla.components.concept.fetch.Client
-import mozilla.components.support.base.worker.Frequency
-import java.util.UUID
-import java.util.concurrent.TimeUnit
-
-internal const val DEFAULT_SPONSORED_STORIES_SITE_ID = "1240699"
-internal const val DEFAULT_REFRESH_INTERVAL = 4L
-internal const val DEFAULT_SPONSORED_STORIES_REFRESH_INTERVAL = 4L
-
-@Suppress("TopLevelPropertyNaming")
-internal val DEFAULT_REFRESH_TIMEUNIT = TimeUnit.HOURS
-
-@Suppress("TopLevelPropertyNaming")
-internal val DEFAULT_SPONSORED_STORIES_REFRESH_TIMEUNIT = TimeUnit.HOURS
-
-/**
- * Indicating all details for how the pocket stories should be refreshed.
- *
- * @param client [Client] implementation used for downloading the Pocket stories.
- * @param frequency Optional - The interval at which to try and refresh items. Defaults to 4 hours.
- * @param profile Optional - The profile used for downloading sponsored Pocket stories.
- * @param sponsoredStoriesRefreshFrequency Optional - The interval at which to try and refresh sponsored stories.
- * Defaults to 4 hours.
- * @param sponsoredStoriesParams Optional - Configuration containing parameters used to get the spoc content.
- */
-class PocketStoriesConfig(
-    val client: Client,
-    val frequency: Frequency = Frequency(
-        DEFAULT_REFRESH_INTERVAL,
-        DEFAULT_REFRESH_TIMEUNIT,
-    ),
-    val profile: Profile? = null,
-    val sponsoredStoriesRefreshFrequency: Frequency = Frequency(
-        DEFAULT_SPONSORED_STORIES_REFRESH_INTERVAL,
-        DEFAULT_SPONSORED_STORIES_REFRESH_TIMEUNIT,
-    ),
-    val sponsoredStoriesParams: PocketStoriesRequestConfig = PocketStoriesRequestConfig(),
-)
-
-/**
- * Configuration for sponsored stories request indicating parameters used to get spoc content.
- *
- * @property siteId Optional - ID of the site parameter, should be used with care as it changes the
- * set of sponsored stories fetched from the server.
- * @property country Optional - Value of the country parameter, shall be used with care as it allows
- * overriding the IP location and receiving a set of sponsored stories not suited for the real location.
- * @property city Optional - Value of the city parameter, shall be used with care as it allows
- * overriding the IP location and receiving a set of sponsored stories not suited for the real location.
- */
-class PocketStoriesRequestConfig(
-    val siteId: String = DEFAULT_SPONSORED_STORIES_SITE_ID,
-    val country: String = "",
-    val city: String = "",
-)
-
-/**
- * Sponsored stories configuration data.
- *
- * @param profileId Unique profile identifier which will be presented with sponsored stories.
- * @param appId Unique identifier of the application using this feature.
- */
-class Profile(val profileId: UUID, val appId: String)
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/PocketStoriesService.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/PocketStoriesService.kt
deleted file mode 100644
index 6688d75926..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/PocketStoriesService.kt
+++ /dev/null
@@ -1,172 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket
-
-import android.content.Context
-import androidx.annotation.VisibleForTesting
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStory
-import mozilla.components.service.pocket.spocs.SpocsUseCases
-import mozilla.components.service.pocket.stories.PocketStoriesUseCases
-import mozilla.components.service.pocket.update.PocketStoriesRefreshScheduler
-import mozilla.components.service.pocket.update.SpocsRefreshScheduler
-
-/**
- * Allows for getting a list of pocket stories based on the provided [PocketStoriesConfig]
- *
- * @param context Android Context. Prefer sending application context to limit the possibility of even small leaks.
- * @param pocketStoriesConfig configuration for how and what pocket stories to get.
- */
-class PocketStoriesService(
-    private val context: Context,
-    private val pocketStoriesConfig: PocketStoriesConfig,
-) {
-    @VisibleForTesting
-    internal var storiesRefreshScheduler = PocketStoriesRefreshScheduler(pocketStoriesConfig)
-
-    @VisibleForTesting
-    internal var spocsRefreshscheduler = SpocsRefreshScheduler(pocketStoriesConfig)
-
-    @VisibleForTesting
-    internal var storiesUseCases = PocketStoriesUseCases(
-        appContext = context,
-        fetchClient = pocketStoriesConfig.client,
-    )
-
-    @VisibleForTesting
-    internal var spocsUseCases = when (pocketStoriesConfig.profile) {
-        null -> {
-            logger.debug("Missing profile for sponsored stories")
-            null
-        }
-        else -> SpocsUseCases(
-            appContext = context,
-            fetchClient = pocketStoriesConfig.client,
-            profileId = pocketStoriesConfig.profile.profileId,
-            appId = pocketStoriesConfig.profile.appId,
-            sponsoredStoriesParams = pocketStoriesConfig.sponsoredStoriesParams,
-        )
-    }
-
-    /**
-     * Entry point to start fetching Pocket stories in the background.
-     *
-     * Use this at an as high as possible level in your application.
-     * Must be paired in a similar way with the [stopPeriodicStoriesRefresh] method.
-     *
-     * This starts the process of downloading and caching Pocket stories in the background,
-     * making them available for the [getStories] method.
-     */
-    fun startPeriodicStoriesRefresh() {
-        GlobalDependencyProvider.RecommendedStories.initialize(storiesUseCases)
-        storiesRefreshScheduler.schedulePeriodicRefreshes(context)
-    }
-
-    /**
-     * Single stopping point for the "get Pocket stories" functionality.
-     *
-     * Use this at an as high as possible level in your application.
-     * Must be paired in a similar way with the [startPeriodicStoriesRefresh] method.
-     *
-     * This stops the process of downloading and caching Pocket stories in the background.
-     */
-    fun stopPeriodicStoriesRefresh() {
-        storiesRefreshScheduler.stopPeriodicRefreshes(context)
-        GlobalDependencyProvider.RecommendedStories.reset()
-    }
-
-    /**
-     * Get a list of Pocket recommended stories based on the initial configuration.
-     *
-     * To be called after [startPeriodicStoriesRefresh] to ensure the recommendations are up-to-date.
-     * Might return an empty list or a list of older than expected stories if
-     * [startPeriodicStoriesRefresh] hasn't yet completed.
-     */
-    suspend fun getStories(): List<PocketRecommendedStory> {
-        return storiesUseCases.getStories()
-    }
-
-    /**
-     * Entry point to start fetching Pocket sponsored stories in the background.
-     *
-     * Use this at an as high as possible level in your application.
-     * Must be paired in a similar way with the [stopPeriodicSponsoredStoriesRefresh] method.
-     *
-     * This starts the process of downloading and caching Pocket sponsored stories in the background,
-     * making them available for the [getSponsoredStories] method.
-     */
-    fun startPeriodicSponsoredStoriesRefresh() {
-        val useCases = spocsUseCases
-        if (useCases == null) {
-            logger.warn("Cannot start sponsored stories refresh. Service has incomplete setup")
-            return
-        }
-
-        GlobalDependencyProvider.SponsoredStories.initialize(useCases)
-        spocsRefreshscheduler.stopProfileDeletion(context)
-        spocsRefreshscheduler.schedulePeriodicRefreshes(context)
-    }
-
-    /**
-     * Single stopping point for the "refresh sponsored Pocket stories" functionality.
-     *
-     * Use this at an as high as possible level in your application.
-     * Must be paired in a similar way with the [startPeriodicSponsoredStoriesRefresh] method.
-     *
-     * This stops the process of downloading and caching Pocket sponsored stories in the background.
-     */
-    fun stopPeriodicSponsoredStoriesRefresh() {
-        spocsRefreshscheduler.stopPeriodicRefreshes(context)
-    }
-
-    /**
-     * Fetch sponsored Pocket stories and refresh the locally persisted list.
-     */
-    suspend fun refreshSponsoredStories() {
-        spocsUseCases?.refreshStories?.invoke()
-    }
-
-    /**
-     * Get a list of Pocket sponsored stories based on the initial configuration.
-     */
-    suspend fun getSponsoredStories(): List<PocketSponsoredStory> {
-        return spocsUseCases?.getStories?.invoke() ?: emptyList()
-    }
-
-    /**
-     * Delete all stored user data used for downloading personalized sponsored stories.
-     * This returns immediately but will handle the profile deletion in background.
-     */
-    fun deleteProfile() {
-        val useCases = spocsUseCases
-        if (useCases == null) {
-            logger.warn("Cannot delete sponsored stories profile. Service has incomplete setup")
-            return
-        }
-
-        GlobalDependencyProvider.SponsoredStories.initialize(useCases)
-        spocsRefreshscheduler.stopPeriodicRefreshes(context)
-        spocsRefreshscheduler.scheduleProfileDeletion(context)
-    }
-
-    /**
-     * Update how many times certain stories were shown to the user.
-     *
-     * Safe to call from any background thread.
-     * Automatically synchronized with the other [PocketStoriesService] methods.
-     */
-    suspend fun updateStoriesTimesShown(updatedStories: List<PocketRecommendedStory>) {
-        storiesUseCases.updateTimesShown(updatedStories)
-    }
-
-    /**
-     * Persist locally that the sponsored Pocket stories containing the ids from [storiesShown]
-     * were shown to the user.
-     * This is safe to call with any ids, even ones for stories not currently persisted anymore.
-     */
-    suspend fun recordStoriesImpressions(storiesShown: List<Int>) {
-        spocsUseCases?.recordImpression?.invoke(storiesShown)
-    }
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/PocketStory.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/PocketStory.kt
deleted file mode 100644
index 702641268d..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/PocketStory.kt
+++ /dev/null
@@ -1,99 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket
-
-/**
- * A Pocket story downloaded from the Internet and intended to be displayed in the application.
- */
-sealed class PocketStory {
-    /**
-     * Title of the story.
-     */
-    abstract val title: String
-
-    /**
-     * Url where the story can be full read.
-     */
-    abstract val url: String
-
-    /**
-     * A Pocket recommended story.
-     *
-     * @property title The title of the story.
-     * @property url A "pocket.co" shortlink for the original story's page.
-     * @property imageUrl A url to a still image representing the story.
-     * @property publisher Optional publisher name/domain, e.g. "The New Yorker" / "nationalgeographic.co.uk"".
-     * **May be empty**.
-     * @property category Topic of interest under which similar stories are grouped.
-     * @property timeToRead Inferred time needed to read the entire story. **May be -1**.
-     */
-    data class PocketRecommendedStory(
-        override val title: String,
-        override val url: String,
-        val imageUrl: String,
-        val publisher: String,
-        val category: String,
-        val timeToRead: Int,
-        val timesShown: Long,
-    ) : PocketStory()
-
-    /**
-     * A Pocket sponsored story.
-     *
-     * @property id Unique id of this story.
-     * @property title The title of the story.
-     * @property url 3rd party url containing the original story.
-     * @property imageUrl A url to a still image representing the story.
-     * Contains a "resize" parameter in the form of "resize=w618-h310" allowing to get the image
-     * with a specific resolution and the CENTER_CROP ScaleType.
-     * @property sponsor 3rd party sponsor of this story, e.g. "NextAdvisor".
-     * @property shim Unique identifiers for when the user interacts with this story.
-     * @property priority Priority level in deciding which stories to be shown first.
-     * A lowest number means a higher priority.
-     * @property caps Story caps indented to control the maximum number of times the story should be shown.
-     */
-    data class PocketSponsoredStory(
-        val id: Int,
-        override val title: String,
-        override val url: String,
-        val imageUrl: String,
-        val sponsor: String,
-        val shim: PocketSponsoredStoryShim,
-        val priority: Int,
-        val caps: PocketSponsoredStoryCaps,
-    ) : PocketStory()
-
-    /**
-     * Sponsored story unique identifiers intended to be used in telemetry.
-     *
-     * @property click Unique identifier for when the sponsored story is clicked.
-     * @property impression Unique identifier for when the user sees this sponsored story.
-     */
-    data class PocketSponsoredStoryShim(
-        val click: String,
-        val impression: String,
-    )
-
-    /**
-     * Sponsored story caps indented to control the maximum number of times the story should be shown.
-     *
-     * @property currentImpressions List of all recorded impression of a sponsored Pocket story
-     * expressed in seconds from Epoch (as the result of `System.currentTimeMillis / 1000`).
-     * @property lifetimeCount Lifetime maximum number of times this story should be shown.
-     * This is independent from the count based on [flightCount] and [flightPeriod] and must never be reset.
-     * @property flightCount Maximum number of times this story should be shown in [flightPeriod].
-     * @property flightPeriod Period expressed as a number of seconds in which this story should be shown
-     * for at most [flightCount] times.
-     * Any time the period comes to an end the [flightCount] count should be restarted.
-     * Even if based on [flightCount] and [flightCount] this story can still be shown a couple more times
-     * if [lifetimeCount] was met then the story should not be shown anymore.
-     */
-    data class PocketSponsoredStoryCaps(
-        val currentImpressions: List<Long> = emptyList(),
-        val lifetimeCount: Int,
-        val flightCount: Int,
-        val flightPeriod: Int,
-    )
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/ext/ConceptFetch.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/ext/ConceptFetch.kt
deleted file mode 100644
index 24e4f0871f..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/ext/ConceptFetch.kt
+++ /dev/null
@@ -1,30 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.ext
-
-import androidx.annotation.WorkerThread
-import mozilla.components.concept.fetch.Client
-import mozilla.components.concept.fetch.Request
-import mozilla.components.concept.fetch.Response
-import mozilla.components.concept.fetch.isSuccess
-import mozilla.components.service.pocket.logger
-import java.io.IOException
-
-// extension functions for :concept-fetch module.
-
-/**
- * @return returns the string contained within the response body for the given [request] or null, on error.
- */
-@WorkerThread // synchronous network call.
-internal fun Client.fetchBodyOrNull(request: Request): String? {
-    val response: Response? = try {
-        fetch(request)
-    } catch (e: IOException) {
-        logger.debug("network error", e)
-        null
-    }
-
-    return response?.use { if (response.isSuccess) response.body.string() else null }
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/ext/Mappers.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/ext/Mappers.kt
deleted file mode 100644
index 42df3c1507..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/ext/Mappers.kt
+++ /dev/null
@@ -1,99 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.ext
-
-import androidx.annotation.VisibleForTesting
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStory
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStoryCaps
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStoryShim
-import mozilla.components.service.pocket.spocs.api.ApiSpoc
-import mozilla.components.service.pocket.spocs.db.SpocEntity
-import mozilla.components.service.pocket.stories.api.PocketApiStory
-import mozilla.components.service.pocket.stories.db.PocketLocalStoryTimesShown
-import mozilla.components.service.pocket.stories.db.PocketStoryEntity
-
-@VisibleForTesting
-internal const val DEFAULT_CATEGORY = "general"
-
-@VisibleForTesting
-internal const val DEFAULT_TIMES_SHOWN = 0L
-
-/**
- * Map Pocket API objects to the object type that we persist locally.
- */
-internal fun PocketApiStory.toPocketLocalStory(): PocketStoryEntity =
-    PocketStoryEntity(
-        url,
-        title,
-        imageUrl,
-        publisher,
-        category,
-        timeToRead,
-        DEFAULT_TIMES_SHOWN,
-    )
-
-/**
- * Map Room entities to the object type that we expose to service clients.
- */
-internal fun PocketStoryEntity.toPocketRecommendedStory(): PocketRecommendedStory =
-    PocketRecommendedStory(
-        url = url,
-        title = title,
-        imageUrl = imageUrl,
-        publisher = publisher,
-        category = if (category.isNotBlank()) category else DEFAULT_CATEGORY,
-        timeToRead = timeToRead,
-        timesShown = timesShown,
-    )
-
-/**
- * Maps an object of the type exposed to clients to one that can partially update only the "timesShown"
- * property of the type we persist locally.
- */
-internal fun PocketRecommendedStory.toPartialTimeShownUpdate(): PocketLocalStoryTimesShown =
-    PocketLocalStoryTimesShown(url, timesShown)
-
-/**
- * Map sponsored Pocket stories to the object type that we persist locally.
- */
-internal fun ApiSpoc.toLocalSpoc(): SpocEntity =
-    SpocEntity(
-        id = id,
-        url = url,
-        title = title,
-        imageUrl = imageSrc,
-        sponsor = sponsor,
-        clickShim = shim.click,
-        impressionShim = shim.impression,
-        priority = priority,
-        lifetimeCapCount = caps.lifetimeCount,
-        flightCapCount = caps.flightCount,
-        flightCapPeriod = caps.flightPeriod,
-    )
-
-/**
- * Map Room entities to the object type that we expose to service clients.
- */
-internal fun SpocEntity.toPocketSponsoredStory(
-    impressions: List<Long> = emptyList(),
-) = PocketSponsoredStory(
-    id = id,
-    title = title,
-    url = url,
-    imageUrl = imageUrl,
-    sponsor = sponsor,
-    shim = PocketSponsoredStoryShim(
-        click = clickShim,
-        impression = impressionShim,
-    ),
-    priority = priority,
-    caps = PocketSponsoredStoryCaps(
-        currentImpressions = impressions,
-        lifetimeCount = lifetimeCapCount,
-        flightCount = flightCapCount,
-        flightPeriod = flightCapPeriod,
-    ),
-)
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/ext/PocketStory.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/ext/PocketStory.kt
deleted file mode 100644
index f111e84747..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/ext/PocketStory.kt
+++ /dev/null
@@ -1,50 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.ext
-
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStory
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStoryCaps
-import java.util.concurrent.TimeUnit
-
-/**
- * Get a list of all story impressions (expressed in seconds from Epoch) in the period between
- * `now` down to [PocketSponsoredStoryCaps.flightPeriod].
- */
-fun PocketSponsoredStory.getCurrentFlightImpressions(): List<Long> {
-    val now = TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis())
-    return caps.currentImpressions.filter {
-        now - it < caps.flightPeriod
-    }
-}
-
-/**
- * Get if this story was already shown for the maximum number of times available in it's lifetime.
- */
-fun PocketSponsoredStory.hasLifetimeImpressionsLimitReached(): Boolean {
-    return caps.currentImpressions.size >= caps.lifetimeCount
-}
-
-/**
- * Get if this story was already shown for the maximum number of times available in the period
- * specified by [PocketSponsoredStoryCaps.flightPeriod].
- */
-fun PocketSponsoredStory.hasFlightImpressionsLimitReached(): Boolean {
-    return getCurrentFlightImpressions().size >= caps.flightCount
-}
-
-/**
- * Record a new impression at this instant time and get this story back with updated impressions details.
- * This only updates the in-memory data.
- *
- * It's recommended to use this method anytime a new impression needs to be recorded for a `PocketSponsoredStory`
- * to ensure values consistency.
- */
-fun PocketSponsoredStory.recordNewImpression(): PocketSponsoredStory {
-    return this.copy(
-        caps = caps.copy(
-            currentImpressions = caps.currentImpressions + TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis()),
-        ),
-    )
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/SpocsRepository.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/SpocsRepository.kt
deleted file mode 100644
index 609b6ae935..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/SpocsRepository.kt
+++ /dev/null
@@ -1,69 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.spocs
-
-import android.content.Context
-import androidx.annotation.VisibleForTesting
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStory
-import mozilla.components.service.pocket.ext.toLocalSpoc
-import mozilla.components.service.pocket.ext.toPocketSponsoredStory
-import mozilla.components.service.pocket.spocs.api.ApiSpoc
-import mozilla.components.service.pocket.spocs.db.SpocImpressionEntity
-import mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase
-
-/**
- * Wrapper over our local database containing Spocs.
- * Allows for easy CRUD operations.
- */
-internal class SpocsRepository(context: Context) {
-    private val database: Lazy<PocketRecommendationsDatabase> = lazy { PocketRecommendationsDatabase.get(context) }
-
-    @VisibleForTesting
-    internal val spocsDao by lazy { database.value.spocsDao() }
-
-    /**
-     * Get the current locally persisted list of sponsored Pocket stories
-     * complete with the list of all locally persisted impressions data.
-     */
-    suspend fun getAllSpocs(): List<PocketSponsoredStory> {
-        val spocs = spocsDao.getAllSpocs()
-        val impressions = spocsDao.getSpocsImpressions().groupBy { it.spocId }
-
-        return spocs.map { spoc ->
-            spoc.toPocketSponsoredStory(
-                impressions[spoc.id]
-                    ?.map { impression -> impression.impressionDateInSeconds }
-                    ?: emptyList(),
-            )
-        }
-    }
-
-    /**
-     * Delete all currently persisted sponsored Pocket stories.
-     */
-    suspend fun deleteAllSpocs() {
-        spocsDao.deleteAllSpocs()
-    }
-
-    /**
-     * Replace the current list of locally persisted sponsored Pocket stories.
-     *
-     * @param spocs The list of sponsored Pocket stories to persist locally.
-     */
-    suspend fun addSpocs(spocs: List<ApiSpoc>) {
-        spocsDao.cleanOldAndInsertNewSpocs(spocs.map { it.toLocalSpoc() })
-    }
-
-    /**
-     * Add a new impression record for each of the spocs identified by the ids from [spocsShown].
-     * Will ignore adding new entries if the intended spocs are not persisted locally anymore.
-     * Recorded entries will automatically be cleaned when the spoc they target is deleted.
-     *
-     * @param spocsShown List of [PocketSponsoredStory.id] for which to record new impressions.
-     */
-    suspend fun recordImpressions(spocsShown: List<Int>) {
-        spocsDao.recordImpressions(spocsShown.map { SpocImpressionEntity(it) })
-    }
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/SpocsUseCases.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/SpocsUseCases.kt
deleted file mode 100644
index d0f7e8fa75..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/SpocsUseCases.kt
+++ /dev/null
@@ -1,186 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.spocs
-
-import android.content.Context
-import androidx.annotation.VisibleForTesting
-import mozilla.components.concept.fetch.Client
-import mozilla.components.service.pocket.PocketStoriesRequestConfig
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStory
-import mozilla.components.service.pocket.spocs.api.SpocsEndpoint
-import mozilla.components.service.pocket.stories.api.PocketResponse.Failure
-import mozilla.components.service.pocket.stories.api.PocketResponse.Success
-import java.util.UUID
-
-/**
- * Possible actions regarding the list of sponsored stories.
- *
- * @param appContext Android Context. Prefer sending application context to limit the possibility of even small leaks.
- * @param fetchClient the HTTP client to use for network requests.
- * @param profileId Unique profile identifier used for downloading sponsored Pocket stories.
- * @param appId Unique app identifier used for downloading sponsored Pocket stories.
- * @param sponsoredStoriesParams Configuration containing parameters used to get the spoc content.
- */
-internal class SpocsUseCases(
-    private val appContext: Context,
-    private val fetchClient: Client,
-    private val profileId: UUID,
-    private val appId: String,
-    private val sponsoredStoriesParams: PocketStoriesRequestConfig,
-) {
-    /**
-     * Download and persist an updated list of sponsored stories.
-     */
-    internal val refreshStories by lazy {
-        RefreshSponsoredStories(appContext, fetchClient, profileId, appId)
-    }
-
-    /**
-     * Get the list of available Pocket sponsored stories.
-     */
-    internal val getStories by lazy {
-        GetSponsoredStories(appContext)
-    }
-
-    internal val recordImpression by lazy {
-        RecordImpression(appContext)
-    }
-
-    /**
-     * Delete all stored user data used for downloading sponsored stories.
-     */
-    internal val deleteProfile by lazy {
-        DeleteProfile(appContext, fetchClient, profileId, appId)
-    }
-
-    /**
-     * Allows for refreshing the list of Pocket sponsored stories we have cached.
-     *
-     * @param appContext Android Context. Prefer sending application context to limit the possibility
-     * of even small leaks.
-     * @param fetchClient the HTTP client to use for network requests.
-     * @param profileId Unique profile identifier when using this feature.
-     * @param appId Unique identifier of the application using this feature.
-     * @param sponsoredStoriesParams Configuration containing parameters used to get the spoc content.
-     */
-    internal inner class RefreshSponsoredStories(
-        @get:VisibleForTesting
-        internal val appContext: Context = this@SpocsUseCases.appContext,
-        @get:VisibleForTesting
-        internal val fetchClient: Client = this@SpocsUseCases.fetchClient,
-        @get:VisibleForTesting
-        internal val profileId: UUID = this@SpocsUseCases.profileId,
-        @get:VisibleForTesting
-        internal val appId: String = this@SpocsUseCases.appId,
-        @get:VisibleForTesting
-        internal val sponsoredStoriesParams: PocketStoriesRequestConfig = this@SpocsUseCases.sponsoredStoriesParams,
-    ) {
-        /**
-         * Do a full download from Pocket -> persist locally cycle for sponsored stories.
-         */
-        suspend operator fun invoke(): Boolean {
-            val provider = getSpocsProvider(fetchClient, profileId, appId, sponsoredStoriesParams)
-            val response = provider.getSponsoredStories()
-
-            if (response is Success) {
-                getSpocsRepository(appContext).addSpocs(response.data)
-                return true
-            }
-
-            return false
-        }
-    }
-
-    /**
-     * Allows for querying the list of available Pocket sponsored stories.
-     *
-     * @param context [Context] used for various system interactions and libraries initializations.
-
-     */
-    internal inner class GetSponsoredStories(
-        @get:VisibleForTesting
-        internal val context: Context = this@SpocsUseCases.appContext,
-    ) {
-        /**
-         * Do an internet query for a list of Pocket sponsored stories.
-         */
-        suspend operator fun invoke(): List<PocketSponsoredStory> {
-            return getSpocsRepository(context).getAllSpocs()
-        }
-    }
-
-    /**
-     * Allows for atomically updating the [PocketRecommendedStory.timesShown] property of some recommended stories.
-     *
-     * @param context [Context] used for various system interactions and libraries initializations.
-     */
-    internal inner class RecordImpression(
-        @get:VisibleForTesting
-        internal val context: Context = this@SpocsUseCases.appContext,
-    ) {
-        /**
-         * Update how many times certain stories were shown to the user.
-         */
-        suspend operator fun invoke(storiesShown: List<Int>) {
-            if (storiesShown.isNotEmpty()) {
-                getSpocsRepository(context).recordImpressions(storiesShown)
-            }
-        }
-    }
-
-    /**
-     * Allows deleting all stored user data used for downloading sponsored stories.
-     *
-     * @param context [Context] used for various system interactions and libraries initializations.
-     * @param fetchClient the HTTP client to use for network requests.
-     * @param profileId Unique profile identifier previously used for downloading sponsored Pocket stories.
-     * @param appId Unique app identifier previously used for downloading sponsored Pocket stories.
-     * @param sponsoredStoriesParams Configuration containing parameters used to get the spoc content.
-     */
-    internal inner class DeleteProfile(
-        @get:VisibleForTesting
-        internal val context: Context = this@SpocsUseCases.appContext,
-        @get:VisibleForTesting
-        internal val fetchClient: Client = this@SpocsUseCases.fetchClient,
-        @get:VisibleForTesting
-        internal val profileId: UUID = this@SpocsUseCases.profileId,
-        @get:VisibleForTesting
-        internal val appId: String = this@SpocsUseCases.appId,
-        @get:VisibleForTesting
-        internal val sponsoredStoriesParams: PocketStoriesRequestConfig = this@SpocsUseCases.sponsoredStoriesParams,
-    ) {
-        /**
-         * Delete all stored user data used for downloading personalized sponsored stories.
-         */
-        suspend operator fun invoke(): Boolean {
-            val provider = getSpocsProvider(fetchClient, profileId, appId, sponsoredStoriesParams)
-            return when (provider.deleteProfile()) {
-                is Success -> {
-                    getSpocsRepository(context).deleteAllSpocs()
-                    true
-                }
-                is Failure -> {
-                    // Don't attempt to delete locally persisted stories to prevent mismatching issues
-                    // with profile deletion failing - applications still "showing it" but
-                    // with no sponsored articles to show.
-                    false
-                }
-            }
-        }
-    }
-
-    @VisibleForTesting
-    internal fun getSpocsRepository(context: Context) = SpocsRepository(context)
-
-    @VisibleForTesting
-    internal fun getSpocsProvider(
-        client: Client,
-        profileId: UUID,
-        appId: String,
-        sponsoredStoriesParams: PocketStoriesRequestConfig,
-    ) =
-        SpocsEndpoint.newInstance(client, profileId, appId, sponsoredStoriesParams)
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/api/ApiSpoc.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/api/ApiSpoc.kt
deleted file mode 100644
index 7f89df2ab7..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/api/ApiSpoc.kt
+++ /dev/null
@@ -1,60 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.spocs.api
-
-/**
- * A Pocket sponsored as downloaded from the sponsored stories endpoint.
- *
- * @property id Unique id of this story.
- * @property title the title of the story.
- * @property url 3rd party url containing the original story.
- * @property imageSrc a url to a still image representing the story.
- * Contains a "resize" parameter in the form of "resize=w618-h310" allowing to get the image
- * with a specific resolution and the CENTER_CROP ScaleType.
- * @property sponsor 3rd party sponsor of this story, e.g. "NextAdvisor".
- * @property shim Unique identifiers for when the user interacts with this story.
- * @property priority Priority level in deciding which stories to be shown first.
- * A lowest number means a higher priority.
- * @property caps Story caps indented to control the maximum number of times the story should be shown.
- */
-internal data class ApiSpoc(
-    val id: Int,
-    val title: String,
-    val url: String,
-    val imageSrc: String,
-    val sponsor: String,
-    val shim: ApiSpocShim,
-    val priority: Int,
-    val caps: ApiSpocCaps,
-)
-
-/**
- * Sponsored story unique identifiers intended to be used in telemetry.
- *
- * @property click Unique identifier for when the sponsored story is clicked.
- * @property impression Unique identifier for when the user sees this sponsored story.
- */
-internal data class ApiSpocShim(
-    val click: String,
-    val impression: String,
-)
-
-/**
- * Sponsored story caps indented to control the maximum number of times the story should be shown.
- *
- * @property lifetimeCount Lifetime maximum number of times this story should be shown.
- * This is independent from the count based on [flightCount] and [flightPeriod] and must never be reset.
- * @property flightCount Maximum number of times this story should be shown in [flightPeriod].
- * @property flightPeriod Period expressed as a number of seconds in which this story should be shown
- * for at most [flightCount] times.
- * Any time the period comes to an end the [flightCount] count should be restarted.
- * Even if based on [flightCount] and [flightCount] this story can still be shown a couple more times
- * if [lifetimeCount] was met then the story should not be shown anymore.
- */
-internal data class ApiSpocCaps(
-    val lifetimeCount: Int,
-    val flightCount: Int,
-    val flightPeriod: Int,
-)
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/api/SpocsEndpoint.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/api/SpocsEndpoint.kt
deleted file mode 100644
index a17bebd6ba..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/api/SpocsEndpoint.kt
+++ /dev/null
@@ -1,67 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.spocs.api
-
-import androidx.annotation.VisibleForTesting
-import androidx.annotation.WorkerThread
-import mozilla.components.concept.fetch.Client
-import mozilla.components.service.pocket.PocketStoriesRequestConfig
-import mozilla.components.service.pocket.spocs.api.SpocsEndpoint.Companion.newInstance
-import mozilla.components.service.pocket.stories.api.PocketEndpoint.Companion.newInstance
-import mozilla.components.service.pocket.stories.api.PocketResponse
-import java.util.UUID
-
-/**
- * Makes requests to the sponsored stories API and returns the requested data.
- *
- * @see [newInstance] to retrieve an instance.
- */
-internal class SpocsEndpoint internal constructor(
-    @get:VisibleForTesting internal val rawEndpoint: SpocsEndpointRaw,
-    private val jsonParser: SpocsJSONParser,
-) : SpocsProvider {
-
-    /**
-     * Download a new list of sponsored Pocket stories.
-     *
-     * If the API returns unexpectedly formatted results, these entries will be omitted and the rest of the items are
-     * returned.
-     *
-     * @return a [PocketResponse.Success] with the sponsored Pocket stories (list may be empty)
-     * or [PocketResponse.Failure] if the request didn't complete successfully.
-     */
-    @WorkerThread
-    override suspend fun getSponsoredStories(): PocketResponse<List<ApiSpoc>> {
-        val response = rawEndpoint.getSponsoredStories()
-        val spocs = if (response.isNullOrBlank()) null else jsonParser.jsonToSpocs(response)
-        return PocketResponse.wrap(spocs)
-    }
-
-    @WorkerThread
-    override suspend fun deleteProfile(): PocketResponse<Boolean> {
-        val response = rawEndpoint.deleteProfile()
-        return PocketResponse.wrap(response)
-    }
-
-    companion object {
-        /**
-         * Returns a new instance of [SpocsEndpoint].
-         *
-         * @param client the HTTP client to use for network requests.
-         * @param profileId Unique profile identifier which will be presented with sponsored stories.
-         * @param appId Unique identifier of the application using this feature.
-         * @param sponsoredStoriesParams Configuration containing parameters used to get the spoc content.
-         */
-        fun newInstance(
-            client: Client,
-            profileId: UUID,
-            appId: String,
-            sponsoredStoriesParams: PocketStoriesRequestConfig,
-        ): SpocsEndpoint {
-            val rawEndpoint = SpocsEndpointRaw.newInstance(client, profileId, appId, sponsoredStoriesParams)
-            return SpocsEndpoint(rawEndpoint, SpocsJSONParser)
-        }
-    }
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/api/SpocsEndpointRaw.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/api/SpocsEndpointRaw.kt
deleted file mode 100644
index 343764f562..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/api/SpocsEndpointRaw.kt
+++ /dev/null
@@ -1,175 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.spocs.api
-
-import android.net.Uri
-import androidx.annotation.VisibleForTesting
-import androidx.annotation.WorkerThread
-import mozilla.components.concept.fetch.Client
-import mozilla.components.concept.fetch.MutableHeaders
-import mozilla.components.concept.fetch.Request
-import mozilla.components.concept.fetch.Request.Body
-import mozilla.components.concept.fetch.Request.Method
-import mozilla.components.concept.fetch.Response
-import mozilla.components.concept.fetch.isSuccess
-import mozilla.components.service.pocket.BuildConfig
-import mozilla.components.service.pocket.PocketStoriesRequestConfig
-import mozilla.components.service.pocket.ext.fetchBodyOrNull
-import mozilla.components.service.pocket.logger
-import mozilla.components.service.pocket.spocs.api.SpocsEndpointRaw.Companion.newInstance
-import mozilla.components.service.pocket.stories.api.PocketEndpointRaw.Companion.newInstance
-import org.json.JSONObject
-import java.io.IOException
-import java.util.UUID
-
-private const val SPOCS_ENDPOINT_DEV_BASE_URL = "https://spocs.getpocket.dev/"
-private const val SPOCS_ENDPOINT_PROD_BASE_URL = "https://spocs.getpocket.com/"
-private const val SPOCS_ENDPOINT_DOWNLOAD_SPOCS_PATH = "spocs"
-private const val SPOCS_ENDPOINT_DELETE_PROFILE_PATH = "user"
-private const val SPOCS_PROXY_VERSION_KEY = "version"
-private const val SPOCS_PROXY_VERSION_VALUE = 2
-private const val SPOCS_PROXY_PROFILE_KEY = "pocket_id"
-private const val SPOCS_PROXY_APP_KEY = "consumer_key"
-private const val SPOCS_PROXY_SITE_KEY = "site"
-private const val SPOCS_PROXY_COUNTRY_KEY = "country"
-private const val SPOCS_PROXY_CITY_KEY = "city"
-
-/**
- * Makes requests to the Pocket endpoint and returns the raw JSON data.
- *
- * @see [SpocsEndpoint], which wraps this to make it more practical.
- * @see [newInstance] to retrieve an instance.
- */
-internal class SpocsEndpointRaw internal constructor(
-    @get:VisibleForTesting internal val client: Client,
-    @get:VisibleForTesting internal val profileId: UUID,
-    @get:VisibleForTesting internal val appId: String,
-    @get:VisibleForTesting internal val sponsoredStoriesParams: PocketStoriesRequestConfig,
-) {
-    /**
-     * Gets the current sponsored stories recommendations from the Pocket server.
-     *
-     * @return The stories recommendations as a raw JSON string or null on error.
-     */
-    @WorkerThread
-    fun getSponsoredStories(): String? {
-        val url = Uri.Builder()
-            .encodedPath(baseUrl + SPOCS_ENDPOINT_DOWNLOAD_SPOCS_PATH)
-        if (sponsoredStoriesParams.siteId.isNotBlank()) {
-            url.appendQueryParameter(SPOCS_PROXY_SITE_KEY, sponsoredStoriesParams.siteId)
-        }
-        if (sponsoredStoriesParams.country.isNotBlank()) {
-            url.appendQueryParameter(SPOCS_PROXY_COUNTRY_KEY, sponsoredStoriesParams.country)
-        }
-        if (sponsoredStoriesParams.city.isNotBlank()) {
-            url.appendQueryParameter(SPOCS_PROXY_CITY_KEY, sponsoredStoriesParams.city)
-        }
-        url.build()
-
-        val request = Request(
-            url = url.toString(),
-            method = Method.POST,
-            headers = getRequestHeaders(),
-            body = getDownloadStoriesRequestBody(),
-        )
-        return client.fetchBodyOrNull(request)
-    }
-
-    /**
-     * Request to delete all data stored on server about [profileId].
-     *
-     * @return [Boolean] indicating whether the delete operation was successful or not.
-     */
-    @WorkerThread
-    fun deleteProfile(): Boolean {
-        val url = Uri.Builder()
-            .encodedPath(baseUrl + SPOCS_ENDPOINT_DELETE_PROFILE_PATH)
-        if (sponsoredStoriesParams.siteId.isNotBlank()) {
-            url.appendQueryParameter(SPOCS_PROXY_SITE_KEY, sponsoredStoriesParams.siteId)
-        }
-        if (sponsoredStoriesParams.country.isNotBlank()) {
-            url.appendQueryParameter(SPOCS_PROXY_COUNTRY_KEY, sponsoredStoriesParams.country)
-        }
-        if (sponsoredStoriesParams.city.isNotBlank()) {
-            url.appendQueryParameter(SPOCS_PROXY_CITY_KEY, sponsoredStoriesParams.city)
-        }
-        url.build()
-
-        val request = Request(
-            url = url.toString(),
-            method = Method.DELETE,
-            headers = getRequestHeaders(),
-            body = getDeleteProfileRequestBody(),
-        )
-
-        val response: Response? = try {
-            client.fetch(request)
-        } catch (e: IOException) {
-            logger.debug("Network error", e)
-            null
-        }
-
-        return response?.isSuccess ?: false
-    }
-
-    private fun getRequestHeaders() = MutableHeaders(
-        "Content-Type" to "application/json; charset=UTF-8",
-        "Accept" to "*/*",
-    )
-
-    private fun getDownloadStoriesRequestBody(): Body {
-        val params = mapOf(
-            SPOCS_PROXY_VERSION_KEY to SPOCS_PROXY_VERSION_VALUE,
-            SPOCS_PROXY_PROFILE_KEY to profileId.toString(),
-            SPOCS_PROXY_APP_KEY to appId,
-        )
-
-        return Body(JSONObject(params).toString().byteInputStream())
-    }
-
-    private fun getDeleteProfileRequestBody(): Body {
-        val params = mapOf(
-            SPOCS_PROXY_PROFILE_KEY to profileId.toString(),
-        )
-
-        return Body(JSONObject(params).toString().byteInputStream())
-    }
-
-    companion object {
-        /**
-         * Returns a new instance of [SpocsEndpointRaw].
-         *
-         * @param client HTTP client to use for network requests.
-         * @param profileId Unique profile identifier which will be presented with sponsored stories.
-         * @param appId Unique identifier of the application using this feature.
-         * @param sponsoredStoriesParams Configuration containing parameters used to get the spoc content.
-         */
-        fun newInstance(
-            client: Client,
-            profileId: UUID,
-            appId: String,
-            sponsoredStoriesParams: PocketStoriesRequestConfig,
-        ): SpocsEndpointRaw {
-            return SpocsEndpointRaw(client, profileId, appId, sponsoredStoriesParams)
-        }
-
-        /**
-         * Convenience for checking whether the current build is a debug build and overwriting this in tests.
-         */
-        @VisibleForTesting
-        internal var isDebugBuild = BuildConfig.DEBUG
-
-        /**
-         * Get the base url for sponsored stories specific to development or production.
-         */
-        @VisibleForTesting
-        internal val baseUrl
-            get() = if (isDebugBuild) {
-                SPOCS_ENDPOINT_DEV_BASE_URL
-            } else {
-                SPOCS_ENDPOINT_PROD_BASE_URL
-            }
-    }
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/api/SpocsJSONParser.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/api/SpocsJSONParser.kt
deleted file mode 100644
index b8fe1ea4e3..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/api/SpocsJSONParser.kt
+++ /dev/null
@@ -1,91 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.spocs.api
-
-import androidx.annotation.VisibleForTesting
-import mozilla.components.service.pocket.logger
-import mozilla.components.support.ktx.android.org.json.mapNotNull
-import org.json.JSONArray
-import org.json.JSONException
-import org.json.JSONObject
-
-@VisibleForTesting
-internal const val KEY_ARRAY_SPOCS = "spocs"
-
-@VisibleForTesting
-internal const val JSON_SPOC_SHIMS_KEY = "shim"
-
-@VisibleForTesting
-internal const val JSON_SPOC_CAPS_KEY = "caps"
-
-@VisibleForTesting
-internal const val JSON_SPOC_CAPS_LIFETIME_KEY = "lifetime"
-
-@VisibleForTesting
-internal const val JSON_SPOC_CAPS_FLIGHT_KEY = "campaign"
-
-@VisibleForTesting
-internal const val JSON_SPOC_CAPS_FLIGHT_COUNT_KEY = "count"
-
-@VisibleForTesting
-internal const val JSON_SPOC_CAPS_FLIGHT_PERIOD_KEY = "period"
-private const val JSON_SPOC_ID_KEY = "id"
-private const val JSON_SPOC_TITLE_KEY = "title"
-private const val JSON_SPOC_SPONSOR_KEY = "sponsor"
-private const val JSON_SPOC_URL_KEY = "url"
-private const val JSON_SPOC_IMAGE_SRC_KEY = "image_src"
-private const val JSON_SPOC_SHIM_CLICK_KEY = "click"
-private const val JSON_SPOC_SHIM_IMPRESSION_KEY = "impression"
-private const val JSON_SPOC_PRIORITY = "priority"
-
-/**
- * Holds functions that parse the JSON returned by the Pocket API and converts them to more usable Kotlin types.
- */
-internal object SpocsJSONParser {
-    /**
-     * @return The stories, removing entries that are invalid, or null on error; the list will never be empty.
-     */
-    fun jsonToSpocs(json: String): List<ApiSpoc>? = try {
-        val rawJSON = JSONObject(json)
-        val spocsJSON = rawJSON.getJSONArray(KEY_ARRAY_SPOCS)
-        val spocs = spocsJSON.mapNotNull(JSONArray::getJSONObject) { jsonToSpoc(it) }
-
-        // We return null, rather than the empty list, because devs might forget to check an empty list.
-        spocs.ifEmpty { null }
-    } catch (e: JSONException) {
-        logger.warn("invalid JSON from the SPOCS endpoint", e)
-        null
-    }
-
-    private fun jsonToSpoc(json: JSONObject): ApiSpoc? = try {
-        ApiSpoc(
-            id = json.getInt(JSON_SPOC_ID_KEY),
-            title = json.getString(JSON_SPOC_TITLE_KEY),
-            sponsor = json.getString(JSON_SPOC_SPONSOR_KEY),
-            url = json.getString(JSON_SPOC_URL_KEY),
-            imageSrc = json.getString(JSON_SPOC_IMAGE_SRC_KEY),
-            shim = jsonToShim(json.getJSONObject(JSON_SPOC_SHIMS_KEY)),
-            priority = json.getInt(JSON_SPOC_PRIORITY),
-            caps = jsonToCaps(json.getJSONObject(JSON_SPOC_CAPS_KEY)),
-        )
-    } catch (e: JSONException) {
-        null
-    }
-
-    private fun jsonToShim(json: JSONObject) = ApiSpocShim(
-        click = json.getString(JSON_SPOC_SHIM_CLICK_KEY),
-        impression = json.getString(JSON_SPOC_SHIM_IMPRESSION_KEY),
-    )
-
-    private fun jsonToCaps(json: JSONObject): ApiSpocCaps {
-        val flightCaps = json.getJSONObject(JSON_SPOC_CAPS_FLIGHT_KEY)
-
-        return ApiSpocCaps(
-            lifetimeCount = json.getInt(JSON_SPOC_CAPS_LIFETIME_KEY),
-            flightCount = flightCaps.getInt(JSON_SPOC_CAPS_FLIGHT_COUNT_KEY),
-            flightPeriod = flightCaps.getInt(JSON_SPOC_CAPS_FLIGHT_PERIOD_KEY),
-        )
-    }
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/api/SpocsProvider.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/api/SpocsProvider.kt
deleted file mode 100644
index dcb5819cd9..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/api/SpocsProvider.kt
+++ /dev/null
@@ -1,27 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.spocs.api
-
-import mozilla.components.service.pocket.stories.api.PocketResponse
-
-/**
- * All possible operations related to SPocs - Sponsored Pocket stories.
- */
-internal interface SpocsProvider {
-    /**
-     * Download new sponsored stories.
-     *
-     * @return [PocketResponse.Success] containing a list of sponsored stories or
-     * [PocketResponse.Failure] if the request didn't complete successfully.
-     */
-    suspend fun getSponsoredStories(): PocketResponse<List<ApiSpoc>>
-
-    /**
-     * Delete all data associated with [profileId].
-     *
-     * @return [PocketResponse.Success] if the request completed successfully, [PocketResponse.Failure] otherwise.
-     */
-    suspend fun deleteProfile(): PocketResponse<Boolean>
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/db/SpocEntity.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/db/SpocEntity.kt
deleted file mode 100644
index 02c68b7845..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/db/SpocEntity.kt
+++ /dev/null
@@ -1,41 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.spocs.db
-
-import androidx.room.Entity
-import androidx.room.PrimaryKey
-import mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase
-
-/**
- * A sponsored Pocket story that is to be mapped to SQLite table.
- *
- * @property id Unique story id serving as the primary key of this entity.
- * @property url URL where the original story can be read.
- * @property title Title of the story.
- * @property imageUrl URL of the hero image for this story.
- * @property sponsor 3rd party sponsor of this story, e.g. "NextAdvisor".
- * @property clickShim Telemetry identifier for when the sponsored story is clicked.
- * @property impressionShim Telemetry identifier for when the sponsored story is seen by the user.
- * @property priority Priority level in deciding which stories to be shown first.
- * @property lifetimeCapCount Indicates how many times a sponsored story can be shown in total.
- * @property flightCapCount Indicates how many times a sponsored story can be shown within a period.
- * @property flightCapPeriod Indicates the period (number of seconds) in which at most [flightCapCount]
- * stories can be shown.
- */
-@Entity(tableName = PocketRecommendationsDatabase.TABLE_NAME_SPOCS)
-internal data class SpocEntity(
-    @PrimaryKey
-    val id: Int,
-    val url: String,
-    val title: String,
-    val imageUrl: String,
-    val sponsor: String,
-    val clickShim: String,
-    val impressionShim: String,
-    val priority: Int,
-    val lifetimeCapCount: Int,
-    val flightCapCount: Int,
-    val flightCapPeriod: Int,
-)
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/db/SpocImpressionEntity.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/db/SpocImpressionEntity.kt
deleted file mode 100644
index 25878bbf67..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/db/SpocImpressionEntity.kt
+++ /dev/null
@@ -1,45 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.spocs.db
-
-import androidx.room.Entity
-import androidx.room.ForeignKey
-import androidx.room.Index
-import androidx.room.PrimaryKey
-import mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase
-
-/**
- * One sponsored Pocket story impression.
- * Allows to easily create a relation between a particular spoc identified by it's [SpocEntity.id]
- * and any number of impressions.
- *
- * @property spocId [SpocEntity.id] that this serves as an impression of.
- * Used as a foreign key allowing to only add impressions for other persisted spocs and
- * automatically remove all impressions when the spoc they refer to is deleted.
- * @property impressionId Unique id of this entity. Primary key.
- * @property impressionDateInSeconds Epoch based timestamp expressed in seconds (from System.currentTimeMillis / 1000)
- * for when the spoc identified by [spocId] was shown to the user.
- */
-@Entity(
-    tableName = PocketRecommendationsDatabase.TABLE_NAME_SPOCS_IMPRESSIONS,
-    foreignKeys = [
-        ForeignKey(
-            entity = SpocEntity::class,
-            parentColumns = arrayOf("id"),
-            childColumns = arrayOf("spocId"),
-            onDelete = ForeignKey.CASCADE,
-        ),
-    ],
-    indices = [
-        Index(value = ["spocId"], unique = false),
-    ],
-)
-internal data class SpocImpressionEntity(
-    val spocId: Int,
-) {
-    @PrimaryKey(autoGenerate = true)
-    var impressionId: Int = 0
-    var impressionDateInSeconds: Long = System.currentTimeMillis() / 1000
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/db/SpocsDao.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/db/SpocsDao.kt
deleted file mode 100644
index fadfec87c3..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/spocs/db/SpocsDao.kt
+++ /dev/null
@@ -1,73 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.spocs.db
-
-import androidx.room.Dao
-import androidx.room.Delete
-import androidx.room.Insert
-import androidx.room.OnConflictStrategy
-import androidx.room.Query
-import androidx.room.Transaction
-import mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase
-import java.util.concurrent.TimeUnit
-
-@Dao
-internal interface SpocsDao {
-    @Transaction
-    suspend fun cleanOldAndInsertNewSpocs(spocs: List<SpocEntity>) {
-        val newSpocs = spocs.map { it.id }
-        val oldStoriesToDelete = getAllSpocs()
-            .filterNot { newSpocs.contains(it.id) }
-
-        deleteSpocs(oldStoriesToDelete)
-        insertSpocs(spocs)
-    }
-
-    @Insert(onConflict = OnConflictStrategy.REPLACE) // Maybe some details changed
-    suspend fun insertSpocs(stories: List<SpocEntity>)
-
-    @Transaction
-    suspend fun recordImpressions(stories: List<SpocImpressionEntity>) {
-        stories.forEach {
-            recordImpression(it.spocId, it.impressionDateInSeconds)
-        }
-    }
-
-    /**
-     * INSERT OR IGNORE method needed to prevent against "FOREIGN KEY constraint failed" exceptions
-     * if clients try to insert new impressions spocs not existing anymore in the database in cases where
-     * a different list of spocs were downloaded but the client operates with stale in-memory data.
-     *
-     * @param targetSpocId The `id` of the [SpocEntity] to add a new impression for.
-     * A new impression will be persisted only if a story with the indicated [targetSpocId] currently exists.
-     * @param targetImpressionDateInSeconds The timestamp expressed in seconds from Epoch for this impression.
-     * Defaults to the current time expressed in seconds as get from `System.currentTimeMillis / 1000`.
-     */
-    @Query(
-        "WITH newImpression(spocId, impressionDateInSeconds) AS (VALUES" +
-            "(:targetSpocId, :targetImpressionDateInSeconds)" +
-            ")" +
-            "INSERT INTO spocs_impressions(spocId, impressionDateInSeconds) " +
-            "SELECT impression.spocId, impression.impressionDateInSeconds " +
-            "FROM newImpression impression " +
-            "WHERE EXISTS (SELECT 1 FROM spocs spoc WHERE spoc.id = impression.spocId)",
-    )
-    suspend fun recordImpression(
-        targetSpocId: Int,
-        targetImpressionDateInSeconds: Long = TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis()),
-    )
-
-    @Query("DELETE FROM ${PocketRecommendationsDatabase.TABLE_NAME_SPOCS}")
-    suspend fun deleteAllSpocs()
-
-    @Delete
-    suspend fun deleteSpocs(stories: List<SpocEntity>)
-
-    @Query("SELECT * FROM ${PocketRecommendationsDatabase.TABLE_NAME_SPOCS}")
-    suspend fun getAllSpocs(): List<SpocEntity>
-
-    @Query("SELECT * FROM ${PocketRecommendationsDatabase.TABLE_NAME_SPOCS_IMPRESSIONS}")
-    suspend fun getSpocsImpressions(): List<SpocImpressionEntity>
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/PocketRecommendationsRepository.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/PocketRecommendationsRepository.kt
deleted file mode 100644
index 8bc6be41e1..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/PocketRecommendationsRepository.kt
+++ /dev/null
@@ -1,47 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories
-
-import android.content.Context
-import androidx.annotation.VisibleForTesting
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-import mozilla.components.service.pocket.ext.toPartialTimeShownUpdate
-import mozilla.components.service.pocket.ext.toPocketLocalStory
-import mozilla.components.service.pocket.ext.toPocketRecommendedStory
-import mozilla.components.service.pocket.stories.api.PocketApiStory
-import mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase
-
-/**
- * Wrapper over our local database.
- * Allows for easy CRUD operations.
- */
-internal class PocketRecommendationsRepository(context: Context) {
-    private val database: Lazy<PocketRecommendationsDatabase> = lazy { PocketRecommendationsDatabase.get(context) }
-
-    @VisibleForTesting
-    internal val pocketRecommendationsDao by lazy { database.value.pocketRecommendationsDao() }
-
-    /**
-     * Get the current locally persisted list of Pocket recommended articles.
-     */
-    suspend fun getPocketRecommendedStories(): List<PocketRecommendedStory> {
-        return pocketRecommendationsDao.getPocketStories().map { it.toPocketRecommendedStory() }
-    }
-
-    suspend fun updateShownPocketRecommendedStories(updatedStories: List<PocketRecommendedStory>) {
-        return pocketRecommendationsDao.updateTimesShown(
-            updatedStories.map { it.toPartialTimeShownUpdate() },
-        )
-    }
-
-    /**
-     * Replace the current list of locally persisted Pocket recommended articles.
-     *
-     * @param stories The list of Pocket recommended articles to persist locally.
-     */
-    suspend fun addAllPocketApiStories(stories: List<PocketApiStory>) {
-        pocketRecommendationsDao.cleanOldAndInsertNewPocketStories(stories.map { it.toPocketLocalStory() })
-    }
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/PocketStoriesUseCases.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/PocketStoriesUseCases.kt
deleted file mode 100644
index 5d50824524..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/PocketStoriesUseCases.kt
+++ /dev/null
@@ -1,112 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories
-
-import android.content.Context
-import androidx.annotation.VisibleForTesting
-import mozilla.components.concept.fetch.Client
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-import mozilla.components.service.pocket.stories.api.PocketEndpoint
-import mozilla.components.service.pocket.stories.api.PocketResponse
-
-/**
- * Possible actions regarding the list of recommended stories.
- *
- * @param appContext Android Context. Prefer sending application context to limit the possibility of even small leaks.
- * @param fetchClient the HTTP client to use for network requests.
- */
-internal class PocketStoriesUseCases(
-    private val appContext: Context,
-    private val fetchClient: Client,
-) {
-    /**
-     * Download and persist an updated list of recommended stories.
-     */
-    internal val refreshStories by lazy { RefreshPocketStories(appContext, fetchClient) }
-
-    /**
-     * Get the list of available Pocket sponsored stories.
-     */
-    internal val getStories by lazy { GetPocketStories(appContext) }
-
-    /**
-     * Atomically update the number of impressions for a list of Pocket recommended stories.
-     */
-    internal val updateTimesShown by lazy { UpdateStoriesTimesShown(appContext) }
-
-    /**
-     * Allows for refreshing the list of pocket stories we have cached.
-     *
-     * @param appContext Android Context. Prefer sending application context to limit the possibility
-     * of even small leaks.
-     * @param fetchClient the HTTP client to use for network requests.
-     */
-    internal inner class RefreshPocketStories(
-        @get:VisibleForTesting
-        internal val appContext: Context = this@PocketStoriesUseCases.appContext,
-        @get:VisibleForTesting
-        internal val fetchClient: Client = this@PocketStoriesUseCases.fetchClient,
-    ) {
-        /**
-         * Do a full download from Pocket -> persist locally cycle for recommended stories.
-         */
-        suspend operator fun invoke(): Boolean {
-            val pocket = getPocketEndpoint(fetchClient)
-            val response = pocket.getRecommendedStories()
-
-            if (response is PocketResponse.Success) {
-                getPocketRepository(appContext)
-                    .addAllPocketApiStories(response.data)
-                return true
-            }
-
-            return false
-        }
-    }
-
-    /**
-     * Allows for querying the list of locally available Pocket recommended stories.
-     *
-     * @param context [Context] used for various system interactions and libraries initializations.
-     */
-    internal inner class GetPocketStories(
-        @get:VisibleForTesting
-        internal val context: Context = this@PocketStoriesUseCases.appContext,
-    ) {
-        /**
-         * Returns the current locally persisted list of Pocket recommended stories.
-         */
-        suspend operator fun invoke(): List<PocketRecommendedStory> {
-            return getPocketRepository(context)
-                .getPocketRecommendedStories()
-        }
-    }
-
-    /**
-     * Allows for atomically updating the [PocketRecommendedStory.timesShown] property of some recommended stories.
-     *
-     * @param context [Context] used for various system interactions and libraries initializations.
-     */
-    internal inner class UpdateStoriesTimesShown(
-        @get:VisibleForTesting
-        internal val context: Context = this@PocketStoriesUseCases.appContext,
-    ) {
-        /**
-         * Update how many times certain stories were shown to the user.
-         */
-        suspend operator fun invoke(storiesShown: List<PocketRecommendedStory>) {
-            if (storiesShown.isNotEmpty()) {
-                getPocketRepository(context)
-                    .updateShownPocketRecommendedStories(storiesShown)
-            }
-        }
-    }
-
-    @VisibleForTesting
-    internal fun getPocketRepository(context: Context) = PocketRecommendationsRepository(context)
-
-    @VisibleForTesting
-    internal fun getPocketEndpoint(client: Client) = PocketEndpoint.newInstance(client)
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/api/PocketApiStory.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/api/PocketApiStory.kt
deleted file mode 100644
index 203dd9c35d..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/api/PocketApiStory.kt
+++ /dev/null
@@ -1,28 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories.api
-
-internal const val STRING_NOT_FOUND_DEFAULT_VALUE = ""
-internal const val INT_NOT_FOUND_DEFAULT_VALUE = -1
-
-/**
- * A Pocket recommended story as downloaded from home-recommendations endpoint
- *
- * @property title the title of the story.
- * @property url a "pocket.co" shortlink for the original story's page.
- * @property imageUrl a url to a still image representing the story.
- * @property publisher optional publisher name/domain, e.g. "The New Yorker" / "nationalgeographic.co.uk"".
- * **May be empty**.
- * @property category topic of interest under which similar stories are grouped. **May be empty**.
- * @property timeToRead inferred time needed to read the entire story. **May be -1**.
- */
-internal data class PocketApiStory(
-    val title: String,
-    val url: String,
-    val imageUrl: String,
-    val publisher: String,
-    val category: String,
-    val timeToRead: Int,
-)
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/api/PocketEndpoint.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/api/PocketEndpoint.kt
deleted file mode 100644
index d447293e52..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/api/PocketEndpoint.kt
+++ /dev/null
@@ -1,49 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories.api
-
-import androidx.annotation.VisibleForTesting
-import androidx.annotation.WorkerThread
-import mozilla.components.concept.fetch.Client
-import mozilla.components.service.pocket.stories.api.PocketEndpoint.Companion.newInstance
-
-/**
- * Makes requests to the Pocket API and returns the requested data.
- *
- * @see [newInstance] to retrieve an instance.
- */
-internal class PocketEndpoint internal constructor(
-    @get:VisibleForTesting internal val rawEndpoint: PocketEndpointRaw,
-    private val jsonParser: PocketJSONParser,
-) {
-
-    /**
-     * Gets a response, filled with the Pocket stories recommendations from the Pocket API server on success.
-     *
-     * If the API returns unexpectedly formatted results, these entries will be omitted and the rest of the items are
-     * returned.
-     *
-     * @return a [PocketResponse.Success] with the Pocket stories recommendations (the list will never be empty)
-     * or, on error, a [PocketResponse.Failure].
-     */
-    @WorkerThread
-    fun getRecommendedStories(): PocketResponse<List<PocketApiStory>> {
-        val response = rawEndpoint.getRecommendedStories()
-        val stories = response?.let { jsonParser.jsonToPocketApiStories(it) }
-        return PocketResponse.wrap(stories)
-    }
-
-    companion object {
-        /**
-         * Returns a new instance of [PocketEndpoint].
-         *
-         * @param client the HTTP client to use for network requests.
-         */
-        fun newInstance(client: Client): PocketEndpoint {
-            val rawEndpoint = PocketEndpointRaw.newInstance(client)
-            return PocketEndpoint(rawEndpoint, PocketJSONParser())
-        }
-    }
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/api/PocketEndpointRaw.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/api/PocketEndpointRaw.kt
deleted file mode 100644
index dfeb4f99db..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/api/PocketEndpointRaw.kt
+++ /dev/null
@@ -1,52 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories.api
-
-import androidx.annotation.VisibleForTesting
-import androidx.annotation.WorkerThread
-import mozilla.components.concept.fetch.Client
-import mozilla.components.concept.fetch.Request
-import mozilla.components.service.pocket.ext.fetchBodyOrNull
-import mozilla.components.service.pocket.stories.api.PocketEndpointRaw.Companion.newInstance
-
-/**
- * Makes requests to the Pocket endpoint and returns the raw JSON data.
- *
- * @see [PocketEndpoint], which wraps this to make it more practical.
- * @see [newInstance] to retrieve an instance.
- */
-internal class PocketEndpointRaw internal constructor(
-    @get:VisibleForTesting internal val client: Client,
-) {
-    /**
-     * Gets the current stories recommendations from the Pocket server.
-     *
-     * @return The stories recommendations as a raw JSON string or null on error.
-     */
-    @WorkerThread
-    fun getRecommendedStories(): String? = makeRequest()
-
-    /**
-     * @return The requested JSON as a String or null on error.
-     */
-    @WorkerThread // synchronous request.
-    private fun makeRequest(): String? {
-        val request = Request(pocketEndpointUrl)
-        return client.fetchBodyOrNull(request)
-    }
-
-    companion object {
-        private const val pocketEndpointUrl = "https://firefox-android-home-recommendations.getpocket.com/"
-
-        /**
-         * Returns a new instance of [PocketEndpointRaw].
-         *
-         * @param client the HTTP client to use for network requests.
-         */
-        fun newInstance(client: Client): PocketEndpointRaw {
-            return PocketEndpointRaw(client)
-        }
-    }
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/api/PocketJSONParser.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/api/PocketJSONParser.kt
deleted file mode 100644
index 63e3031f66..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/api/PocketJSONParser.kt
+++ /dev/null
@@ -1,67 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories.api
-
-import androidx.annotation.VisibleForTesting
-import mozilla.components.service.pocket.logger
-import mozilla.components.support.ktx.android.org.json.mapNotNull
-import mozilla.components.support.ktx.android.org.json.tryGetInt
-import mozilla.components.support.ktx.android.org.json.tryGetString
-import org.json.JSONArray
-import org.json.JSONException
-import org.json.JSONObject
-
-private const val JSON_STORY_TITLE_KEY = "title"
-private const val JSON_STORY_URL_KEY = "url"
-private const val JSON_STORY_IMAGE_URL_KEY = "imageUrl"
-private const val JSON_STORY_PUBLISHER_KEY = "publisher"
-private const val JSON_STORY_CATEGORY_KEY = "category"
-private const val JSON_STORY_TIME_TO_READ_KEY = "timeToRead"
-
-/**
- * Holds functions that parse the JSON returned by the Pocket API and converts them to more usable Kotlin types.
- */
-internal class PocketJSONParser {
-    /**
-     * @return The stories, removing entries that are invalid, or null on error; the list will never be empty.
-     */
-    fun jsonToPocketApiStories(json: String): List<PocketApiStory>? = try {
-        val rawJSON = JSONObject(json)
-        val storiesJSON = rawJSON.getJSONArray(KEY_ARRAY_ITEMS)
-        val stories = storiesJSON.mapNotNull(JSONArray::getJSONObject) { jsonToPocketApiStory(it) }
-
-        // We return null, rather than the empty list, because devs might forget to check an empty list.
-        if (stories.isNotEmpty()) stories else null
-    } catch (e: JSONException) {
-        logger.warn("invalid JSON from the Pocket endpoint", e)
-        null
-    }
-
-    private fun jsonToPocketApiStory(json: JSONObject): PocketApiStory? = try {
-        PocketApiStory(
-            // These three properties are required for any valid recommendation.
-            title = json.getString(JSON_STORY_TITLE_KEY),
-            url = json.getString(JSON_STORY_URL_KEY),
-            imageUrl = json.getString(JSON_STORY_IMAGE_URL_KEY),
-            // The following three properties are optional.
-            publisher = json.tryGetString(JSON_STORY_PUBLISHER_KEY) ?: STRING_NOT_FOUND_DEFAULT_VALUE,
-            category = json.tryGetString(JSON_STORY_CATEGORY_KEY) ?: STRING_NOT_FOUND_DEFAULT_VALUE,
-            timeToRead = json.tryGetInt(JSON_STORY_TIME_TO_READ_KEY) ?: INT_NOT_FOUND_DEFAULT_VALUE,
-        )
-    } catch (e: JSONException) {
-        null
-    }
-
-    companion object {
-        @VisibleForTesting const val KEY_ARRAY_ITEMS = "recommendations"
-
-        /**
-         * Returns a new instance of [PocketJSONParser].
-         */
-        fun newInstance(): PocketJSONParser {
-            return PocketJSONParser()
-        }
-    }
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/api/PocketResponse.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/api/PocketResponse.kt
deleted file mode 100644
index 23e8fdcf04..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/api/PocketResponse.kt
+++ /dev/null
@@ -1,42 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories.api
-
-/**
- * A response from the Pocket API: the subclasses determine the type of the result and contain usable data.
- */
-internal sealed class PocketResponse<T> {
-
-    /**
-     * A successful response from the Pocket API.
-     *
-     * @param data The data returned from the Pocket API.
-     */
-    data class Success<T> internal constructor(val data: T) : PocketResponse<T>()
-
-    /**
-     * A failure response from the Pocket API.
-     */
-    class Failure<T> internal constructor() : PocketResponse<T>()
-
-    companion object {
-
-        /**
-         * Wraps the given [target] in a [PocketResponse]: if [target] is
-         * - null, then Failure
-         * - a Collection and empty, then Failure
-         * - a String and empty, then Failure
-         * - a Boolean and false, then Failure
-         * - otherwise, Success
-         */
-        internal fun <T : Any> wrap(target: T?): PocketResponse<T> = when (target) {
-            null -> Failure()
-            is Collection<*> -> if (target.isEmpty()) Failure() else Success(target)
-            is String -> if (target.isBlank()) Failure() else Success(target)
-            is Boolean -> if (target == false) Failure() else Success(target)
-            else -> Success(target)
-        }
-    }
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/db/PocketRecommendationsDao.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/db/PocketRecommendationsDao.kt
deleted file mode 100644
index c493e04dd6..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/db/PocketRecommendationsDao.kt
+++ /dev/null
@@ -1,46 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories.db
-
-import androidx.room.Dao
-import androidx.room.Delete
-import androidx.room.Insert
-import androidx.room.OnConflictStrategy
-import androidx.room.Query
-import androidx.room.Transaction
-import androidx.room.Update
-
-@Dao
-internal interface PocketRecommendationsDao {
-    /**
-     * Add new stories to the database.
-     * Stories already existing will not be updated in any way.
-     * Already persisted stories but not present in [stories] will be removed from the database.
-     *
-     * @param stories new list of [PocketStoryEntity]s to replace the currently persisted ones.
-     */
-    @Transaction
-    suspend fun cleanOldAndInsertNewPocketStories(stories: List<PocketStoryEntity>) {
-        // If any url changed that story is obsolete and should be deleted.
-        val newStoriesUrls = stories.map { it.url to it.imageUrl }
-        val oldStoriesToDelete = getPocketStories()
-            .filterNot { newStoriesUrls.contains(it.url to it.imageUrl) }
-        delete(oldStoriesToDelete)
-
-        insertPocketStories(stories)
-    }
-
-    @Update(entity = PocketStoryEntity::class)
-    suspend fun updateTimesShown(updatedStories: List<PocketLocalStoryTimesShown>)
-
-    @Query("SELECT * FROM ${PocketRecommendationsDatabase.TABLE_NAME_STORIES}")
-    suspend fun getPocketStories(): List<PocketStoryEntity>
-
-    @Insert(onConflict = OnConflictStrategy.IGNORE)
-    suspend fun insertPocketStories(stories: List<PocketStoryEntity>)
-
-    @Delete
-    suspend fun delete(stories: List<PocketStoryEntity>)
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/db/PocketRecommendationsDatabase.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/db/PocketRecommendationsDatabase.kt
deleted file mode 100644
index 7f37091d5d..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/db/PocketRecommendationsDatabase.kt
+++ /dev/null
@@ -1,185 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories.db
-
-import android.content.Context
-import androidx.room.Database
-import androidx.room.Room
-import androidx.room.RoomDatabase
-import androidx.room.migration.Migration
-import androidx.sqlite.db.SupportSQLiteDatabase
-import mozilla.components.service.pocket.spocs.db.SpocEntity
-import mozilla.components.service.pocket.spocs.db.SpocImpressionEntity
-import mozilla.components.service.pocket.spocs.db.SpocsDao
-
-/**
- * Internal database for storing Pocket items.
- */
-@Database(
-    entities = [
-        PocketStoryEntity::class,
-        SpocEntity::class,
-        SpocImpressionEntity::class,
-    ],
-    version = 4,
-)
-internal abstract class PocketRecommendationsDatabase : RoomDatabase() {
-    abstract fun pocketRecommendationsDao(): PocketRecommendationsDao
-    abstract fun spocsDao(): SpocsDao
-
-    companion object {
-        private const val DATABASE_NAME = "pocket_recommendations"
-        const val TABLE_NAME_STORIES = "stories"
-        const val TABLE_NAME_SPOCS = "spocs"
-        const val TABLE_NAME_SPOCS_IMPRESSIONS = "spocs_impressions"
-
-        @Volatile
-        private var instance: PocketRecommendationsDatabase? = null
-
-        @Synchronized
-        fun get(context: Context): PocketRecommendationsDatabase {
-            instance?.let { return it }
-
-            return Room.databaseBuilder(
-                context,
-                PocketRecommendationsDatabase::class.java,
-                DATABASE_NAME,
-            )
-                .addMigrations(
-                    Migrations.migration_1_2,
-                    Migrations.migration_2_3,
-                    Migrations.migration_1_3,
-                    Migrations.migration_3_4,
-                )
-                .build().also {
-                    instance = it
-                }
-        }
-    }
-}
-
-internal object Migrations {
-    val migration_1_2 = object : Migration(1, 2) {
-        override fun migrate(database: SupportSQLiteDatabase) {
-            database.execSQL(
-                "CREATE TABLE IF NOT EXISTS " +
-                    "`${PocketRecommendationsDatabase.TABLE_NAME_SPOCS}` (" +
-                    "`url` TEXT NOT NULL, " +
-                    "`title` TEXT NOT NULL, " +
-                    "`imageUrl` TEXT NOT NULL, " +
-                    "`sponsor` TEXT NOT NULL, " +
-                    "`clickShim` TEXT NOT NULL, " +
-                    "`impressionShim` TEXT NOT NULL, " +
-                    "PRIMARY KEY(`url`)" +
-                    ")",
-            )
-        }
-    }
-
-    /**
-     * Migration for when adding support for pacing sponsored stories.
-     */
-    val migration_2_3 = object : Migration(2, 3) {
-        override fun migrate(database: SupportSQLiteDatabase) {
-            // There are many new columns added. Drop the old table allowing to start fresh.
-            // This migration is expected to only be needed in debug builds
-            // with the feature not being live in any Fenix release.
-            database.execSQL(
-                "DROP TABLE ${PocketRecommendationsDatabase.TABLE_NAME_SPOCS}",
-            )
-
-            database.createNewSpocsTables()
-        }
-    }
-
-    /**
-     * Migration for when adding sponsored stories along with pacing support.
-     */
-    val migration_1_3 = object : Migration(1, 3) {
-        override fun migrate(database: SupportSQLiteDatabase) {
-            database.createNewSpocsTables()
-        }
-    }
-
-    /**
-     * Migration for when adding a new index to the spoc impression entity.
-     */
-    val migration_3_4 = object : Migration(3, 4) {
-        override fun migrate(database: SupportSQLiteDatabase) {
-            // Rename the old tables to allow creating new ones
-            database.execSQL(
-                "ALTER TABLE `${PocketRecommendationsDatabase.TABLE_NAME_SPOCS}` " +
-                    "RENAME TO temp_spocs",
-            )
-            database.execSQL(
-                "ALTER TABLE `${PocketRecommendationsDatabase.TABLE_NAME_SPOCS_IMPRESSIONS}` " +
-                    "RENAME TO temp_spocs_impressions",
-            )
-
-            // Create new tables with the new schema
-            database.createNewSpocsTables()
-            database.execSQL(
-                "CREATE INDEX IF NOT EXISTS `index_spocs_impressions_spocId` " +
-                    "ON `${PocketRecommendationsDatabase.TABLE_NAME_SPOCS_IMPRESSIONS}` (`spocId`)",
-            )
-
-            // Copy the old data to the new tables
-            database.execSQL(
-                "INSERT INTO " +
-                    "'${PocketRecommendationsDatabase.TABLE_NAME_SPOCS}' (" +
-                    "id, url, title, imageUrl, sponsor, clickShim, impressionShim, " +
-                    "priority, lifetimeCapCount, flightCapCount, flightCapPeriod" +
-                    ") SELECT " +
-                    "id, url, title, imageUrl, sponsor, clickShim, impressionShim, " +
-                    "priority, lifetimeCapCount, flightCapCount, flightCapPeriod " +
-                    "FROM temp_spocs",
-            )
-            database.execSQL(
-                "INSERT INTO " +
-                    "'${PocketRecommendationsDatabase.TABLE_NAME_SPOCS_IMPRESSIONS}' (" +
-                    "spocId, impressionId, impressionDateInSeconds" +
-                    ") SELECT " +
-                    "spocId, impressionId, impressionDateInSeconds " +
-                    "FROM temp_spocs_impressions",
-            )
-
-            // Cleanup
-            database.execSQL("DROP TABLE temp_spocs")
-            database.execSQL("DROP TABLE temp_spocs_impressions")
-        }
-    }
-
-    private fun SupportSQLiteDatabase.createNewSpocsTables() {
-        execSQL(
-            "CREATE TABLE IF NOT EXISTS " +
-                "`${PocketRecommendationsDatabase.TABLE_NAME_SPOCS}` (" +
-                "`id` INTEGER NOT NULL, " +
-                "`url` TEXT NOT NULL, " +
-                "`title` TEXT NOT NULL, " +
-                "`imageUrl` TEXT NOT NULL, " +
-                "`sponsor` TEXT NOT NULL, " +
-                "`clickShim` TEXT NOT NULL, " +
-                "`impressionShim` TEXT NOT NULL, " +
-                "`priority` INTEGER NOT NULL, " +
-                "`lifetimeCapCount` INTEGER NOT NULL, " +
-                "`flightCapCount` INTEGER NOT NULL, " +
-                "`flightCapPeriod` INTEGER NOT NULL, " +
-                "PRIMARY KEY(`id`)" +
-                ")",
-        )
-
-        execSQL(
-            "CREATE TABLE IF NOT EXISTS " +
-                "`${PocketRecommendationsDatabase.TABLE_NAME_SPOCS_IMPRESSIONS}` (" +
-                "`spocId` INTEGER NOT NULL, " +
-                "`impressionId` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, " +
-                "`impressionDateInSeconds` INTEGER NOT NULL, " +
-                "FOREIGN KEY(`spocId`) " +
-                "REFERENCES `spocs`(`id`) " +
-                "ON UPDATE NO ACTION ON DELETE CASCADE " +
-                ")",
-        )
-    }
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/db/PocketStoryEntity.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/db/PocketStoryEntity.kt
deleted file mode 100644
index 885978f801..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/stories/db/PocketStoryEntity.kt
+++ /dev/null
@@ -1,31 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories.db
-
-import androidx.room.Entity
-import androidx.room.PrimaryKey
-
-/**
- * A Pocket recommended story that is to be mapped to SQLite table.
- */
-@Entity(tableName = PocketRecommendationsDatabase.TABLE_NAME_STORIES)
-internal data class PocketStoryEntity(
-    @PrimaryKey
-    val url: String,
-    val title: String,
-    val imageUrl: String,
-    val publisher: String,
-    val category: String,
-    val timeToRead: Int,
-    val timesShown: Long,
-)
-
-/**
- * A [PocketStoryEntity] only containing data about the [timesShown] property allowing for quick updates.
- */
-internal data class PocketLocalStoryTimesShown(
-    val url: String,
-    val timesShown: Long,
-)
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/update/DeleteSpocsProfileWorker.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/update/DeleteSpocsProfileWorker.kt
deleted file mode 100644
index e563cba564..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/update/DeleteSpocsProfileWorker.kt
+++ /dev/null
@@ -1,36 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.update
-
-import android.content.Context
-import androidx.work.CoroutineWorker
-import androidx.work.WorkerParameters
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.withContext
-import mozilla.components.service.pocket.GlobalDependencyProvider
-
-/**
- * WorkManager Worker used for deleting the profile used for downloading Pocket sponsored stories.
- */
-internal class DeleteSpocsProfileWorker(
-    context: Context,
-    params: WorkerParameters,
-) : CoroutineWorker(context, params) {
-
-    override suspend fun doWork(): Result {
-        return withContext(Dispatchers.IO) {
-            if (GlobalDependencyProvider.SponsoredStories.useCases?.deleteProfile?.invoke() == true) {
-                Result.success()
-            } else {
-                Result.retry()
-            }
-        }
-    }
-
-    internal companion object {
-        const val DELETE_SPOCS_PROFILE_WORK_TAG =
-            "mozilla.components.feature.pocket.spocs.profile.delete.work.tag"
-    }
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/update/PocketStoriesRefreshScheduler.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/update/PocketStoriesRefreshScheduler.kt
deleted file mode 100644
index 7cdc7b8daf..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/update/PocketStoriesRefreshScheduler.kt
+++ /dev/null
@@ -1,64 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.update
-
-import android.content.Context
-import androidx.annotation.VisibleForTesting
-import androidx.work.Constraints
-import androidx.work.ExistingPeriodicWorkPolicy
-import androidx.work.NetworkType
-import androidx.work.PeriodicWorkRequest
-import androidx.work.PeriodicWorkRequestBuilder
-import androidx.work.WorkManager
-import mozilla.components.service.pocket.PocketStoriesConfig
-import mozilla.components.service.pocket.logger
-import mozilla.components.service.pocket.update.RefreshPocketWorker.Companion.REFRESH_WORK_TAG
-import mozilla.components.support.base.worker.Frequency
-
-/**
- * Class used to schedule Pocket recommended stories refresh.
- */
-internal class PocketStoriesRefreshScheduler(
-    private val pocketStoriesConfig: PocketStoriesConfig,
-) {
-    internal fun schedulePeriodicRefreshes(context: Context) {
-        logger.info("Scheduling pocket recommendations background refresh")
-
-        val refreshWork = createPeriodicWorkerRequest(
-            frequency = pocketStoriesConfig.frequency,
-        )
-
-        getWorkManager(context)
-            .enqueueUniquePeriodicWork(REFRESH_WORK_TAG, ExistingPeriodicWorkPolicy.KEEP, refreshWork)
-    }
-
-    internal fun stopPeriodicRefreshes(context: Context) {
-        getWorkManager(context)
-            .cancelAllWorkByTag(REFRESH_WORK_TAG)
-    }
-
-    @VisibleForTesting
-    internal fun createPeriodicWorkerRequest(
-        frequency: Frequency,
-    ): PeriodicWorkRequest {
-        val constraints = getWorkerConstrains()
-
-        return PeriodicWorkRequestBuilder<RefreshPocketWorker>(
-            frequency.repeatInterval,
-            frequency.repeatIntervalTimeUnit,
-        ).apply {
-            setConstraints(constraints)
-            addTag(REFRESH_WORK_TAG)
-        }.build()
-    }
-
-    @VisibleForTesting
-    internal fun getWorkerConstrains() = Constraints.Builder()
-        .setRequiredNetworkType(NetworkType.CONNECTED)
-        .build()
-
-    @VisibleForTesting
-    internal fun getWorkManager(context: Context) = WorkManager.getInstance(context)
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/update/RefreshPocketWorker.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/update/RefreshPocketWorker.kt
deleted file mode 100644
index c5790598b9..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/update/RefreshPocketWorker.kt
+++ /dev/null
@@ -1,36 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.update
-
-import android.content.Context
-import androidx.work.CoroutineWorker
-import androidx.work.WorkerParameters
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.withContext
-import mozilla.components.service.pocket.GlobalDependencyProvider
-
-/**
- * WorkManager Worker used for downloading and persisting locally a new list of Pocket recommended stories.
- */
-internal class RefreshPocketWorker(
-    context: Context,
-    params: WorkerParameters,
-) : CoroutineWorker(context, params) {
-
-    override suspend fun doWork(): Result {
-        return withContext(Dispatchers.IO) {
-            if (GlobalDependencyProvider.RecommendedStories.useCases?.refreshStories?.invoke() == true) {
-                Result.success()
-            } else {
-                Result.retry()
-            }
-        }
-    }
-
-    internal companion object {
-        const val REFRESH_WORK_TAG =
-            "mozilla.components.feature.pocket.recommendations.refresh.work.tag"
-    }
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/update/RefreshSpocsWorker.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/update/RefreshSpocsWorker.kt
deleted file mode 100644
index def14f9c16..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/update/RefreshSpocsWorker.kt
+++ /dev/null
@@ -1,36 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.update
-
-import android.content.Context
-import androidx.work.CoroutineWorker
-import androidx.work.WorkerParameters
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.withContext
-import mozilla.components.service.pocket.GlobalDependencyProvider
-
-/**
- * WorkManager Worker used for downloading and persisting locally a new list of Pocket recommended stories.
- */
-internal class RefreshSpocsWorker(
-    context: Context,
-    params: WorkerParameters,
-) : CoroutineWorker(context, params) {
-
-    override suspend fun doWork(): Result {
-        return withContext(Dispatchers.IO) {
-            if (GlobalDependencyProvider.SponsoredStories.useCases?.refreshStories?.invoke() == true) {
-                Result.success()
-            } else {
-                Result.retry()
-            }
-        }
-    }
-
-    internal companion object {
-        const val REFRESH_SPOCS_WORK_TAG =
-            "mozilla.components.feature.pocket.spocs.refresh.work.tag"
-    }
-}
diff --git a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/update/SpocsRefreshScheduler.kt b/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/update/SpocsRefreshScheduler.kt
deleted file mode 100644
index 01ffd998a0..0000000000
--- a/android-components/components/service/pocket/src/main/java/mozilla/components/service/pocket/update/SpocsRefreshScheduler.kt
+++ /dev/null
@@ -1,94 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.update
-
-import android.content.Context
-import androidx.annotation.VisibleForTesting
-import androidx.work.Constraints
-import androidx.work.ExistingPeriodicWorkPolicy
-import androidx.work.ExistingWorkPolicy
-import androidx.work.NetworkType
-import androidx.work.OneTimeWorkRequest
-import androidx.work.OneTimeWorkRequestBuilder
-import androidx.work.PeriodicWorkRequest
-import androidx.work.PeriodicWorkRequestBuilder
-import androidx.work.WorkManager
-import mozilla.components.service.pocket.PocketStoriesConfig
-import mozilla.components.service.pocket.logger
-import mozilla.components.service.pocket.update.DeleteSpocsProfileWorker.Companion.DELETE_SPOCS_PROFILE_WORK_TAG
-import mozilla.components.service.pocket.update.RefreshSpocsWorker.Companion.REFRESH_SPOCS_WORK_TAG
-import mozilla.components.support.base.worker.Frequency
-
-/**
- * Class used to schedule Pocket recommended stories refresh.
- */
-internal class SpocsRefreshScheduler(
-    private val pocketStoriesConfig: PocketStoriesConfig,
-) {
-    internal fun schedulePeriodicRefreshes(context: Context) {
-        logger.info("Scheduling sponsored stories background refresh")
-
-        val refreshWork = createPeriodicRefreshWorkerRequest(
-            frequency = pocketStoriesConfig.sponsoredStoriesRefreshFrequency,
-        )
-
-        getWorkManager(context)
-            .enqueueUniquePeriodicWork(REFRESH_SPOCS_WORK_TAG, ExistingPeriodicWorkPolicy.KEEP, refreshWork)
-    }
-
-    internal fun stopPeriodicRefreshes(context: Context) {
-        getWorkManager(context)
-            .cancelAllWorkByTag(REFRESH_SPOCS_WORK_TAG)
-    }
-
-    internal fun scheduleProfileDeletion(context: Context) {
-        logger.info("Scheduling sponsored stories profile deletion")
-
-        val deleteProfileWork = createOneTimeProfileDeletionWorkerRequest()
-
-        getWorkManager(context)
-            .enqueueUniqueWork(DELETE_SPOCS_PROFILE_WORK_TAG, ExistingWorkPolicy.KEEP, deleteProfileWork)
-    }
-
-    internal fun stopProfileDeletion(context: Context) {
-        getWorkManager(context)
-            .cancelAllWorkByTag(DELETE_SPOCS_PROFILE_WORK_TAG)
-    }
-
-    @VisibleForTesting
-    internal fun createOneTimeProfileDeletionWorkerRequest(): OneTimeWorkRequest {
-        val constraints = getWorkerConstrains()
-
-        return OneTimeWorkRequestBuilder<DeleteSpocsProfileWorker>()
-            .apply {
-                setConstraints(constraints)
-                addTag(DELETE_SPOCS_PROFILE_WORK_TAG)
-            }
-            .build()
-    }
-
-    @VisibleForTesting
-    internal fun createPeriodicRefreshWorkerRequest(
-        frequency: Frequency,
-    ): PeriodicWorkRequest {
-        val constraints = getWorkerConstrains()
-
-        return PeriodicWorkRequestBuilder<RefreshSpocsWorker>(
-            frequency.repeatInterval,
-            frequency.repeatIntervalTimeUnit,
-        ).apply {
-            setConstraints(constraints)
-            addTag(REFRESH_SPOCS_WORK_TAG)
-        }.build()
-    }
-
-    @VisibleForTesting
-    internal fun getWorkerConstrains() = Constraints.Builder()
-        .setRequiredNetworkType(NetworkType.CONNECTED)
-        .build()
-
-    @VisibleForTesting
-    internal fun getWorkManager(context: Context) = WorkManager.getInstance(context)
-}
diff --git a/android-components/components/service/pocket/src/main/res/values/ids.xml b/android-components/components/service/pocket/src/main/res/values/ids.xml
deleted file mode 100644
index 7a05fcff1a..0000000000
--- a/android-components/components/service/pocket/src/main/res/values/ids.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- This Source Code Form is subject to the terms of the Mozilla Public
-   - License, v. 2.0. If a copy of the MPL was not distributed with this
-   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
-<resources>
-    <item name="payload_pocket_token" type="id"/>
-    <item name="payload_pocket_user_agent" type="id"/>
-    <item name="payload_pocket_items_count" type="id"/>
-    <item name="payload_pocket_items_locale" type="id"/>
-</resources>
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/GlobalDependencyProviderTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/GlobalDependencyProviderTest.kt
deleted file mode 100644
index a87f46887d..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/GlobalDependencyProviderTest.kt
+++ /dev/null
@@ -1,50 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket
-
-import mozilla.components.service.pocket.spocs.SpocsUseCases
-import mozilla.components.service.pocket.stories.PocketStoriesUseCases
-import mozilla.components.support.test.mock
-import org.junit.Assert.assertNull
-import org.junit.Assert.assertSame
-import org.junit.Test
-
-class GlobalDependencyProviderTest {
-    @Test
-    fun `GIVEN RecommendedStories WHEN initializing THEN store the provided arguments`() {
-        val useCases: PocketStoriesUseCases = mock()
-
-        GlobalDependencyProvider.RecommendedStories.initialize(useCases)
-
-        assertSame(useCases, GlobalDependencyProvider.RecommendedStories.useCases)
-    }
-
-    @Test
-    fun `GIVEN RecommendedStories WHEN resetting THEN clear all current state`() {
-        GlobalDependencyProvider.RecommendedStories.initialize(mock())
-
-        GlobalDependencyProvider.RecommendedStories.reset()
-
-        assertNull(GlobalDependencyProvider.RecommendedStories.useCases)
-    }
-
-    @Test
-    fun `GIVEN SponsoredStories WHEN initializing THEN store the provided arguments`() {
-        val useCases: SpocsUseCases = mock()
-
-        GlobalDependencyProvider.SponsoredStories.initialize(useCases)
-
-        assertSame(useCases, GlobalDependencyProvider.SponsoredStories.useCases)
-    }
-
-    @Test
-    fun `GIVEN SponsoredStories WHEN resetting THEN clear all current state`() {
-        GlobalDependencyProvider.SponsoredStories.initialize(mock())
-
-        GlobalDependencyProvider.SponsoredStories.reset()
-
-        assertNull(GlobalDependencyProvider.SponsoredStories.useCases)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/PocketStoriesConfigTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/PocketStoriesConfigTest.kt
deleted file mode 100644
index 2e8f504f4a..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/PocketStoriesConfigTest.kt
+++ /dev/null
@@ -1,62 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket
-
-import mozilla.components.service.pocket.helpers.assertClassVisibility
-import mozilla.components.support.base.worker.Frequency
-import mozilla.components.support.test.mock
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertNull
-import org.junit.Test
-import kotlin.reflect.KVisibility
-
-class PocketStoriesConfigTest {
-    @Test
-    fun `GIVEN a PocketStoriesConfig THEN its visibility is internal`() {
-        assertClassVisibility(PocketStoriesConfig::class, KVisibility.PUBLIC)
-    }
-
-    @Test
-    fun `WHEN instantiating a PocketStoriesConfig THEN frequency has a default value`() {
-        val config = PocketStoriesConfig(mock())
-
-        val defaultFrequency = Frequency(DEFAULT_REFRESH_INTERVAL, DEFAULT_REFRESH_TIMEUNIT)
-        assertEquals(defaultFrequency.repeatInterval, config.frequency.repeatInterval)
-        assertEquals(defaultFrequency.repeatIntervalTimeUnit, config.frequency.repeatIntervalTimeUnit)
-    }
-
-    @Test
-    fun `WHEN instantiating a PocketStoriesConfig THEN sponsored stories refresh frequency has a default value`() {
-        val config = PocketStoriesConfig(mock())
-
-        val defaultFrequency = Frequency(
-            DEFAULT_SPONSORED_STORIES_REFRESH_INTERVAL,
-            DEFAULT_SPONSORED_STORIES_REFRESH_TIMEUNIT,
-        )
-        assertEquals(defaultFrequency.repeatInterval, config.sponsoredStoriesRefreshFrequency.repeatInterval)
-        assertEquals(defaultFrequency.repeatIntervalTimeUnit, config.sponsoredStoriesRefreshFrequency.repeatIntervalTimeUnit)
-    }
-
-    @Test
-    fun `WHEN instantiating a PocketStoriesConfig THEN profile is by default null`() {
-        val config = PocketStoriesConfig(mock())
-
-        assertNull(config.profile)
-    }
-
-    @Test
-    fun `GIVEN a Frequency THEN its visibility is internal`() {
-        assertClassVisibility(Frequency::class, KVisibility.PUBLIC)
-    }
-
-    @Test
-    fun `WHEN instantiating a PocketStoriesConfig THEN sponsoredStoriesParams default value is used`() {
-        val config = PocketStoriesConfig(mock())
-
-        assertEquals(DEFAULT_SPONSORED_STORIES_SITE_ID, config.sponsoredStoriesParams.siteId)
-        assertEquals("", config.sponsoredStoriesParams.country)
-        assertEquals("", config.sponsoredStoriesParams.city)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/PocketStoriesServiceTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/PocketStoriesServiceTest.kt
deleted file mode 100644
index 04c7a23939..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/PocketStoriesServiceTest.kt
+++ /dev/null
@@ -1,229 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket
-
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import kotlinx.coroutines.ExperimentalCoroutinesApi
-import kotlinx.coroutines.test.runTest
-import mozilla.components.concept.fetch.Client
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStory
-import mozilla.components.service.pocket.helpers.assertConstructorsVisibility
-import mozilla.components.service.pocket.spocs.SpocsUseCases
-import mozilla.components.service.pocket.spocs.SpocsUseCases.GetSponsoredStories
-import mozilla.components.service.pocket.spocs.SpocsUseCases.RecordImpression
-import mozilla.components.service.pocket.stories.PocketStoriesUseCases
-import mozilla.components.service.pocket.stories.PocketStoriesUseCases.GetPocketStories
-import mozilla.components.service.pocket.stories.PocketStoriesUseCases.UpdateStoriesTimesShown
-import mozilla.components.support.test.any
-import mozilla.components.support.test.mock
-import mozilla.components.support.test.robolectric.testContext
-import org.junit.After
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertNotNull
-import org.junit.Assert.assertNull
-import org.junit.Assert.assertTrue
-import org.junit.Test
-import org.junit.runner.RunWith
-import org.mockito.Mockito.doReturn
-import org.mockito.Mockito.never
-import org.mockito.Mockito.verify
-import java.util.UUID
-import kotlin.reflect.KVisibility
-
-@ExperimentalCoroutinesApi // for runTest
-@RunWith(AndroidJUnit4::class)
-class PocketStoriesServiceTest {
-    private val storiesUseCases: PocketStoriesUseCases = mock()
-    private val spocsUseCases: SpocsUseCases = mock()
-    private val service = PocketStoriesService(testContext, PocketStoriesConfig(mock())).also {
-        it.storiesRefreshScheduler = mock()
-        it.spocsRefreshscheduler = mock()
-        it.storiesUseCases = storiesUseCases
-        it.spocsUseCases = spocsUseCases
-    }
-
-    @After
-    fun teardown() {
-        GlobalDependencyProvider.SponsoredStories.reset()
-        GlobalDependencyProvider.RecommendedStories.reset()
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesService THEN it should be publicly available`() {
-        assertConstructorsVisibility(PocketStoriesConfig::class, KVisibility.PUBLIC)
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesService WHEN startPeriodicStoriesRefresh THEN persist dependencies and schedule stories refresh`() {
-        service.startPeriodicStoriesRefresh()
-
-        assertNotNull(GlobalDependencyProvider.RecommendedStories.useCases)
-        verify(service.storiesRefreshScheduler).schedulePeriodicRefreshes(any())
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesService WHEN stopPeriodicStoriesRefresh THEN stop refreshing stories and clear dependencies`() {
-        service.stopPeriodicStoriesRefresh()
-
-        verify(service.storiesRefreshScheduler).stopPeriodicRefreshes(any())
-        assertNull(GlobalDependencyProvider.RecommendedStories.useCases)
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesService is initialized with a valid profile WHEN called to start periodic refreshes THEN persist dependencies, cancel profile deletion and schedule stories refresh`() {
-        val client: Client = mock()
-        val profileId = UUID.randomUUID()
-        val appId = "test"
-        val service = PocketStoriesService(
-            context = testContext,
-            pocketStoriesConfig = PocketStoriesConfig(
-                client = client,
-                profile = Profile(
-                    profileId = profileId,
-                    appId = appId,
-                ),
-            ),
-        ).apply {
-            spocsRefreshscheduler = mock()
-        }
-
-        service.startPeriodicSponsoredStoriesRefresh()
-
-        assertNotNull(GlobalDependencyProvider.SponsoredStories.useCases)
-        verify(service.spocsRefreshscheduler).stopProfileDeletion(any())
-        verify(service.spocsRefreshscheduler).schedulePeriodicRefreshes(any())
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesService is initialized with an invalid profile WHEN called to start periodic refreshes THEN don't schedule periodic refreshes and don't persist dependencies`() {
-        val service = PocketStoriesService(
-            context = testContext,
-            pocketStoriesConfig = PocketStoriesConfig(
-                client = mock(),
-                profile = null,
-            ),
-        ).apply {
-            spocsRefreshscheduler = mock()
-        }
-
-        service.startPeriodicSponsoredStoriesRefresh()
-
-        verify(service.spocsRefreshscheduler, never()).schedulePeriodicRefreshes(any())
-        assertNull(GlobalDependencyProvider.SponsoredStories.useCases)
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesService WHEN called to stop periodic refreshes THEN stop refreshing stories`() {
-        // Mock periodic refreshes were started previously and profile details were set.
-        // Now they will have to be cleaned.
-        GlobalDependencyProvider.SponsoredStories.initialize(mock())
-        service.spocsRefreshscheduler = mock()
-
-        service.stopPeriodicSponsoredStoriesRefresh()
-
-        verify(service.spocsRefreshscheduler).stopPeriodicRefreshes(any())
-    }
-
-    @Test
-    fun `WHEN called to refresh locally saved sponsored stories THEN refresh usecase is invoked`() = runTest {
-        val refreshStories: SpocsUseCases.RefreshSponsoredStories = mock()
-        doReturn(refreshStories).`when`(spocsUseCases).refreshStories
-
-        service.refreshSponsoredStories()
-
-        verify(refreshStories).invoke()
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesService WHEN getStories THEN stories useCases should return`() = runTest {
-        val stories = listOf(mock<PocketRecommendedStory>())
-        val getStoriesUseCase: GetPocketStories = mock()
-        doReturn(stories).`when`(getStoriesUseCase).invoke()
-        doReturn(getStoriesUseCase).`when`(storiesUseCases).getStories
-
-        val result = service.getStories()
-
-        assertEquals(stories, result)
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesService WHEN updateStoriesTimesShown THEN delegate to spocs useCases`() = runTest {
-        val updateTimesShownUseCase: UpdateStoriesTimesShown = mock()
-        doReturn(updateTimesShownUseCase).`when`(storiesUseCases).updateTimesShown
-        val stories = listOf(mock<PocketRecommendedStory>())
-
-        service.updateStoriesTimesShown(stories)
-
-        verify(updateTimesShownUseCase).invoke(stories)
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesService WHEN getSponsoredStories THEN delegate to spocs useCases`() = runTest {
-        val noProfileResponse = service.getSponsoredStories()
-        assertTrue(noProfileResponse.isEmpty())
-
-        val stories = listOf(mock<PocketSponsoredStory>())
-        val getStoriesUseCase: GetSponsoredStories = mock()
-        doReturn(stories).`when`(getStoriesUseCase).invoke()
-        doReturn(getStoriesUseCase).`when`(spocsUseCases).getStories
-        val existingProfileResponse = service.getSponsoredStories()
-        assertEquals(stories, existingProfileResponse)
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesService is initialized with a valid profile WHEN called to delete profile THEN persist dependencies, cancel stories refresh and schedule profile deletion`() {
-        val client: Client = mock()
-        val profileId = UUID.randomUUID()
-        val appId = "test"
-        val service = PocketStoriesService(
-            context = testContext,
-            pocketStoriesConfig = PocketStoriesConfig(
-                client = client,
-                profile = Profile(
-                    profileId = profileId,
-                    appId = appId,
-                ),
-            ),
-        ).apply {
-            spocsRefreshscheduler = mock()
-        }
-
-        service.deleteProfile()
-
-        assertNotNull(GlobalDependencyProvider.SponsoredStories.useCases)
-        verify(service.spocsRefreshscheduler).stopPeriodicRefreshes(any())
-        verify(service.spocsRefreshscheduler).scheduleProfileDeletion(any())
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesService is initialized with an invalid profile WHEN called to delete profile THEN don't schedule profile deletion and don't persist dependencies`() {
-        val service = PocketStoriesService(
-            context = testContext,
-            pocketStoriesConfig = PocketStoriesConfig(
-                client = mock(),
-                profile = null,
-            ),
-        ).apply {
-            spocsRefreshscheduler = mock()
-        }
-
-        service.deleteProfile()
-
-        verify(service.spocsRefreshscheduler, never()).scheduleProfileDeletion(any())
-        assertNull(GlobalDependencyProvider.SponsoredStories.useCases)
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesService WHEN recordStoriesImpressions THEN delegate to spocs useCases`() = runTest {
-        val recordImpressionsUseCase: RecordImpression = mock()
-        doReturn(recordImpressionsUseCase).`when`(spocsUseCases).recordImpression
-        val storiesIds = listOf(22, 33)
-
-        service.recordStoriesImpressions(storiesIds)
-
-        verify(recordImpressionsUseCase).invoke(storiesIds)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/PocketStoryTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/PocketStoryTest.kt
deleted file mode 100644
index 36a559b710..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/PocketStoryTest.kt
+++ /dev/null
@@ -1,100 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket
-
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStory
-import mozilla.components.service.pocket.helpers.assertConstructorsVisibility
-import mozilla.components.support.test.mock
-import org.junit.Assert.assertEquals
-import org.junit.Test
-import kotlin.reflect.KVisibility
-
-class PocketStoryTest {
-    @Test
-    fun `GIVEN PocketSponsoredStory THEN it should be publicly available`() {
-        assertConstructorsVisibility(PocketSponsoredStory::class, KVisibility.PUBLIC)
-    }
-
-    @Test
-    fun `GIVEN PocketSponsoredStoryCaps THEN it should be publicly available`() {
-        assertConstructorsVisibility(PocketRecommendedStory::class, KVisibility.PUBLIC)
-    }
-
-    @Test
-    fun `GIVEN PocketRecommendedStory THEN it should be publicly available`() {
-        assertConstructorsVisibility(PocketRecommendedStory::class, KVisibility.PUBLIC)
-    }
-
-    @Test
-    fun `GIVEN a PocketRecommendedStory WHEN it's title is accessed from parent THEN it returns the previously set value`() {
-        val pocketRecommendedStory = PocketRecommendedStory(
-            title = "testTitle",
-            url = "",
-            imageUrl = "",
-            publisher = "",
-            category = "",
-            timeToRead = 0,
-            timesShown = 0,
-        )
-
-        val result = (pocketRecommendedStory as PocketStory).title
-
-        assertEquals("testTitle", result)
-    }
-
-    @Test
-    fun `GIVEN a PocketRecommendedStory WHEN it's url is accessed from parent THEN it returns the previously set value`() {
-        val pocketRecommendedStory = PocketRecommendedStory(
-            title = "",
-            url = "testUrl",
-            imageUrl = "",
-            publisher = "",
-            category = "",
-            timeToRead = 0,
-            timesShown = 0,
-        )
-
-        val result = (pocketRecommendedStory as PocketStory).url
-
-        assertEquals("testUrl", result)
-    }
-
-    @Test
-    fun `GIVEN a PocketSponsoredStory WHEN it's title is accessed from parent THEN it returns the previously set value`() {
-        val pocketRecommendedStory = PocketSponsoredStory(
-            id = 1,
-            title = "testTitle",
-            url = "",
-            imageUrl = "",
-            sponsor = "",
-            shim = mock(),
-            priority = 11,
-            caps = mock(),
-        )
-
-        val result = (pocketRecommendedStory as PocketStory).title
-
-        assertEquals("testTitle", result)
-    }
-
-    @Test
-    fun `GIVEN a PocketSponsoredStory WHEN it's url is accessed from parent THEN it returns the previously set value`() {
-        val pocketRecommendedStory = PocketSponsoredStory(
-            id = 2,
-            title = "",
-            url = "testUrl",
-            imageUrl = "",
-            sponsor = "",
-            shim = mock(),
-            priority = 33,
-            caps = mock(),
-        )
-
-        val result = (pocketRecommendedStory as PocketStory).url
-
-        assertEquals("testUrl", result)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/ext/ConceptFetchKtTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/ext/ConceptFetchKtTest.kt
deleted file mode 100644
index 0e436fc2ee..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/ext/ConceptFetchKtTest.kt
+++ /dev/null
@@ -1,80 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.ext
-
-import mozilla.components.concept.fetch.Client
-import mozilla.components.concept.fetch.MutableHeaders
-import mozilla.components.concept.fetch.Request
-import mozilla.components.concept.fetch.Response
-import mozilla.components.support.test.any
-import mozilla.components.support.test.mock
-import mozilla.components.support.test.whenever
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertNull
-import org.junit.Before
-import org.junit.Test
-import org.mockito.Mockito.spy
-import org.mockito.Mockito.times
-import org.mockito.Mockito.verify
-import java.io.IOException
-
-private const val EXPECTED_DEFAULT_RESPONSE_BODY = "default response body"
-private const val TEST_URL = "https://mozilla.org"
-
-class ConceptFetchKtTest {
-
-    private lateinit var client: Client
-    private lateinit var defaultResponse: Response
-    private lateinit var failureResponse: Response
-    private lateinit var testRequest: Request
-
-    @Before
-    fun setUp() {
-        val responseBody = Response.Body(EXPECTED_DEFAULT_RESPONSE_BODY.byteInputStream())
-        val failureResponseBody = Response.Body("failure response body)".byteInputStream())
-        defaultResponse = spy(Response(TEST_URL, 200, MutableHeaders(), responseBody))
-        failureResponse = spy(Response(TEST_URL, 404, MutableHeaders(), failureResponseBody))
-        testRequest = Request(TEST_URL)
-
-        client = mock<Client>().also {
-            whenever(it.fetch(any())).thenReturn(defaultResponse)
-        }
-    }
-
-    @Test
-    fun `GIVEN fetch throws an exception WHEN fetchBodyOrNull is called THEN null is returned`() {
-        whenever(client.fetch(any())).thenThrow(IOException())
-        assertNull(client.fetchBodyOrNull(testRequest))
-    }
-
-    @Test
-    fun `GIVEN fetch returns a failure response WHEN fetchBodyOrNull is called THEN null is returned`() {
-        setUpClientFailureResponse()
-        assertNull(client.fetchBodyOrNull(testRequest))
-    }
-
-    @Test
-    fun `GIVEN fetch returns a success response WHEN fetchBodyOrNull is called THEN the response body is returned`() {
-        val actual = client.fetchBodyOrNull(testRequest)
-        assertEquals(EXPECTED_DEFAULT_RESPONSE_BODY, actual)
-    }
-
-    @Test
-    fun `GIVEN fetch returns a success response WHEN fetchBodyOrNull is called THEN the response is closed`() {
-        client.fetchBodyOrNull(testRequest)
-        verify(defaultResponse, times(1)).close()
-    }
-
-    @Test
-    fun `GIVEN fetch returns a failure response WHEN fetchBodyOrNull is called THEN the response is closed`() {
-        setUpClientFailureResponse()
-        client.fetchBodyOrNull(testRequest)
-        verify(failureResponse, times(1)).close()
-    }
-
-    private fun setUpClientFailureResponse() {
-        whenever(client.fetch(any())).thenReturn(failureResponse)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/ext/MappersKtTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/ext/MappersKtTest.kt
deleted file mode 100644
index bdf6a7bbe6..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/ext/MappersKtTest.kt
+++ /dev/null
@@ -1,114 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.ext
-
-import mozilla.components.service.pocket.helpers.PocketTestResources
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertNotEquals
-import org.junit.Assert.assertSame
-import org.junit.Assert.assertTrue
-import org.junit.Test
-import kotlin.reflect.full.memberProperties
-
-class MappersKtTest {
-    @Test
-    fun `GIVEN a PocketApiStory WHEN toPocketLocalStory is called THEN a one to one mapping is performed and timesShown is set to 0`() {
-        val apiStory = PocketTestResources.apiExpectedPocketStoriesRecommendations[0]
-
-        val result = apiStory.toPocketLocalStory()
-
-        assertNotEquals(apiStory::class.memberProperties, result::class.memberProperties)
-        assertSame(apiStory.url, result.url)
-        assertSame(apiStory.title, result.title)
-        assertSame(apiStory.imageUrl, result.imageUrl)
-        assertSame(apiStory.publisher, result.publisher)
-        assertSame(apiStory.category, result.category)
-        assertSame(apiStory.timeToRead, result.timeToRead)
-        assertEquals(DEFAULT_TIMES_SHOWN, result.timesShown)
-    }
-
-    @Test
-    fun `GIVEN a PocketLocalStory WHEN toPocketRecommendedStory is called THEN a one to one mapping is performed`() {
-        val localStory = PocketTestResources.dbExpectedPocketStory
-
-        val result = localStory.toPocketRecommendedStory()
-
-        assertNotEquals(localStory::class.memberProperties, result::class.memberProperties)
-        assertSame(localStory.url, result.url)
-        assertSame(localStory.title, result.title)
-        assertSame(localStory.imageUrl, result.imageUrl)
-        assertSame(localStory.publisher, result.publisher)
-        assertSame(localStory.category, result.category)
-        assertSame(localStory.timeToRead, result.timeToRead)
-        assertEquals(localStory.timesShown, result.timesShown)
-    }
-
-    @Test
-    fun `GIVEN a PocketLocalStory with no category WHEN toPocketRecommendedStory is called THEN a one to one mapping is performed and the category is set to general`() {
-        val localStory = PocketTestResources.dbExpectedPocketStory.copy(category = "")
-
-        val result = localStory.toPocketRecommendedStory()
-
-        assertNotEquals(localStory::class.memberProperties, result::class.memberProperties)
-        assertSame(localStory.url, result.url)
-        assertSame(localStory.title, result.title)
-        assertSame(localStory.imageUrl, result.imageUrl)
-        assertSame(localStory.publisher, result.publisher)
-        assertSame(DEFAULT_CATEGORY, result.category)
-        assertSame(localStory.timeToRead, result.timeToRead)
-        assertEquals(localStory.timesShown, result.timesShown)
-    }
-
-    @Test
-    fun `GIVEN a PcoketRecommendedStory WHEN toPartialTimeShownUpdate is called THEN only the url and timesShown properties are kept`() {
-        val story = PocketTestResources.clientExpectedPocketStory
-
-        val result = story.toPartialTimeShownUpdate()
-
-        assertNotEquals(story::class.memberProperties, result::class.memberProperties)
-        assertEquals(2, result::class.memberProperties.size)
-        assertSame(story.url, result.url)
-        assertSame(story.timesShown, result.timesShown)
-    }
-
-    @Test
-    fun `GIVEN a spoc downloaded from Internet WHEN it is converted to a local spoc THEN a one to one mapping is made`() {
-        val apiStory = PocketTestResources.apiExpectedPocketSpocs[0]
-
-        val result = apiStory.toLocalSpoc()
-
-        assertEquals(apiStory.id, result.id)
-        assertSame(apiStory.title, result.title)
-        assertSame(apiStory.url, result.url)
-        assertSame(apiStory.imageSrc, result.imageUrl)
-        assertSame(apiStory.sponsor, result.sponsor)
-        assertSame(apiStory.shim.click, result.clickShim)
-        assertSame(apiStory.shim.impression, result.impressionShim)
-        assertEquals(apiStory.priority, result.priority)
-        assertEquals(apiStory.caps.lifetimeCount, result.lifetimeCapCount)
-        assertEquals(apiStory.caps.flightCount, result.flightCapCount)
-        assertEquals(apiStory.caps.flightPeriod, result.flightCapPeriod)
-    }
-
-    @Test
-    fun `GIVEN a local spoc WHEN it is converted to be exposed to clients THEN a one to one mapping is made`() {
-        val localStory = PocketTestResources.dbExpectedPocketSpoc
-
-        val result = localStory.toPocketSponsoredStory()
-
-        assertEquals(localStory.id, result.id)
-        assertSame(localStory.title, result.title)
-        assertSame(localStory.url, result.url)
-        assertSame(localStory.imageUrl, result.imageUrl)
-        assertSame(localStory.sponsor, result.sponsor)
-        assertSame(localStory.clickShim, result.shim.click)
-        assertSame(localStory.impressionShim, result.shim.impression)
-        assertEquals(localStory.priority, result.priority)
-        assertEquals(localStory.lifetimeCapCount, result.caps.lifetimeCount)
-        assertEquals(localStory.flightCapCount, result.caps.flightCount)
-        assertEquals(localStory.flightCapPeriod, result.caps.flightPeriod)
-        assertTrue(result.caps.currentImpressions.isEmpty())
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/ext/PocketStoryKtTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/ext/PocketStoryKtTest.kt
deleted file mode 100644
index 6fea0accbf..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/ext/PocketStoryKtTest.kt
+++ /dev/null
@@ -1,135 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.ext
-
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStory
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStoryCaps
-import mozilla.components.service.pocket.helpers.PocketTestResources
-import mozilla.components.support.test.mock
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertFalse
-import org.junit.Assert.assertSame
-import org.junit.Assert.assertTrue
-import org.junit.Test
-import org.mockito.Mockito.doReturn
-
-class PocketStoryKtTest {
-    private val nowInSeconds = System.currentTimeMillis() / 1000
-    private val flightPeriod = 100
-    private val flightImpression1 = nowInSeconds - flightPeriod / 2
-    private val flightImpression2 = nowInSeconds - flightPeriod / 3
-    private val currentImpressions = listOf(
-        nowInSeconds - flightPeriod * 2, // older impression that doesn't fit the flight period
-        flightImpression1,
-        flightImpression2,
-    )
-
-    @Test
-    fun `GIVEN sponsored story impressions recorded WHEN asking for the current flight impression THEN return all impressions in flight period`() {
-        val storyCaps = PocketSponsoredStoryCaps(
-            currentImpressions = currentImpressions,
-            lifetimeCount = 10,
-            flightCount = 5,
-            flightPeriod = flightPeriod,
-        )
-        val story: PocketSponsoredStory = mock()
-        doReturn(storyCaps).`when`(story).caps
-
-        val result = story.getCurrentFlightImpressions()
-
-        assertEquals(listOf(flightImpression1, flightImpression2), result)
-    }
-
-    @Test
-    fun `GIVEN sponsored story impressions recorded WHEN asking if lifetime impressions reached THEN return false if not`() {
-        val storyCaps = PocketSponsoredStoryCaps(
-            currentImpressions = currentImpressions,
-            lifetimeCount = 10,
-            flightCount = 5,
-            flightPeriod = flightPeriod,
-        )
-        val story: PocketSponsoredStory = mock()
-        doReturn(storyCaps).`when`(story).caps
-
-        val result = story.hasLifetimeImpressionsLimitReached()
-
-        assertFalse(result)
-    }
-
-    @Test
-    fun `GIVEN sponsored story impressions recorded WHEN asking if lifetime impressions reached THEN return true if so`() {
-        val storyCaps = PocketSponsoredStoryCaps(
-            currentImpressions = currentImpressions,
-            lifetimeCount = 3,
-            flightCount = 3,
-            flightPeriod = flightPeriod,
-        )
-        val story: PocketSponsoredStory = mock()
-        doReturn(storyCaps).`when`(story).caps
-
-        val result = story.hasLifetimeImpressionsLimitReached()
-
-        assertTrue(result)
-    }
-
-    @Test
-    fun `GIVEN sponsored story impressions recorded WHEN asking if flight impressions reached THEN return false if not`() {
-        val storyCaps = PocketSponsoredStoryCaps(
-            currentImpressions = currentImpressions,
-            lifetimeCount = 10,
-            flightCount = 5,
-            flightPeriod = flightPeriod,
-        )
-        val story: PocketSponsoredStory = mock()
-        doReturn(storyCaps).`when`(story).caps
-
-        val result = story.hasFlightImpressionsLimitReached()
-
-        assertFalse(result)
-    }
-
-    @Test
-    fun `GIVEN sponsored story impressions recorded WHEN asking if flight impressions reached THEN return true if so`() {
-        val storyCaps = PocketSponsoredStoryCaps(
-            currentImpressions = currentImpressions,
-            lifetimeCount = 3,
-            flightCount = 2,
-            flightPeriod = flightPeriod,
-        )
-        val story: PocketSponsoredStory = mock()
-        doReturn(storyCaps).`when`(story).caps
-
-        val result = story.hasFlightImpressionsLimitReached()
-
-        assertTrue(result)
-    }
-
-    @Test
-    fun `GIVEN a sponsored story WHEN recording a new impression THEN update the same story to contain a new impression recorded in seconds`() {
-        val story = PocketTestResources.dbExpectedPocketSpoc.toPocketSponsoredStory(currentImpressions)
-
-        assertEquals(3, story.caps.currentImpressions.size)
-        val result = story.recordNewImpression()
-
-        assertEquals(story.id, result.id)
-        assertSame(story.title, result.title)
-        assertSame(story.url, result.url)
-        assertSame(story.imageUrl, result.imageUrl)
-        assertSame(story.sponsor, result.sponsor)
-        assertSame(story.shim, result.shim)
-        assertEquals(story.priority, result.priority)
-        assertEquals(story.caps.lifetimeCount, result.caps.lifetimeCount)
-        assertEquals(story.caps.flightCount, result.caps.flightCount)
-        assertEquals(story.caps.flightPeriod, result.caps.flightPeriod)
-
-        assertEquals(4, result.caps.currentImpressions.size)
-        assertEquals(currentImpressions, result.caps.currentImpressions.take(3))
-        // Check if a new impression has been added for around this current time.
-        assertTrue(
-            LongRange(nowInSeconds - 5, nowInSeconds + 5)
-                .contains(result.caps.currentImpressions[3]),
-        )
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/helpers/Assert.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/helpers/Assert.kt
deleted file mode 100644
index 1219dc139e..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/helpers/Assert.kt
+++ /dev/null
@@ -1,83 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.helpers
-
-import mozilla.components.concept.fetch.Client
-import mozilla.components.concept.fetch.MutableHeaders
-import mozilla.components.concept.fetch.Request
-import mozilla.components.concept.fetch.Response
-import mozilla.components.service.pocket.stories.api.PocketResponse
-import mozilla.components.support.test.any
-import mozilla.components.support.test.whenever
-import org.junit.Assert.assertEquals
-import org.mockito.Mockito.mock
-import org.mockito.Mockito.times
-import org.mockito.Mockito.verify
-import kotlin.reflect.KClass
-import kotlin.reflect.KVisibility
-
-fun <T : Any> assertConstructorsVisibility(assertedClass: KClass<T>, visibility: KVisibility) {
-    assertedClass.constructors.forEach {
-        assertEquals(visibility, it.visibility)
-    }
-}
-
-fun <T : Any> assertClassVisibility(assertedClass: KClass<T>, visibility: KVisibility) {
-    assertEquals(visibility, assertedClass.visibility)
-}
-
-/**
- * @param client the underlying mock client for the raw endpoint making the request.
- * @param makeRequest makes the request using the raw endpoint.
- * @param assertParams makes assertions on the passed in request.
- */
-fun assertRequestParams(client: Client, makeRequest: () -> Unit, assertParams: (Request) -> Unit) {
-    whenever(client.fetch(any())).thenAnswer {
-        val request = it.arguments[0] as Request
-        assertParams(request)
-        Response("https://mozilla.org", 200, MutableHeaders(), Response.Body("".byteInputStream()))
-    }
-
-    makeRequest()
-
-    // Ensure fetch is called so that the assertions in assertParams are called.
-    verify(client, times(1)).fetch(any())
-}
-
-/**
- * @param client the underlying mock client for the raw endpoint making the request.
- * @param makeRequest makes the request using the raw endpoint and returns the body text, or null on error
- */
-fun assertSuccessfulRequestReturnsResponseBody(client: Client, makeRequest: () -> String?) {
-    val expectedBody = "{\"jsonStr\": true}"
-    val body = mock(Response.Body::class.java).also {
-        whenever(it.string()).thenReturn(expectedBody)
-    }
-    val response = MockResponses.getSuccess().also {
-        whenever(it.body).thenReturn(body)
-    }
-    whenever(client.fetch(any())).thenReturn(response)
-
-    assertEquals(expectedBody, makeRequest())
-}
-
-/**
- * @param client the underlying mock client for the raw endpoint making the request.
- * @param response the response to return when the request is made.
- * @param makeRequest makes the request using the raw endpoint.
- */
-fun assertResponseIsClosed(client: Client, response: Response, makeRequest: () -> Unit) {
-    whenever(client.fetch(any())).thenReturn(response)
-    makeRequest()
-    verify(response, times(1)).close()
-}
-
-fun assertResponseIsFailure(response: Any) {
-    assertEquals(PocketResponse.Failure::class.java, response.javaClass)
-}
-
-fun assertResponseIsSuccess(response: Any) {
-    assertEquals(PocketResponse.Success::class.java, response.javaClass)
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/helpers/MockResponses.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/helpers/MockResponses.kt
deleted file mode 100644
index d0742d49f4..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/helpers/MockResponses.kt
+++ /dev/null
@@ -1,30 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.helpers
-
-import mozilla.components.concept.fetch.Response
-import mozilla.components.support.test.mock
-import mozilla.components.support.test.whenever
-import org.mockito.Mockito.mock
-
-/**
- * A collection of helper functions to generate mock [Response]s.
- */
-object MockResponses {
-
-    fun getError(): Response = getMockResponse(404)
-
-    fun getSuccess(): Response = getMockResponse(200).also {
-        // A successful response must contain a body.
-        val body = mock(Response.Body::class.java).also { body ->
-            whenever(body.string()).thenReturn("{}")
-        }
-        whenever(it.body).thenReturn(body)
-    }
-
-    private fun getMockResponse(status: Int): Response = mock<Response>().also {
-        whenever(it.status).thenReturn(status)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/helpers/PocketTestResources.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/helpers/PocketTestResources.kt
deleted file mode 100644
index 2472dbf4bc..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/helpers/PocketTestResources.kt
+++ /dev/null
@@ -1,159 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.helpers
-
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-import mozilla.components.service.pocket.spocs.api.ApiSpoc
-import mozilla.components.service.pocket.spocs.api.ApiSpocCaps
-import mozilla.components.service.pocket.spocs.api.ApiSpocShim
-import mozilla.components.service.pocket.spocs.db.SpocEntity
-import mozilla.components.service.pocket.stories.api.PocketApiStory
-import mozilla.components.service.pocket.stories.db.PocketStoryEntity
-
-private const val POCKET_DIR = "pocket"
-
-/**
- * Accessors to resources used in testing.
- */
-internal object PocketTestResources {
-    val pocketEndointFiveStoriesResponse = this::class.java.classLoader!!.getResource(
-        "$POCKET_DIR/stories_recommendations_response.json",
-    )!!.readText()
-
-    val pocketEndpointThreeSpocsResponse = this::class.java.classLoader!!.getResource(
-        "$POCKET_DIR/sponsored_stories_response.json",
-    )!!.readText()
-
-    val apiExpectedPocketStoriesRecommendations: List<PocketApiStory> = listOf(
-        PocketApiStory(
-            title = "How to Remember Anything You Really Want to Remember, Backed by Science",
-            url = "https://getpocket.com/explore/item/how-to-remember-anything-you-really-want-to-remember-backed-by-science",
-            imageUrl = "https://img-getpocket.cdn.mozilla.net/{wh}/filters:format(jpeg):quality(60):no_upscale():strip_exif()/https%3A%2F%2Fpocket-image-cache.com%2F1200x%2Ffilters%3Aformat(jpg)%3Aextract_focal()%2Fhttps%253A%252F%252Fwww.incimages.com%252Fuploaded_files%252Fimage%252F1920x1080%252Fgetty-862457080_394628.jpg",
-            publisher = "Pocket",
-            category = "general",
-            timeToRead = 3,
-        ),
-        PocketApiStory(
-            title = "‘I Don’t Want to Be Like a Family With My Co-Workers’",
-            url = "https://www.thecut.com/article/i-dont-want-to-be-like-a-family-with-my-co-workers.html",
-            imageUrl = "https://img-getpocket.cdn.mozilla.net/{wh}/filters:format(jpeg):quality(60):no_upscale():strip_exif()/https%3A%2F%2Fpyxis.nymag.com%2Fv1%2Fimgs%2Fac8%2Fd22%2F315cd0cf1e3a43edfe0e0548f2edbcb1a1-ask-a-boss.1x.rsocial.w1200.jpg",
-            publisher = "The Cut",
-            category = "general",
-            timeToRead = 5,
-        ),
-        PocketApiStory(
-            title = "How America Failed in Afghanistan",
-            url = "https://www.newyorker.com/news/q-and-a/how-america-failed-in-afghanistan",
-            imageUrl = "https://img-getpocket.cdn.mozilla.net/{wh}/filters:format(jpeg):quality(60):no_upscale():strip_exif()/https%3A%2F%2Fmedia.newyorker.com%2Fphotos%2F6119484157b611aec9c99b43%2F16%3A9%2Fw_1280%2Cc_limit%2FChotiner-Afghanistan01.jpg",
-            publisher = "The New Yorker",
-            category = "general",
-            timeToRead = 14,
-        ),
-        PocketApiStory(
-            title = "How digital beauty filters perpetuate colorism",
-            url = "https://www.technologyreview.com/2021/08/15/1031804/digital-beauty-filters-photoshop-photo-editing-colorism-racism/",
-            imageUrl = "https://img-getpocket.cdn.mozilla.net/{wh}/filters:format(jpeg):quality(60):no_upscale():strip_exif()/https%3A%2F%2Fwp.technologyreview.com%2Fwp-content%2Fuploads%2F2021%2F08%2FBeautyScoreColorism.jpg%3Fresize%3D1200%2C600",
-            publisher = "MIT Technology Review",
-            category = "general",
-            timeToRead = 11,
-        ),
-        PocketApiStory(
-            title = "How to Get Rid of Black Mold Naturally",
-            url = "https://getpocket.com/explore/item/how-to-get-rid-of-black-mold-naturally",
-            imageUrl = "https://img-getpocket.cdn.mozilla.net/{wh}/filters:format(jpeg):quality(60):no_upscale():strip_exif()/https%3A%2F%2Fpocket-image-cache.com%2F1200x%2Ffilters%3Aformat(jpg)%3Aextract_focal()%2Fhttps%253A%252F%252Fpocket-syndicated-images.s3.amazonaws.com%252Farticles%252F6757%252F1628024495_6109ae86db6cc.png",
-            publisher = "Pocket",
-            category = "general",
-            timeToRead = 4,
-        ),
-    )
-
-    val apiExpectedPocketSpocs: List<ApiSpoc> = listOf(
-        ApiSpoc(
-            id = 193815086,
-            title = "Eating Keto Has Never Been So Easy With Green Chef",
-            url = "https://i.geistm.com/l/GC_7ReasonsKetoV2_Journiest?bcid=601c567ac5b18a0414cce1d4&bhid=624f3ea9adad7604086ac6b3&utm_content=PKT_A_7ReasonsKetoV2_Journiest_40702022_RawMeatballUGC_130Off_601c567ac5b18a0414cce1d4_624f3ea9adad7604086ac6b3&tv=su4&ct=NAT-PK-PROS-130OFF5WEEK-037&utm_medium=DB&utm_source=pocket~geistm&utm_campaign=PKT_A_7ReasonsKetoV2_Journiest_40702022_RawMeatballUGC_130Off",
-            imageSrc = "https://img-getpocket.cdn.mozilla.net/direct?url=realUrl.png&resize=w618-h310",
-            sponsor = "Green Chef",
-            shim = ApiSpocShim(
-                click = "193815086ClickShim",
-                impression = "193815086ImpressionShim",
-            ),
-            priority = 3,
-            caps = ApiSpocCaps(
-                lifetimeCount = 50,
-                flightPeriod = 86400,
-                flightCount = 10,
-            ),
-        ),
-        ApiSpoc(
-            id = 177986195,
-            title = "This Leading Cash Back Card Is a Slam Dunk if You Want a One-Card Wallet",
-            url = "https://www.fool.com/the-ascent/credit-cards/landing/discover-it-cash-back-review-v2-csr/?utm_site=theascent&utm_campaign=ta-cc-co-pocket-discb-04012022-5-na-firefox&utm_medium=cpc&utm_source=pocket",
-            imageSrc = "https://img-getpocket.cdn.mozilla.net/direct?url=https%3A//s.zkcdn.net/Advertisers/359f56a5423c4926ab3aa148e448d839.webp&resize=w618-h310",
-            sponsor = "The Ascent",
-            shim = ApiSpocShim(
-                click = "177986195ClickShim",
-                impression = "177986195ImpressionShim",
-            ),
-            priority = 2,
-            caps = ApiSpocCaps(
-                lifetimeCount = 50,
-                flightPeriod = 86400,
-                flightCount = 10,
-            ),
-        ),
-        ApiSpoc(
-            id = 192560056,
-            title = "The Incredible Lawn Hack That Can Make Your Neighbors Green With Envy Over Your Lawn",
-            url = "https://go.lawnbuddy.org/zf/50/7673?campaign=SUN_Pocket2022&creative=SUN_LawnCompare4-TheIncredibleLawnHackThatCanMakeYourNeighborsGreenWithEnvyOverYourLawn-WithoutSpendingAFortuneOnNewGrassAndWithoutBreakingASweat-20220420",
-            imageSrc = "https://img-getpocket.cdn.mozilla.net/direct?url=https%3A//s.zkcdn.net/Advertisers/ce16302e184342cda0619c08b7604c9c.jpg&resize=w618-h310",
-            sponsor = "Sunday",
-            shim = ApiSpocShim(
-                click = "192560056ClickShim",
-                impression = "192560056ImpressionShim",
-            ),
-            priority = 1,
-            caps = ApiSpocCaps(
-                lifetimeCount = 50,
-                flightPeriod = 86400,
-                flightCount = 10,
-            ),
-        ),
-    )
-
-    val dbExpectedPocketStory = PocketStoryEntity(
-        title = "How to Get Rid of Black Mold Naturally",
-        url = "https://getpocket.com/explore/item/how-to-get-rid-of-black-mold-naturally",
-        imageUrl = "https://img-getpocket.cdn.mozilla.net/{wh}/filters:format(jpeg):quality(60):no_upscale():strip_exif()/https%3A%2F%2Fpocket-image-cache.com%2F1200x%2Ffilters%3Aformat(jpg)%3Aextract_focal()%2Fhttps%253A%252F%252Fpocket-syndicated-images.s3.amazonaws.com%252Farticles%252F6757%252F1628024495_6109ae86db6cc.png",
-        publisher = "Pocket",
-        category = "general",
-        timeToRead = 4,
-        timesShown = 23,
-    )
-
-    val clientExpectedPocketStory = PocketRecommendedStory(
-        title = "How digital beauty filters perpetuate colorism",
-        url = "https://www.technologyreview.com/2021/08/15/1031804/digital-beauty-filters-photoshop-photo-editing-colorism-racism/",
-        imageUrl = "https://img-getpocket.cdn.mozilla.net/{wh}/filters:format(jpeg):quality(60):no_upscale():strip_exif()/https%3A%2F%2Fwp.technologyreview.com%2Fwp-content%2Fuploads%2F2021%2F08%2FBeautyScoreColorism.jpg%3Fresize%3D1200%2C600",
-        publisher = "MIT Technology Review",
-        category = "general",
-        timeToRead = 11,
-        timesShown = 3,
-    )
-
-    val dbExpectedPocketSpoc = SpocEntity(
-        id = 193815086,
-        url = "https://i.geistm.com/l/GC_7ReasonsKetoV2_Journiest?bcid=601c567ac5b18a0414cce1d4&bhid=624f3ea9adad7604086ac6b3&utm_content=PKT_A_7ReasonsKetoV2_Journiest_40702022_RawMeatballUGC_130Off_601c567ac5b18a0414cce1d4_624f3ea9adad7604086ac6b3&tv=su4&ct=NAT-PK-PROS-130OFF5WEEK-037&utm_medium=DB&utm_source=pocket~geistm&utm_campaign=PKT_A_7ReasonsKetoV2_Journiest_40702022_RawMeatballUGC_130Off",
-        title = "Eating Keto Has Never Been So Easy With Green Chef",
-        imageUrl = "https://img-getpocket.cdn.mozilla.net/direct?url=realUrl.png&resize=w618-h310",
-        sponsor = "Green Chef",
-        clickShim = "193815086ClickShim",
-        impressionShim = "193815086ImpressionShim",
-        priority = 3,
-        lifetimeCapCount = 50,
-        flightCapCount = 10,
-        flightCapPeriod = 86400,
-    )
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/SpocsRepositoryTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/SpocsRepositoryTest.kt
deleted file mode 100644
index 8e3dda6f02..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/SpocsRepositoryTest.kt
+++ /dev/null
@@ -1,93 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.spocs
-
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import kotlinx.coroutines.ExperimentalCoroutinesApi
-import kotlinx.coroutines.test.runTest
-import mozilla.components.service.pocket.ext.toLocalSpoc
-import mozilla.components.service.pocket.helpers.PocketTestResources
-import mozilla.components.service.pocket.spocs.db.SpocImpressionEntity
-import mozilla.components.service.pocket.spocs.db.SpocsDao
-import mozilla.components.support.test.argumentCaptor
-import mozilla.components.support.test.robolectric.testContext
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertSame
-import org.junit.Before
-import org.junit.Test
-import org.junit.runner.RunWith
-import org.mockito.Mockito.doReturn
-import org.mockito.Mockito.mock
-import org.mockito.Mockito.spy
-import org.mockito.Mockito.verify
-
-@ExperimentalCoroutinesApi // for runTest
-@RunWith(AndroidJUnit4::class)
-class SpocsRepositoryTest {
-    private val spocsRepo = spy(SpocsRepository(testContext))
-    private val dao = mock(SpocsDao::class.java)
-
-    @Before
-    fun setUp() {
-        doReturn(dao).`when`(spocsRepo).spocsDao
-    }
-
-    @Test
-    fun `GIVEN SpocsRepository WHEN asking for all spocs THEN return db entities mapped to domain type`() = runTest {
-        val spoc = PocketTestResources.dbExpectedPocketSpoc
-        val impressions = listOf(
-            SpocImpressionEntity(spoc.id),
-            SpocImpressionEntity(333),
-            SpocImpressionEntity(spoc.id),
-        )
-        doReturn(listOf(spoc)).`when`(dao).getAllSpocs()
-        doReturn(impressions).`when`(dao).getSpocsImpressions()
-
-        val result = spocsRepo.getAllSpocs()
-
-        verify(dao).getAllSpocs()
-        assertEquals(1, result.size)
-        assertSame(spoc.title, result[0].title)
-        assertSame(spoc.url, result[0].url)
-        assertSame(spoc.imageUrl, result[0].imageUrl)
-        assertSame(spoc.impressionShim, result[0].shim.impression)
-        assertSame(spoc.clickShim, result[0].shim.click)
-        assertEquals(spoc.priority, result[0].priority)
-        assertEquals(2, result[0].caps.currentImpressions.size)
-        assertEquals(spoc.lifetimeCapCount, result[0].caps.lifetimeCount)
-        assertEquals(spoc.flightCapCount, result[0].caps.flightCount)
-        assertEquals(spoc.flightCapPeriod, result[0].caps.flightPeriod)
-    }
-
-    @Test
-    fun `GIVEN SpocsRepository WHEN asking to delete all spocs THEN delete all from the database`() = runTest {
-        spocsRepo.deleteAllSpocs()
-
-        verify(dao).deleteAllSpocs()
-    }
-
-    @Test
-    fun `GIVEN SpocsRepository WHEN adding a new list of spocs THEN replace all present in the database`() = runTest {
-        val spoc = PocketTestResources.apiExpectedPocketSpocs[0]
-
-        spocsRepo.addSpocs(listOf(spoc))
-
-        verify(dao).cleanOldAndInsertNewSpocs(listOf(spoc.toLocalSpoc()))
-    }
-
-    @Test
-    fun `GIVEN SpocsRepository WHEN recording new spocs impressions THEN add this to the database`() = runTest {
-        val spocsIds = listOf(3, 33, 444)
-        val impressionsCaptor = argumentCaptor<List<SpocImpressionEntity>>()
-
-        spocsRepo.recordImpressions(spocsIds)
-
-        verify(dao).recordImpressions(impressionsCaptor.capture())
-        assertEquals(spocsIds.size, impressionsCaptor.value.size)
-        assertEquals(spocsIds[0], impressionsCaptor.value[0].spocId)
-        assertEquals(spocsIds[1], impressionsCaptor.value[1].spocId)
-        assertEquals(spocsIds[2], impressionsCaptor.value[2].spocId)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/SpocsUseCasesTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/SpocsUseCasesTest.kt
deleted file mode 100644
index 1ce56903cc..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/SpocsUseCasesTest.kt
+++ /dev/null
@@ -1,314 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.spocs
-
-import android.content.Context
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import kotlinx.coroutines.ExperimentalCoroutinesApi
-import kotlinx.coroutines.test.runTest
-import mozilla.components.concept.fetch.Client
-import mozilla.components.service.pocket.PocketStoriesRequestConfig
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-import mozilla.components.service.pocket.helpers.PocketTestResources
-import mozilla.components.service.pocket.helpers.assertClassVisibility
-import mozilla.components.service.pocket.spocs.SpocsUseCases.RefreshSponsoredStories
-import mozilla.components.service.pocket.spocs.api.SpocsEndpoint
-import mozilla.components.service.pocket.stories.api.PocketResponse
-import mozilla.components.service.pocket.stories.api.PocketResponse.Failure
-import mozilla.components.service.pocket.stories.api.PocketResponse.Success
-import mozilla.components.support.test.any
-import mozilla.components.support.test.argumentCaptor
-import mozilla.components.support.test.mock
-import mozilla.components.support.test.robolectric.testContext
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertFalse
-import org.junit.Assert.assertSame
-import org.junit.Assert.assertTrue
-import org.junit.Before
-import org.junit.Test
-import org.junit.runner.RunWith
-import org.mockito.Mockito.doReturn
-import org.mockito.Mockito.never
-import org.mockito.Mockito.spy
-import org.mockito.Mockito.verify
-import java.util.UUID
-import kotlin.reflect.KVisibility
-
-@OptIn(ExperimentalCoroutinesApi::class) // for runTest
-@RunWith(AndroidJUnit4::class)
-class SpocsUseCasesTest {
-    private val fetchClient: Client = mock()
-    private val profileId = UUID.randomUUID()
-    private val appId = "test"
-    private val sponsoredStoriesParams = PocketStoriesRequestConfig("123", "US", "NY")
-    private val useCases = spy(SpocsUseCases(testContext, fetchClient, profileId, appId, sponsoredStoriesParams))
-    private val spocsProvider: SpocsEndpoint = mock()
-    private val spocsRepo: SpocsRepository = mock()
-
-    @Before
-    fun setup() {
-        doReturn(spocsProvider).`when`(useCases).getSpocsProvider(any(), any(), any(), any())
-        doReturn(spocsRepo).`when`(useCases).getSpocsRepository(any())
-    }
-
-    @Test
-    fun `GIVEN a SpocsUseCases THEN its visibility is internal`() {
-        assertClassVisibility(SpocsUseCases::class, KVisibility.INTERNAL)
-    }
-
-    @Test
-    fun `GIVEN a RefreshSponsoredStories THEN its visibility is internal`() {
-        assertClassVisibility(RefreshSponsoredStories::class, KVisibility.INTERNAL)
-    }
-
-    @Test
-    fun `GIVEN a GetSponsoredStories THEN its visibility is internal`() {
-        assertClassVisibility(SpocsUseCases.GetSponsoredStories::class, KVisibility.INTERNAL)
-    }
-
-    @Test
-    fun `GIVEN a DeleteProfile THEN its visibility is internal`() {
-        assertClassVisibility(SpocsUseCases.DeleteProfile::class, KVisibility.INTERNAL)
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases WHEN RefreshSponsoredStories is constructed THEN use the same parameters`() {
-        val refreshUseCase = useCases.refreshStories
-
-        assertSame(testContext, refreshUseCase.appContext)
-        assertSame(fetchClient, refreshUseCase.fetchClient)
-        assertSame(profileId, refreshUseCase.profileId)
-        assertSame(appId, refreshUseCase.appId)
-        assertSame(sponsoredStoriesParams, refreshUseCase.sponsoredStoriesParams)
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases constructed WHEN RefreshSponsoredStories is constructed separately THEN default to use the same parameters`() {
-        val refreshUseCase = useCases.RefreshSponsoredStories()
-
-        assertSame(testContext, refreshUseCase.appContext)
-        assertSame(fetchClient, refreshUseCase.fetchClient)
-        assertSame(profileId, refreshUseCase.profileId)
-        assertSame(appId, refreshUseCase.appId)
-        assertSame(sponsoredStoriesParams, refreshUseCase.sponsoredStoriesParams)
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases constructed WHEN RefreshSponsoredStories is constructed separately THEN allow using different parameters`() {
-        val context2: Context = mock()
-        val fetchClient2: Client = mock()
-        val profileId2 = UUID.randomUUID()
-        val appId2 = "test"
-        val sponsoredStoriesParams2 = PocketStoriesRequestConfig("1", "CA", "OW")
-
-        val refreshUseCase = useCases.RefreshSponsoredStories(context2, fetchClient2, profileId2, appId2, sponsoredStoriesParams2)
-
-        assertSame(context2, refreshUseCase.appContext)
-        assertSame(fetchClient2, refreshUseCase.fetchClient)
-        assertSame(profileId2, refreshUseCase.profileId)
-        assertSame(appId2, refreshUseCase.appId)
-        assertSame(sponsoredStoriesParams2, refreshUseCase.sponsoredStoriesParams)
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases WHEN RefreshSponsoredStories is called THEN download stories from API and return early if unsuccessful response`() = runTest {
-        val refreshUseCase = useCases.RefreshSponsoredStories()
-        val unsuccessfulResponse = getFailedSponsoredStories()
-        doReturn(unsuccessfulResponse).`when`(spocsProvider).getSponsoredStories()
-
-        val result = refreshUseCase.invoke()
-
-        assertFalse(result)
-        verify(spocsProvider).getSponsoredStories()
-        verify(spocsRepo, never()).addSpocs(any())
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases WHEN RefreshSponsoredStories is called THEN download stories from API and save a successful response locally`() = runTest {
-        val refreshUseCase = useCases.RefreshSponsoredStories()
-        val successfulResponse = getSuccessfulSponsoredStories()
-        doReturn(successfulResponse).`when`(spocsProvider).getSponsoredStories()
-
-        val result = refreshUseCase.invoke()
-
-        assertTrue(result)
-        verify(spocsProvider).getSponsoredStories()
-        verify(spocsRepo).addSpocs((successfulResponse as Success).data)
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases WHEN GetSponsoredStories is constructed THEN use the same parameters`() {
-        val sponsoredStoriesUseCase = useCases.getStories
-
-        assertSame(testContext, sponsoredStoriesUseCase.context)
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases constructed WHEN GetSponsoredStories is constructed separately THEN default to use the same parameters`() {
-        val sponsoredStoriesUseCase = useCases.GetSponsoredStories()
-
-        assertSame(testContext, sponsoredStoriesUseCase.context)
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases constructed WHEN GetSponsoredStories is constructed separately THEN allow using different parameters`() {
-        val context2: Context = mock()
-
-        val sponsoredStoriesUseCase = useCases.GetSponsoredStories(context2)
-
-        assertSame(context2, sponsoredStoriesUseCase.context)
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases WHEN GetSponsoredStories is called THEN return the stories from repository`() = runTest {
-        val sponsoredStoriesUseCase = useCases.GetSponsoredStories()
-        val stories = listOf(PocketTestResources.clientExpectedPocketStory)
-        doReturn(stories).`when`(spocsRepo).getAllSpocs()
-
-        val result = sponsoredStoriesUseCase.invoke()
-
-        verify(spocsRepo).getAllSpocs()
-        assertEquals(result, stories)
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases WHEN GetSponsoredStories is called THEN return return an empty list if none are available in the repository`() = runTest {
-        val sponsoredStoriesUseCase = useCases.GetSponsoredStories()
-        doReturn(emptyList<PocketRecommendedStory>()).`when`(spocsRepo).getAllSpocs()
-
-        val result = sponsoredStoriesUseCase.invoke()
-
-        verify(spocsRepo).getAllSpocs()
-        assertTrue(result.isEmpty())
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases WHEN RecordImpression is constructed THEN use the same parameters`() {
-        val recordImpressionsUseCase = useCases.getStories
-
-        assertSame(testContext, recordImpressionsUseCase.context)
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases constructed WHEN RecordImpression is constructed separately THEN default to use the same parameters`() {
-        val recordImpressionsUseCase = useCases.RecordImpression()
-
-        assertSame(testContext, recordImpressionsUseCase.context)
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases constructed WHEN RecordImpression is constructed separately THEN allow using different parameters`() {
-        val context2: Context = mock()
-
-        val recordImpressionsUseCase = useCases.RecordImpression(context2)
-
-        assertSame(context2, recordImpressionsUseCase.context)
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases WHEN RecordImpression is called THEN record impressions in database`() = runTest {
-        val recordImpressionsUseCase = useCases.RecordImpression()
-        val storiesIds = listOf(5, 55, 4321)
-        val spocsIdsCaptor = argumentCaptor<List<Int>>()
-
-        recordImpressionsUseCase(storiesIds)
-
-        verify(spocsRepo).recordImpressions(spocsIdsCaptor.capture())
-        assertEquals(3, spocsIdsCaptor.value.size)
-        assertEquals(storiesIds[0], spocsIdsCaptor.value[0])
-        assertEquals(storiesIds[1], spocsIdsCaptor.value[1])
-        assertEquals(storiesIds[2], spocsIdsCaptor.value[2])
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases WHEN DeleteProfile is constructed THEN use the same parameters`() {
-        val deleteProfileUseCase = useCases.deleteProfile
-
-        assertSame(testContext, deleteProfileUseCase.context)
-        assertSame(fetchClient, deleteProfileUseCase.fetchClient)
-        assertSame(profileId, deleteProfileUseCase.profileId)
-        assertSame(appId, deleteProfileUseCase.appId)
-        assertSame(sponsoredStoriesParams, deleteProfileUseCase.sponsoredStoriesParams)
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases constructed WHEN DeleteProfile is constructed separately THEN default to use the same parameters`() {
-        val deleteProfileUseCase = useCases.DeleteProfile()
-
-        assertSame(testContext, deleteProfileUseCase.context)
-        assertSame(fetchClient, deleteProfileUseCase.fetchClient)
-        assertSame(profileId, deleteProfileUseCase.profileId)
-        assertSame(appId, deleteProfileUseCase.appId)
-        assertSame(sponsoredStoriesParams, deleteProfileUseCase.sponsoredStoriesParams)
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases constructed WHEN DeleteProfile is constructed separately THEN allow using different parameters`() {
-        val context2: Context = mock()
-        val fetchClient2: Client = mock()
-        val profileId2 = UUID.randomUUID()
-        val appId2 = "test"
-        val sponsoredStoriesParams2 = PocketStoriesRequestConfig("1", "CA", "OW")
-
-        val deleteProfileUseCase = useCases.DeleteProfile(context2, fetchClient2, profileId2, appId2, sponsoredStoriesParams2)
-
-        assertSame(context2, deleteProfileUseCase.context)
-        assertSame(fetchClient2, deleteProfileUseCase.fetchClient)
-        assertSame(profileId2, deleteProfileUseCase.profileId)
-        assertSame(appId2, deleteProfileUseCase.appId)
-        assertSame(sponsoredStoriesParams2, deleteProfileUseCase.sponsoredStoriesParams)
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases WHEN DeleteProfile is called THEN return true if profile deletion was successful`() = runTest {
-        val deleteProfileUseCase = useCases.DeleteProfile()
-        val successfulResponse = Success(true)
-        doReturn(successfulResponse).`when`(spocsProvider).deleteProfile()
-
-        val result = deleteProfileUseCase.invoke()
-
-        verify(spocsProvider).deleteProfile()
-        assertTrue(result)
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases WHEN DeleteProfile is called THEN return false if profile deletion was not successful`() = runTest {
-        val deleteProfileUseCase = useCases.DeleteProfile()
-        val unsuccessfulResponse = Failure<Any>()
-        doReturn(unsuccessfulResponse).`when`(spocsProvider).deleteProfile()
-
-        val result = deleteProfileUseCase.invoke()
-
-        verify(spocsProvider).deleteProfile()
-        assertFalse(result)
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases WHEN profile deletion is succesfull THEN delete all locally persisted spocs`() = runTest {
-        val deleteProfileUseCase = useCases.DeleteProfile()
-        val successfulResponse = Success(true)
-        doReturn(successfulResponse).`when`(spocsProvider).deleteProfile()
-
-        deleteProfileUseCase.invoke()
-
-        verify(spocsRepo).deleteAllSpocs()
-    }
-
-    @Test
-    fun `GIVEN SpocsUseCases WHEN profile deletion is not succesfull THEN keep all locally persisted spocs`() = runTest {
-        val deleteProfileUseCase = useCases.DeleteProfile()
-        val unsuccessfulResponse = Failure<Any>()
-        doReturn(unsuccessfulResponse).`when`(spocsProvider).deleteProfile()
-
-        deleteProfileUseCase.invoke()
-
-        verify(spocsRepo, never()).deleteAllSpocs()
-    }
-
-    private fun getSuccessfulSponsoredStories() =
-        PocketResponse.wrap(PocketTestResources.apiExpectedPocketSpocs)
-
-    private fun getFailedSponsoredStories() = PocketResponse.wrap(null)
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/api/SpocsEndpointRawTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/api/SpocsEndpointRawTest.kt
deleted file mode 100644
index c2af1d7cb4..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/api/SpocsEndpointRawTest.kt
+++ /dev/null
@@ -1,327 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.spocs.api
-
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import mozilla.components.concept.fetch.Client
-import mozilla.components.concept.fetch.Request
-import mozilla.components.concept.fetch.Response
-import mozilla.components.service.pocket.PocketStoriesRequestConfig
-import mozilla.components.service.pocket.helpers.MockResponses
-import mozilla.components.service.pocket.helpers.assertClassVisibility
-import mozilla.components.service.pocket.helpers.assertRequestParams
-import mozilla.components.service.pocket.helpers.assertResponseIsClosed
-import mozilla.components.service.pocket.helpers.assertSuccessfulRequestReturnsResponseBody
-import mozilla.components.service.pocket.stories.api.PocketEndpointRaw
-import mozilla.components.service.pocket.stories.api.PocketEndpointRaw.Companion
-import mozilla.components.support.test.any
-import mozilla.components.support.test.mock
-import mozilla.components.support.test.whenever
-import org.json.JSONObject
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertFalse
-import org.junit.Assert.assertNull
-import org.junit.Assert.assertSame
-import org.junit.Assert.assertTrue
-import org.junit.Before
-import org.junit.Test
-import org.junit.runner.RunWith
-import org.mockito.Mockito.doReturn
-import org.mockito.Mockito.doThrow
-import java.io.IOException
-import java.util.UUID
-import kotlin.reflect.KVisibility
-
-@RunWith(AndroidJUnit4::class)
-class SpocsEndpointRawTest {
-    private val profileId = UUID.randomUUID()
-    private val appId = "test"
-    private val sponsoredStoriesParams: PocketStoriesRequestConfig = mock()
-
-    private lateinit var endpoint: SpocsEndpointRaw
-    private lateinit var client: Client
-
-    private lateinit var errorResponse: Response
-    private lateinit var successResponse: Response
-    private lateinit var defaultResponse: Response
-
-    @Before
-    fun setUp() {
-        errorResponse = MockResponses.getError()
-        successResponse = MockResponses.getSuccess()
-        defaultResponse = errorResponse
-
-        client = mock<Client>().also {
-            doReturn(defaultResponse).`when`(it).fetch(any())
-        }
-
-        whenever(sponsoredStoriesParams.siteId).thenReturn("")
-        whenever(sponsoredStoriesParams.country).thenReturn("")
-        whenever(sponsoredStoriesParams.city).thenReturn("")
-
-        endpoint = SpocsEndpointRaw(client, profileId, appId, sponsoredStoriesParams)
-    }
-
-    @Test
-    fun `GIVEN a PocketEndpointRaw THEN its visibility is internal`() {
-        assertClassVisibility(PocketEndpointRaw::class, KVisibility.INTERNAL)
-    }
-
-    @Test
-    fun `GIVEN a debug build WHEN requesting spocs THEN the appropriate pocket proxy url is used`() {
-        SpocsEndpointRaw.isDebugBuild = true
-        val expectedUrl = "https://spocs.getpocket.dev/spocs"
-
-        assertRequestParams(
-            client,
-            makeRequest = {
-                endpoint.getSponsoredStories()
-            },
-            assertParams = { request ->
-                assertEquals(expectedUrl, request.url)
-                assertEquals(Request.Method.POST, request.method)
-
-                val requestBody = JSONObject(
-                    request.body!!.useStream {
-                        it.bufferedReader().readText()
-                    },
-                )
-                assertEquals(2, requestBody["version"])
-                assertEquals(appId, requestBody["consumer_key"])
-                assertEquals(profileId.toString(), requestBody["pocket_id"])
-
-                request.headers!!.first {
-                    it.name.equals("Content-Type", true)
-                }.value.contains("application/json", true)
-            },
-        )
-    }
-
-    @Test
-    fun `GIVEN a debug build AND a request configuration WHEN requesting spocs THEN the appropriate pocket proxy url is used`() {
-        SpocsEndpointRaw.isDebugBuild = true
-        val expectedUrl = "https://spocs.getpocket.dev/spocs?site=123&country=US&city=NY"
-        whenever(sponsoredStoriesParams.siteId).thenReturn("123")
-        whenever(sponsoredStoriesParams.country).thenReturn("US")
-        whenever(sponsoredStoriesParams.city).thenReturn("NY")
-
-        assertRequestParams(
-            client,
-            makeRequest = {
-                endpoint.getSponsoredStories()
-            },
-            assertParams = { request ->
-                assertEquals(expectedUrl, request.url)
-                assertEquals(Request.Method.POST, request.method)
-
-                val requestBody = JSONObject(
-                    request.body!!.useStream {
-                        it.bufferedReader().readText()
-                    },
-                )
-                assertEquals(2, requestBody["version"])
-                assertEquals(appId, requestBody["consumer_key"])
-                assertEquals(profileId.toString(), requestBody["pocket_id"])
-
-                request.headers!!.first {
-                    it.name.equals("Content-Type", true)
-                }.value.contains("application/json", true)
-            },
-        )
-    }
-
-    @Test
-    fun `GIVEN a release build WHEN requesting spocs THEN the appropriate pocket proxy url is used`() {
-        SpocsEndpointRaw.isDebugBuild = false
-        val expectedUrl = "https://spocs.getpocket.com/spocs"
-
-        assertRequestParams(
-            client,
-            makeRequest = {
-                endpoint.getSponsoredStories()
-            },
-            assertParams = { request ->
-                assertEquals(expectedUrl, request.url)
-                assertEquals(Request.Method.POST, request.method)
-
-                val requestBody = JSONObject(
-                    request.body!!.useStream {
-                        it.bufferedReader().readText()
-                    },
-                )
-                assertEquals(2, requestBody["version"])
-                assertEquals(appId, requestBody["consumer_key"])
-                assertEquals(profileId.toString(), requestBody["pocket_id"])
-
-                request.headers!!.first {
-                    it.name.equals("Content-Type", true)
-                }.value.contains("application/json", true)
-            },
-        )
-    }
-
-    @Test
-    fun `GIVEN a release build AND a request configuration WHEN requesting spocs THEN the appropriate pocket proxy url is used`() {
-        SpocsEndpointRaw.isDebugBuild = false
-        val expectedUrl = "https://spocs.getpocket.com/spocs?site=123&country=US&city=NY"
-        whenever(sponsoredStoriesParams.siteId).thenReturn("123")
-        whenever(sponsoredStoriesParams.country).thenReturn("US")
-        whenever(sponsoredStoriesParams.city).thenReturn("NY")
-
-        assertRequestParams(
-            client,
-            makeRequest = {
-                endpoint.getSponsoredStories()
-            },
-            assertParams = { request ->
-                assertEquals(expectedUrl, request.url)
-                assertEquals(Request.Method.POST, request.method)
-
-                val requestBody = JSONObject(
-                    request.body!!.useStream {
-                        it.bufferedReader().readText()
-                    },
-                )
-                assertEquals(2, requestBody["version"])
-                assertEquals(appId, requestBody["consumer_key"])
-                assertEquals(profileId.toString(), requestBody["pocket_id"])
-
-                request.headers!!.first {
-                    it.name.equals("Content-Type", true)
-                }.value.contains("application/json", true)
-            },
-        )
-    }
-
-    @Test
-    fun `WHEN requesting spocs and the client throws an IOException THEN null is returned`() {
-        doThrow(IOException::class.java).`when`(client).fetch(any())
-
-        assertNull(endpoint.getSponsoredStories())
-    }
-
-    @Test
-    fun `WHEN requesting spocs and the response is null THEN null is returned`() {
-        doReturn(null).`when`(client).fetch(any())
-
-        assertNull(endpoint.getSponsoredStories())
-    }
-
-    @Test
-    fun `WHEN requesting spocs and the response is not a success THEN null is returned`() {
-        doReturn(errorResponse).`when`(client).fetch(any())
-
-        assertNull(endpoint.getSponsoredStories())
-    }
-
-    @Test
-    fun `GIVEN a debug build WHEN requesting profile deletion THEN the appropriate pocket proxy url is used`() {
-        SpocsEndpointRaw.isDebugBuild = true
-        val expectedUrl = "https://spocs.getpocket.dev/user"
-
-        assertRequestParams(
-            client,
-            makeRequest = {
-                endpoint.deleteProfile()
-            },
-            assertParams = { request ->
-                assertEquals(expectedUrl, request.url)
-                assertEquals(Request.Method.DELETE, request.method)
-            },
-        )
-    }
-
-    @Test
-    fun `GIVEN a release build WHEN requesting profile deletion THEN the appropriate pocket proxy url is used`() {
-        SpocsEndpointRaw.isDebugBuild = false
-        val expectedUrl = "https://spocs.getpocket.com/user"
-
-        assertRequestParams(
-            client,
-            makeRequest = {
-                endpoint.deleteProfile()
-            },
-            assertParams = { request ->
-                assertEquals(expectedUrl, request.url)
-                assertEquals(Request.Method.DELETE, request.method)
-            },
-        )
-    }
-
-    @Test
-    fun `WHEN requesting profile deletion and the client throws an IOException THEN false is returned`() {
-        doThrow(IOException::class.java).`when`(client).fetch(any())
-
-        assertFalse(endpoint.deleteProfile())
-    }
-
-    @Test
-    fun `WHEN requesting account deletion and the response is not a success THEN false is returned`() {
-        doReturn(errorResponse).`when`(client).fetch(any())
-
-        assertFalse(endpoint.deleteProfile())
-    }
-
-    @Test
-    fun `WHEN requesting spocs and the response is a success THEN the response body is returned`() {
-        assertSuccessfulRequestReturnsResponseBody(client, endpoint::getSponsoredStories)
-    }
-
-    @Test
-    fun `WHEN requesting profile deletion and the response is a success THEN true is returned`() {
-        val response = MockResponses.getSuccess()
-        doReturn(response).`when`(client).fetch(any())
-
-        assertTrue(endpoint.deleteProfile())
-    }
-
-    @Test
-    fun `WHEN requesting spocs and the response is an error THEN response is closed`() {
-        assertResponseIsClosed(client, errorResponse) {
-            endpoint.getSponsoredStories()
-        }
-    }
-
-    @Test
-    fun `GIVEN a response from the request to delete profile WHEN inferring it's success THEN don't use the reponse body`() {
-        // Leverage the fact that a stream can only be read once to know if it was previously read.
-
-        doReturn(errorResponse).`when`(client).fetch(any())
-        errorResponse.use { "Only the response status should be used, not the response body" }
-
-        doReturn(successResponse).`when`(client).fetch(any())
-        successResponse.use { "Only the response status should be used, not the response body" }
-    }
-
-    @Test
-    fun `WHEN requesting spocs and the response is a success THEN response is closed`() {
-        assertResponseIsClosed(client, successResponse) {
-            endpoint.getSponsoredStories()
-        }
-    }
-
-    @Test
-    fun `WHEN newInstance is called THEN a new instance configured with the client provided is returned`() {
-        val result = Companion.newInstance(client)
-
-        assertSame(client, result.client)
-    }
-
-    @Test
-    fun `GIVEN a debug build WHEN querying the base url THEN use the development endpoint`() {
-        SpocsEndpointRaw.isDebugBuild = true
-        val expectedUrl = "https://spocs.getpocket.dev/"
-
-        assertEquals(expectedUrl, SpocsEndpointRaw.baseUrl)
-    }
-
-    @Test
-    fun `GIVEN a release build WHEN querying the base url THEN use the production endpoint`() {
-        SpocsEndpointRaw.isDebugBuild = false
-        val expectedUrl = "https://spocs.getpocket.com/"
-
-        assertEquals(expectedUrl, SpocsEndpointRaw.baseUrl)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/api/SpocsEndpointTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/api/SpocsEndpointTest.kt
deleted file mode 100644
index 3d3e7188c4..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/api/SpocsEndpointTest.kt
+++ /dev/null
@@ -1,161 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.spocs.api
-
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import kotlinx.coroutines.ExperimentalCoroutinesApi
-import kotlinx.coroutines.test.runTest
-import mozilla.components.concept.fetch.Client
-import mozilla.components.service.pocket.PocketStoriesRequestConfig
-import mozilla.components.service.pocket.helpers.PocketTestResources
-import mozilla.components.service.pocket.helpers.assertClassVisibility
-import mozilla.components.service.pocket.helpers.assertResponseIsFailure
-import mozilla.components.service.pocket.helpers.assertResponseIsSuccess
-import mozilla.components.service.pocket.stories.api.PocketResponse
-import mozilla.components.support.test.any
-import mozilla.components.support.test.mock
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertSame
-import org.junit.Assert.assertTrue
-import org.junit.Before
-import org.junit.Test
-import org.junit.runner.RunWith
-import org.mockito.Mockito.doReturn
-import org.mockito.Mockito.doThrow
-import org.mockito.Mockito.times
-import org.mockito.Mockito.verify
-import java.util.UUID
-import kotlin.reflect.KVisibility
-
-@OptIn(ExperimentalCoroutinesApi::class) // for runTest
-@RunWith(AndroidJUnit4::class)
-class SpocsEndpointTest {
-
-    private lateinit var endpoint: SpocsEndpoint
-    private var raw: SpocsEndpointRaw = mock() // we shorten the name to avoid confusion with endpoint.
-    private var jsonParser: SpocsJSONParser = mock()
-    private var client: Client = mock()
-
-    @Before
-    fun setUp() {
-        endpoint = SpocsEndpoint(raw, jsonParser)
-    }
-
-    @Test
-    fun `GIVEN a SpocsEndpoint THEN its visibility is internal`() {
-        assertClassVisibility(SpocsEndpoint::class, KVisibility.INTERNAL)
-    }
-
-    @Test
-    fun `GIVEN a request for spocs WHEN getting a null response THEN a failure is returned`() = runTest {
-        doReturn(null).`when`(raw).getSponsoredStories()
-
-        assertResponseIsFailure(endpoint.getSponsoredStories())
-    }
-
-    @Test
-    fun `GIVEN a request for spocs WHEN getting a null response THEN we do not attempt to parse stories`() = runTest {
-        doReturn(null).`when`(raw).getSponsoredStories()
-
-        doThrow(
-            AssertionError("JSONParser should not be called for a null endpoint response"),
-        ).`when`(jsonParser).jsonToSpocs(any())
-
-        endpoint.getSponsoredStories()
-    }
-
-    @Test
-    fun `GIVEN a request for deleting profile WHEN the response is unsuccessful THEN a failure is returned`() = runTest {
-        doReturn(false).`when`(raw).deleteProfile()
-
-        assertResponseIsFailure(endpoint.deleteProfile())
-    }
-
-    @Test
-    fun `GIVEN a request for deleting profile WHEN the response is successful THEN success is returned`() = runTest {
-        doReturn(true).`when`(raw).deleteProfile()
-
-        assertResponseIsSuccess(endpoint.deleteProfile())
-    }
-
-    @Test
-    fun `GIVEN a request for spocs WHEN getting an empty response THEN a failure is returned`() = runTest {
-        arrayOf(
-            "",
-            " ",
-        ).forEach { response ->
-            doReturn(response).`when`(raw).getSponsoredStories()
-
-            assertResponseIsFailure(endpoint.getSponsoredStories())
-        }
-    }
-
-    @Test
-    fun `GIVEN a request for spocs WHEN getting an empty response THEN we do not attempt to parse stories`() = runTest {
-        arrayOf(
-            "",
-            " ",
-        ).forEach { response ->
-            doReturn(response).`when`(raw).getSponsoredStories()
-            doThrow(
-                AssertionError("JSONParser should not be called for an empty endpoint response"),
-            ).`when`(jsonParser).jsonToSpocs(any())
-
-            endpoint.getSponsoredStories()
-        }
-    }
-
-    @Test
-    fun `GIVEN a request for stories WHEN getting a response THEN parse it through PocketJSONParser`() = runTest {
-        arrayOf(
-            "{}",
-            """{"expectedJSON": 101}""",
-            """{ "spocs": [] }""",
-        ).forEach { response ->
-            doReturn(response).`when`(raw).getSponsoredStories()
-
-            endpoint.getSponsoredStories()
-
-            verify(jsonParser, times(1)).jsonToSpocs(response)
-        }
-    }
-
-    @Test
-    fun `GIVEN a request for stories WHEN getting a valid response THEN success is returned`() = runTest {
-        endpoint = SpocsEndpoint(raw, SpocsJSONParser)
-        val response = PocketTestResources.pocketEndpointThreeSpocsResponse
-        doReturn(response).`when`(raw).getSponsoredStories()
-
-        val result = endpoint.getSponsoredStories()
-
-        assertTrue(result is PocketResponse.Success)
-    }
-
-    @Test
-    fun `GIVEN a request for stories WHEN getting a valid response THEN a success response with parsed stories is returned`() = runTest {
-        endpoint = SpocsEndpoint(raw, SpocsJSONParser)
-        val response = PocketTestResources.pocketEndpointThreeSpocsResponse
-        doReturn(response).`when`(raw).getSponsoredStories()
-        val expected = PocketTestResources.apiExpectedPocketSpocs
-
-        val result = endpoint.getSponsoredStories()
-
-        assertEquals(expected, (result as? PocketResponse.Success)?.data)
-    }
-
-    @Test
-    fun `WHEN newInstance is called THEN a new SpocsEndpoint is returned as a wrapper over a configured SpocsEndpointRaw`() {
-        val profileId = UUID.randomUUID()
-        val appId = "test"
-        val sponsoredStoriesParams = PocketStoriesRequestConfig("123")
-
-        val result = SpocsEndpoint.Companion.newInstance(client, profileId, appId, sponsoredStoriesParams)
-
-        assertSame(client, result.rawEndpoint.client)
-        assertSame(profileId, result.rawEndpoint.profileId)
-        assertSame(appId, result.rawEndpoint.appId)
-        assertSame(sponsoredStoriesParams, result.rawEndpoint.sponsoredStoriesParams)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/api/SpocsJSONParserTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/api/SpocsJSONParserTest.kt
deleted file mode 100644
index a49d9bd96e..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/api/SpocsJSONParserTest.kt
+++ /dev/null
@@ -1,200 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.spocs.api
-
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import mozilla.components.service.pocket.helpers.PocketTestResources
-import mozilla.components.service.pocket.helpers.assertClassVisibility
-import org.json.JSONObject
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertNotNull
-import org.junit.Assert.assertNull
-import org.junit.Test
-import org.junit.runner.RunWith
-import kotlin.reflect.KVisibility
-
-@RunWith(AndroidJUnit4::class)
-class SpocsJSONParserTest {
-    @Test
-    fun `GIVEN a SpocsJSONParser THEN its visibility is internal`() {
-        assertClassVisibility(SpocsJSONParser::class, KVisibility.INTERNAL)
-    }
-
-    @Test
-    fun `GIVEN SpocsJSONParser WHEN parsing spocs THEN ApiSpocs are returned`() {
-        val expectedSpocs = PocketTestResources.apiExpectedPocketSpocs
-        val pocketJSON = PocketTestResources.pocketEndpointThreeSpocsResponse
-        val actualSpocs = SpocsJSONParser.jsonToSpocs(pocketJSON)
-
-        assertNotNull(actualSpocs)
-        assertEquals(3, actualSpocs!!.size)
-        assertEquals(expectedSpocs, actualSpocs)
-    }
-
-    @Test
-    fun `WHEN parsing spocs with missing titles THEN those entries are dropped`() {
-        val pocketJSON = PocketTestResources.pocketEndpointThreeSpocsResponse
-        val expectedSpocsIfMissingTitle = ArrayList(PocketTestResources.apiExpectedPocketSpocs)
-            .apply { removeAt(2) }
-        val pocketJsonWithMissingTitle = removeJsonFieldFromArrayIndex("title", 2, pocketJSON)
-
-        val result = SpocsJSONParser.jsonToSpocs(pocketJsonWithMissingTitle)
-
-        assertEquals(2, result!!.size)
-        assertEquals(expectedSpocsIfMissingTitle.joinToString(), result.joinToString())
-    }
-
-    @Test
-    fun `WHEN parsing spocs with missing urls THEN those entries are dropped`() {
-        val pocketJSON = PocketTestResources.pocketEndpointThreeSpocsResponse
-        val expectedSpocsIfMissingTitle = ArrayList(PocketTestResources.apiExpectedPocketSpocs)
-            .apply { removeAt(1) }
-        val pocketJsonWithMissingTitle = removeJsonFieldFromArrayIndex("url", 1, pocketJSON)
-
-        val result = SpocsJSONParser.jsonToSpocs(pocketJsonWithMissingTitle)
-
-        assertEquals(2, result!!.size)
-        assertEquals(expectedSpocsIfMissingTitle.joinToString(), result.joinToString())
-    }
-
-    @Test
-    fun `WHEN parsing spocs with missing image urls THEN those entries are dropped`() {
-        val pocketJSON = PocketTestResources.pocketEndpointThreeSpocsResponse
-        val expectedSpocsIfMissingTitle = ArrayList(PocketTestResources.apiExpectedPocketSpocs)
-            .apply { removeAt(0) }
-        val pocketJsonWithMissingTitle = removeJsonFieldFromArrayIndex("image_src", 0, pocketJSON)
-
-        val result = SpocsJSONParser.jsonToSpocs(pocketJsonWithMissingTitle)
-
-        assertEquals(2, result!!.size)
-        assertEquals(expectedSpocsIfMissingTitle.joinToString(), result.joinToString())
-    }
-
-    @Test
-    fun `WHEN parsing spocs with missing sponsors THEN those entries are dropped`() {
-        val pocketJSON = PocketTestResources.pocketEndpointThreeSpocsResponse
-        val expectedSpocsIfMissingTitle = ArrayList(PocketTestResources.apiExpectedPocketSpocs)
-            .apply { removeAt(1) }
-        val pocketJsonWithMissingTitle = removeJsonFieldFromArrayIndex("sponsor", 1, pocketJSON)
-
-        val result = SpocsJSONParser.jsonToSpocs(pocketJsonWithMissingTitle)
-
-        assertEquals(2, result!!.size)
-        assertEquals(expectedSpocsIfMissingTitle.joinToString(), result.joinToString())
-    }
-
-    @Test
-    fun `WHEN parsing spocs with missing click shims THEN those entries are dropped`() {
-        val pocketJSON = PocketTestResources.pocketEndpointThreeSpocsResponse
-        val expectedSpocsIfMissingTitle = ArrayList(PocketTestResources.apiExpectedPocketSpocs)
-            .apply { removeAt(2) }
-        val pocketJsonWithMissingTitle = removeShimFromSpoc("click", 2, pocketJSON)
-
-        val result = SpocsJSONParser.jsonToSpocs(pocketJsonWithMissingTitle)
-
-        assertEquals(2, result!!.size)
-        assertEquals(expectedSpocsIfMissingTitle.joinToString(), result.joinToString())
-    }
-
-    @Test
-    fun `WHEN parsing spocs with missing impression shims THEN those entries are dropped`() {
-        val pocketJSON = PocketTestResources.pocketEndpointThreeSpocsResponse
-        val expectedSpocsIfMissingTitle = ArrayList(PocketTestResources.apiExpectedPocketSpocs)
-            .apply { removeAt(1) }
-        val pocketJsonWithMissingTitle = removeShimFromSpoc("impression", 1, pocketJSON)
-
-        val result = SpocsJSONParser.jsonToSpocs(pocketJsonWithMissingTitle)
-
-        assertEquals(2, result!!.size)
-        assertEquals(expectedSpocsIfMissingTitle.joinToString(), result.joinToString())
-    }
-
-    @Test
-    fun `WHEN parsing spocs with missing priority THEN those entries are dropped`() {
-        val pocketJSON = PocketTestResources.pocketEndpointThreeSpocsResponse
-        val expectedSpocsIfMissingPriority = ArrayList(PocketTestResources.apiExpectedPocketSpocs)
-            .apply { removeAt(1) }
-        val pocketJsonWithMissingPriority = removeJsonFieldFromArrayIndex("priority", 1, pocketJSON)
-
-        val result = SpocsJSONParser.jsonToSpocs(pocketJsonWithMissingPriority)
-
-        assertEquals(2, result!!.size)
-        assertEquals(expectedSpocsIfMissingPriority.joinToString(), result.joinToString())
-    }
-
-    @Test
-    fun `WHEN parsing spocs with missing a lifetime count cap THEN those entries are dropped`() {
-        val pocketJSON = PocketTestResources.pocketEndpointThreeSpocsResponse
-        val expectedSpocsIfMissingLifetimeCap = ArrayList(PocketTestResources.apiExpectedPocketSpocs)
-            .apply { removeAt(0) }
-        val pocketJsonWithMissingLifetimeCap = removeCapFromSpoc(JSON_SPOC_CAPS_LIFETIME_KEY, 0, pocketJSON)
-
-        val result = SpocsJSONParser.jsonToSpocs(pocketJsonWithMissingLifetimeCap)
-
-        assertEquals(2, result!!.size)
-        assertEquals(expectedSpocsIfMissingLifetimeCap.joinToString(), result.joinToString())
-    }
-
-    @Test
-    fun `WHEN parsing spocs with missing a flight count cap THEN those entries are dropped`() {
-        val pocketJSON = PocketTestResources.pocketEndpointThreeSpocsResponse
-        val expectedSpocsIfMissingFlightCountCap = ArrayList(PocketTestResources.apiExpectedPocketSpocs)
-            .apply { removeAt(1) }
-        val pocketJsonWithMissingFlightCountCap = removeCapFromSpoc(JSON_SPOC_CAPS_FLIGHT_COUNT_KEY, 1, pocketJSON)
-
-        val result = SpocsJSONParser.jsonToSpocs(pocketJsonWithMissingFlightCountCap)
-
-        assertEquals(2, result!!.size)
-        assertEquals(expectedSpocsIfMissingFlightCountCap.joinToString(), result.joinToString())
-    }
-
-    @Test
-    fun `WHEN parsing spocs with missing a flight period cap THEN those entries are dropped`() {
-        val pocketJSON = PocketTestResources.pocketEndpointThreeSpocsResponse
-        val expectedSpocsIfMissingFlightPeriodCap = ArrayList(PocketTestResources.apiExpectedPocketSpocs)
-            .apply { removeAt(2) }
-        val pocketJsonWithMissingFlightPeriodCap = removeCapFromSpoc(JSON_SPOC_CAPS_FLIGHT_PERIOD_KEY, 2, pocketJSON)
-
-        val result = SpocsJSONParser.jsonToSpocs(pocketJsonWithMissingFlightPeriodCap)
-
-        assertEquals(2, result!!.size)
-        assertEquals(expectedSpocsIfMissingFlightPeriodCap.joinToString(), result.joinToString())
-    }
-
-    @Test
-    fun `WHEN parsing spocs for an invalid JSON String THEN null is returned`() {
-        assertNull(SpocsJSONParser.jsonToSpocs("{!!}}"))
-    }
-}
-
-private fun removeJsonFieldFromArrayIndex(fieldName: String, indexInArray: Int, json: String): String {
-    val obj = JSONObject(json)
-    val spocsJson = obj.getJSONArray(KEY_ARRAY_SPOCS)
-    spocsJson.getJSONObject(indexInArray).remove(fieldName)
-    return obj.toString()
-}
-
-private fun removeShimFromSpoc(shimName: String, spocIndex: Int, json: String): String {
-    val obj = JSONObject(json)
-    val spocsJson = obj.getJSONArray(KEY_ARRAY_SPOCS)
-    val spocJson = spocsJson.getJSONObject(spocIndex)
-    spocJson.getJSONObject(JSON_SPOC_SHIMS_KEY).remove(shimName)
-    return obj.toString()
-}
-
-private fun removeCapFromSpoc(cap: String, spocIndex: Int, json: String): String {
-    val obj = JSONObject(json)
-    val spocsJson = obj.getJSONArray(KEY_ARRAY_SPOCS)
-    val spocJson = spocsJson.getJSONObject(spocIndex)
-    val capsJSON = spocJson.getJSONObject(JSON_SPOC_CAPS_KEY)
-
-    if (cap == JSON_SPOC_CAPS_LIFETIME_KEY) {
-        capsJSON.remove(cap)
-    } else {
-        capsJSON.getJSONObject(JSON_SPOC_CAPS_FLIGHT_KEY).remove(cap)
-    }
-
-    return obj.toString()
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/db/SpocEntityTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/db/SpocEntityTest.kt
deleted file mode 100644
index f7dee01418..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/db/SpocEntityTest.kt
+++ /dev/null
@@ -1,17 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.spocs.db
-
-import mozilla.components.service.pocket.helpers.assertClassVisibility
-import org.junit.Test
-import kotlin.reflect.KVisibility.INTERNAL
-
-class SpocEntityTest {
-    // This is the data type persisted locally. No need to be public
-    @Test
-    fun `GIVEN a spoc entity THEN it's visibility is internal`() {
-        assertClassVisibility(SpocEntity::class, INTERNAL)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/db/SpocImpressionEntityTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/db/SpocImpressionEntityTest.kt
deleted file mode 100644
index 4e119b0bb2..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/db/SpocImpressionEntityTest.kt
+++ /dev/null
@@ -1,29 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.spocs.db
-
-import mozilla.components.service.pocket.helpers.assertClassVisibility
-import org.junit.Assert.assertTrue
-import org.junit.Test
-import kotlin.reflect.KVisibility.INTERNAL
-
-class SpocImpressionEntityTest {
-    // This is the data type persisted locally. No need to be public
-    @Test
-    fun `GIVEN a spoc entity THEN it's visibility is internal`() {
-        assertClassVisibility(SpocImpressionEntity::class, INTERNAL)
-    }
-
-    @Test
-    fun `WHEN a new impression is created THEN the timestamp should be seconds from Epoch`() {
-        val nowInSeconds = System.currentTimeMillis() / 1000
-        val impression = SpocImpressionEntity(2)
-
-        assertTrue(
-            LongRange(nowInSeconds - 5, nowInSeconds + 5)
-                .contains(impression.impressionDateInSeconds),
-        )
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/db/SpocsDaoTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/db/SpocsDaoTest.kt
deleted file mode 100644
index b4bd5e6c45..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/spocs/db/SpocsDaoTest.kt
+++ /dev/null
@@ -1,513 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.spocs.db
-
-import androidx.arch.core.executor.testing.InstantTaskExecutorRule
-import androidx.room.Room
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import kotlinx.coroutines.ExperimentalCoroutinesApi
-import kotlinx.coroutines.test.runTest
-import mozilla.components.service.pocket.helpers.PocketTestResources
-import mozilla.components.service.pocket.stories.db.PocketRecommendationsDatabase
-import mozilla.components.support.test.robolectric.testContext
-import org.junit.After
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertTrue
-import org.junit.Before
-import org.junit.Rule
-import org.junit.Test
-import org.junit.runner.RunWith
-import java.util.concurrent.ExecutorService
-import java.util.concurrent.Executors
-
-@OptIn(ExperimentalCoroutinesApi::class)
-@RunWith(AndroidJUnit4::class)
-class SpocsDaoTest {
-    private lateinit var database: PocketRecommendationsDatabase
-    private lateinit var dao: SpocsDao
-    private lateinit var executor: ExecutorService
-
-    @get:Rule
-    var instantTaskExecutorRule = InstantTaskExecutorRule()
-
-    @Before
-    fun setUp() {
-        executor = Executors.newSingleThreadExecutor()
-        database = Room
-            .inMemoryDatabaseBuilder(testContext, PocketRecommendationsDatabase::class.java)
-            .allowMainThreadQueries()
-            .build()
-        dao = database.spocsDao()
-    }
-
-    @After
-    fun tearDown() {
-        database.close()
-        executor.shutdown()
-    }
-
-    @Test
-    fun `GIVEN an empty table WHEN a story is inserted and then queried THEN return the same story`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketSpoc
-
-        dao.insertSpocs(listOf(story))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(story), result)
-    }
-
-    @Test
-    fun `GIVEN a story already persisted WHEN another story with different id is tried to be inserted THEN add that to the table`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketSpoc
-        val newStory = story.copy(
-            id = 1,
-        )
-        dao.insertSpocs(listOf(story))
-
-        dao.insertSpocs(listOf(newStory))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(newStory, story), result)
-    }
-
-    @Test
-    fun `GIVEN a story already persisted WHEN another story with different url is tried to be inserted THEN replace the existing`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketSpoc
-        val newStory = story.copy(
-            title = "updated" + story.url,
-        )
-        dao.insertSpocs(listOf(story))
-
-        dao.insertSpocs(listOf(newStory))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(newStory), result)
-    }
-
-    @Test
-    fun `GIVEN a story already persisted WHEN another story with different title is tried to be inserted THEN replace the existing`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketSpoc
-        val newStory = story.copy(
-            title = "updated" + story.title,
-        )
-        dao.insertSpocs(listOf(story))
-
-        dao.insertSpocs(listOf(newStory))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(newStory), result)
-    }
-
-    @Test
-    fun `GIVEN a story already persisted WHEN another story with different image url is tried to be inserted THEN replace the existing`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketSpoc
-        val newStory = story.copy(
-            imageUrl = "updated" + story.imageUrl,
-        )
-        dao.insertSpocs(listOf(story))
-
-        dao.insertSpocs(listOf(newStory))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(newStory), result)
-    }
-
-    @Test
-    fun `GIVEN a story already persisted WHEN another story with different sponsor is tried to be inserted THEN replace the existing`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketSpoc
-        val newStory = story.copy(
-            sponsor = "updated" + story.sponsor,
-        )
-        dao.insertSpocs(listOf(story))
-
-        dao.insertSpocs(listOf(newStory))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(newStory), result)
-    }
-
-    @Test
-    fun `GIVEN a story already persisted WHEN another story with different click shim is tried to be inserted THEN replace the existing`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketSpoc
-        val newStory = story.copy(
-            clickShim = "updated" + story.clickShim,
-        )
-        dao.insertSpocs(listOf(story))
-
-        dao.insertSpocs(listOf(newStory))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(newStory), result)
-    }
-
-    @Test
-    fun `GIVEN a story already persisted WHEN another story with different impression shim is tried to be inserted THEN replace the existing`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketSpoc
-        val newStory = story.copy(
-            impressionShim = "updated" + story.impressionShim,
-        )
-        dao.insertSpocs(listOf(story))
-
-        dao.insertSpocs(listOf(newStory))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(newStory), result)
-    }
-
-    @Test
-    fun `GIVEN a story already persisted WHEN another story with different priority is tried to be inserted THEN replace the existing`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketSpoc
-        val newStory = story.copy(
-            priority = 765,
-        )
-        dao.insertSpocs(listOf(story))
-
-        dao.insertSpocs(listOf(newStory))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(newStory), result)
-    }
-
-    @Test
-    fun `GIVEN a story already persisted WHEN another story with a different lifetime cap count is tried to be inserted THEN replace the existing`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketSpoc
-        val newStory = story.copy(
-            lifetimeCapCount = 123,
-        )
-        dao.insertSpocs(listOf(story))
-
-        dao.insertSpocs(listOf(newStory))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(newStory), result)
-    }
-
-    @Test
-    fun `GIVEN a story already persisted WHEN another story with a different flight count cap is tried to be inserted THEN replace the existing`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketSpoc
-        val newStory = story.copy(
-            flightCapCount = 999,
-        )
-        dao.insertSpocs(listOf(story))
-
-        dao.insertSpocs(listOf(newStory))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(newStory), result)
-    }
-
-    @Test
-    fun `GIVEN a story already persisted WHEN another story with a different flight period cap is tried to be inserted THEN replace the existing`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketSpoc
-        val newStory = story.copy(
-            flightCapPeriod = 1,
-        )
-        dao.insertSpocs(listOf(story))
-
-        dao.insertSpocs(listOf(newStory))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(newStory), result)
-    }
-
-    @Test
-    fun `GIVEN no persisted storied WHEN asked to insert a list of stories THEN add them all to the table`() = runTest {
-        val story1 = PocketTestResources.dbExpectedPocketSpoc
-        val story2 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 2)
-        val story3 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 3)
-        val story4 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 4)
-
-        dao.insertSpocs(listOf(story1, story2, story3, story4))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(story1, story2, story3, story4), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to delete them THEN remove all from the table`() = runTest {
-        val story1 = PocketTestResources.dbExpectedPocketSpoc
-        val story2 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 2)
-        val story3 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 3)
-        val story4 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 4)
-        dao.insertSpocs(listOf(story1, story2, story3, story4))
-
-        dao.deleteAllSpocs()
-        val result = dao.getAllSpocs()
-
-        assertTrue(result.isEmpty())
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to delete some THEN remove remove the ones already persisted`() = runTest {
-        val story1 = PocketTestResources.dbExpectedPocketSpoc
-        val story2 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 2)
-        val story3 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 3)
-        val story4 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 4)
-        val story5 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 5)
-        dao.insertSpocs(listOf(story1, story2, story3, story4))
-
-        dao.deleteSpocs(listOf(story2, story3, story5))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(story1, story4), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN remove from table all stories not found in the new list`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketSpoc
-        val story2 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 2)
-        val story3 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 3)
-        val story4 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 4)
-        dao.insertSpocs(listOf(story1, story2, story3, story4))
-
-        dao.cleanOldAndInsertNewSpocs(listOf(story2, story4))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(story2, story4), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN update stories with new ids`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketSpoc
-        val story2 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 2)
-        val updatedStory1 = story1.copy(
-            id = story1.id * 3,
-        )
-        dao.insertSpocs(listOf(story1, story2))
-
-        dao.cleanOldAndInsertNewSpocs(listOf(updatedStory1, story2))
-        val result = dao.getAllSpocs()
-
-        // Order gets reversed because the original story is replaced and another one is added.
-        assertEquals(listOf(story2, updatedStory1), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN don't update story if only url changed`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketSpoc
-        val story2 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 2)
-        val updatedStory1 = story1.copy(
-            url = "updated" + story1.url,
-        )
-        dao.insertSpocs(listOf(story1, story2))
-
-        dao.cleanOldAndInsertNewSpocs(listOf(updatedStory1, story2))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(updatedStory1, story2), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN don't update story if only title changed`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketSpoc
-        val story2 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 2)
-        val updatedStory1 = story1.copy(
-            title = "updated" + story1.title,
-        )
-        dao.insertSpocs(listOf(story1, story2))
-
-        dao.cleanOldAndInsertNewSpocs(listOf(updatedStory1, story2))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(updatedStory1, story2), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN don't update story if only image url changed`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketSpoc
-        val story2 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 2)
-        val updatedStory1 = story1.copy(
-            imageUrl = "updated" + story1.imageUrl,
-        )
-        dao.insertSpocs(listOf(story1, story2))
-
-        dao.cleanOldAndInsertNewSpocs(listOf(updatedStory1, story2))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(updatedStory1, story2), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN don't update story if only sponsor changed`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketSpoc
-        val story2 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 2)
-        val updatedStory1 = story1.copy(
-            sponsor = "updated" + story1.sponsor,
-        )
-        dao.insertSpocs(listOf(story1, story2))
-
-        dao.cleanOldAndInsertNewSpocs(listOf(updatedStory1, story2))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(updatedStory1, story2), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN don't update story if only the click shim changed`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketSpoc
-        val story2 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 2)
-        val updatedStory1 = story1.copy(
-            clickShim = "updated" + story1.clickShim,
-        )
-        dao.insertSpocs(listOf(story1, story2))
-
-        dao.cleanOldAndInsertNewSpocs(listOf(updatedStory1, story2))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(updatedStory1, story2), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN don't update story if only the impression shim changed`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketSpoc
-        val story2 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 2)
-        val updatedStory1 = story1.copy(
-            impressionShim = "updated" + story1.impressionShim,
-        )
-        dao.insertSpocs(listOf(story1, story2))
-
-        dao.cleanOldAndInsertNewSpocs(listOf(updatedStory1, story2))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(updatedStory1, story2), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN don't update story if only priority changed`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketSpoc
-        val story2 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 2)
-        val updatedStory1 = story1.copy(
-            priority = 678,
-        )
-        dao.insertSpocs(listOf(story1, story2))
-
-        dao.cleanOldAndInsertNewSpocs(listOf(updatedStory1, story2))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(updatedStory1, story2), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN don't update story if only the lifetime count cap changed`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketSpoc
-        val story2 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 2)
-        val updatedStory1 = story1.copy(
-            lifetimeCapCount = 4322,
-        )
-        dao.insertSpocs(listOf(story1, story2))
-
-        dao.cleanOldAndInsertNewSpocs(listOf(updatedStory1, story2))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(updatedStory1, story2), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN don't update story if only the flight count cap changed`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketSpoc
-        val story2 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 2)
-        val updatedStory1 = story1.copy(
-            flightCapCount = 111111,
-        )
-        dao.insertSpocs(listOf(story1, story2))
-
-        dao.cleanOldAndInsertNewSpocs(listOf(updatedStory1, story2))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(updatedStory1, story2), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN don't update story if only the flight period cap changed`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketSpoc
-        val story2 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 2)
-        val updatedStory1 = story1.copy(
-            flightCapPeriod = 7,
-        )
-        dao.insertSpocs(listOf(story1, story2))
-
-        dao.cleanOldAndInsertNewSpocs(listOf(updatedStory1, story2))
-        val result = dao.getAllSpocs()
-
-        assertEquals(listOf(updatedStory1, story2), result)
-    }
-
-    @Test
-    fun `GIVEN no stories are persisted WHEN asked to record an impression THEN don't persist data and don't throw errors`() = runTest {
-        dao.recordImpression(6543321)
-
-        val result = dao.getSpocsImpressions()
-
-        assertTrue(result.isEmpty())
-    }
-
-    @Test
-    fun `GIVEN stories are persisted WHEN asked to record impressions for other stories also THEN persist impression only for existing stories`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketSpoc
-        val story2 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 2)
-        val story3 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 3)
-        dao.insertSpocs(listOf(story1, story3))
-
-        dao.recordImpressions(
-            listOf(
-                SpocImpressionEntity(story1.id),
-                SpocImpressionEntity(story2.id),
-                SpocImpressionEntity(story3.id),
-            ),
-        )
-        val result = dao.getSpocsImpressions()
-
-        assertEquals(2, result.size)
-        assertEquals(story1.id, result[0].spocId)
-        assertEquals(story3.id, result[1].spocId)
-    }
-
-    @Test
-    fun `GIVEN stories are persisted WHEN asked to record impressions for existing stories THEN persist the impressions`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketSpoc
-        val story2 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 2)
-        val story3 = PocketTestResources.dbExpectedPocketSpoc.copy(id = story1.id * 3)
-        dao.insertSpocs(listOf(story1, story2, story3))
-
-        dao.recordImpressions(
-            listOf(
-                SpocImpressionEntity(story1.id),
-                SpocImpressionEntity(story3.id),
-            ),
-        )
-        val result = dao.getSpocsImpressions()
-
-        assertEquals(2, result.size)
-        assertEquals(story1.id, result[0].spocId)
-        assertEquals(story3.id, result[1].spocId)
-    }
-
-    /**
-     * Sets an executor to be used for database transactions.
-     * Needs to be used along with "runTest" to ensure waiting for transactions to finish but not hang tests.
-     */
-    private fun setupDatabseForTransactions() {
-        database = Room
-            .inMemoryDatabaseBuilder(testContext, PocketRecommendationsDatabase::class.java)
-            .setTransactionExecutor(executor)
-            .allowMainThreadQueries()
-            .build()
-        dao = database.spocsDao()
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/PocketRecommendationsRepositoryTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/PocketRecommendationsRepositoryTest.kt
deleted file mode 100644
index 9e5b287ee0..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/PocketRecommendationsRepositoryTest.kt
+++ /dev/null
@@ -1,75 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories
-
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import kotlinx.coroutines.ExperimentalCoroutinesApi
-import kotlinx.coroutines.test.runTest
-import mozilla.components.service.pocket.ext.toPartialTimeShownUpdate
-import mozilla.components.service.pocket.ext.toPocketLocalStory
-import mozilla.components.service.pocket.ext.toPocketRecommendedStory
-import mozilla.components.service.pocket.helpers.PocketTestResources
-import mozilla.components.service.pocket.stories.db.PocketRecommendationsDao
-import mozilla.components.support.test.robolectric.testContext
-import org.junit.Assert.assertEquals
-import org.junit.Before
-import org.junit.Test
-import org.junit.runner.RunWith
-import org.mockito.Mockito.mock
-import org.mockito.Mockito.spy
-import org.mockito.Mockito.verify
-import org.mockito.Mockito.`when`
-
-@ExperimentalCoroutinesApi // for runTest
-@RunWith(AndroidJUnit4::class)
-class PocketRecommendationsRepositoryTest {
-
-    private val pocketRepo = spy(PocketRecommendationsRepository(testContext))
-    private lateinit var dao: PocketRecommendationsDao
-
-    @Before
-    fun setUp() {
-        dao = mock(PocketRecommendationsDao::class.java)
-        `when`(pocketRepo.pocketRecommendationsDao).thenReturn(dao)
-    }
-
-    @Test
-    fun `GIVEN PocketRecommendationsRepository WHEN getPocketRecommendedStories is called THEN return db entities mapped to domain type`() {
-        runTest {
-            val dbStory = PocketTestResources.dbExpectedPocketStory
-            `when`(dao.getPocketStories()).thenReturn(listOf(dbStory))
-
-            val result = pocketRepo.getPocketRecommendedStories()
-
-            verify(dao).getPocketStories()
-            assertEquals(1, result.size)
-            assertEquals(dbStory.toPocketRecommendedStory(), result[0])
-        }
-    }
-
-    @Test
-    fun `GIVEN PocketRecommendationsRepository WHEN addAllPocketApiStories is called THEN persist the received story to db`() {
-        runTest {
-            val apiStories = PocketTestResources.apiExpectedPocketStoriesRecommendations
-            val apiStoriesMappedForDb = apiStories.map { it.toPocketLocalStory() }
-
-            pocketRepo.addAllPocketApiStories(apiStories)
-
-            verify(dao).cleanOldAndInsertNewPocketStories(apiStoriesMappedForDb)
-        }
-    }
-
-    @Test
-    fun `GIVEN PocketRecommendationsRepository WHEN updateShownPocketRecommendedStories should persist the received story to db`() {
-        runTest {
-            val clientStories = listOf(PocketTestResources.clientExpectedPocketStory)
-            val clientStoriesPartialUpdate = clientStories.map { it.toPartialTimeShownUpdate() }
-
-            pocketRepo.updateShownPocketRecommendedStories(clientStories)
-
-            verify(dao).updateTimesShown(clientStoriesPartialUpdate)
-        }
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/PocketStoriesUseCasesTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/PocketStoriesUseCasesTest.kt
deleted file mode 100644
index 4af13135a8..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/PocketStoriesUseCasesTest.kt
+++ /dev/null
@@ -1,197 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories
-
-import android.content.Context
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import kotlinx.coroutines.ExperimentalCoroutinesApi
-import kotlinx.coroutines.test.runTest
-import mozilla.components.concept.fetch.Client
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-import mozilla.components.service.pocket.helpers.PocketTestResources
-import mozilla.components.service.pocket.helpers.assertClassVisibility
-import mozilla.components.service.pocket.stories.api.PocketEndpoint
-import mozilla.components.service.pocket.stories.api.PocketResponse
-import mozilla.components.support.test.any
-import mozilla.components.support.test.mock
-import mozilla.components.support.test.robolectric.testContext
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertFalse
-import org.junit.Assert.assertSame
-import org.junit.Assert.assertTrue
-import org.junit.Before
-import org.junit.Test
-import org.junit.runner.RunWith
-import org.mockito.Mockito.doReturn
-import org.mockito.Mockito.never
-import org.mockito.Mockito.spy
-import org.mockito.Mockito.times
-import org.mockito.Mockito.verify
-import kotlin.reflect.KVisibility
-
-@ExperimentalCoroutinesApi // for runTest
-@RunWith(AndroidJUnit4::class)
-class PocketStoriesUseCasesTest {
-    private val fetchClient: Client = mock()
-    private val useCases = spy(PocketStoriesUseCases(testContext, fetchClient))
-    private val pocketRepo: PocketRecommendationsRepository = mock()
-    private val pocketEndoint: PocketEndpoint = mock()
-
-    @Before
-    fun setup() {
-        doReturn(pocketEndoint).`when`(useCases).getPocketEndpoint(any())
-        doReturn(pocketRepo).`when`(useCases).getPocketRepository(any())
-    }
-
-    @Test
-    fun `GIVEN a PocketStoriesUseCases THEN its visibility is internal`() {
-        assertClassVisibility(PocketStoriesUseCases::class, KVisibility.INTERNAL)
-    }
-
-    @Test
-    fun `GIVEN a RefreshPocketStories THEN its visibility is internal`() {
-        assertClassVisibility(
-            PocketStoriesUseCases.RefreshPocketStories::class,
-            KVisibility.INTERNAL,
-        )
-    }
-
-    @Test
-    fun `GIVEN a GetPocketStories THEN its visibility is public`() {
-        assertClassVisibility(PocketStoriesUseCases.GetPocketStories::class, KVisibility.INTERNAL)
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesUseCases WHEN RefreshPocketStories is constructed THEN use the same parameters`() {
-        val refreshUseCase = useCases.refreshStories
-
-        assertSame(testContext, refreshUseCase.appContext)
-        assertSame(fetchClient, refreshUseCase.fetchClient)
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesUseCases constructed WHEN RefreshPocketStories is constructed separately THEN default to use the same parameters`() {
-        val refreshUseCase = useCases.RefreshPocketStories()
-
-        assertSame(testContext, refreshUseCase.appContext)
-        assertSame(fetchClient, refreshUseCase.fetchClient)
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesUseCases constructed WHEN RefreshPocketStories is constructed separately THEN allow using different parameters`() {
-        val context2: Context = mock()
-        val fetchClient2: Client = mock()
-
-        val refreshUseCase = useCases.RefreshPocketStories(context2, fetchClient2)
-
-        assertSame(context2, refreshUseCase.appContext)
-        assertSame(fetchClient2, refreshUseCase.fetchClient)
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesUseCases WHEN RefreshPocketStories is called THEN download stories from API and return early if unsuccessful response`() = runTest {
-        val refreshUseCase = useCases.RefreshPocketStories()
-        val successfulResponse = getSuccessfulPocketStories()
-        doReturn(successfulResponse).`when`(pocketEndoint).getRecommendedStories()
-
-        val result = refreshUseCase.invoke()
-
-        assertTrue(result)
-        verify(pocketEndoint).getRecommendedStories()
-        verify(pocketRepo).addAllPocketApiStories((successfulResponse as PocketResponse.Success).data)
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesUseCases WHEN RefreshPocketStories is called THEN download stories from API and save a successful response locally`() = runTest {
-        val refreshUseCase = useCases.RefreshPocketStories()
-        val successfulResponse = getFailedPocketStories()
-        doReturn(successfulResponse).`when`(pocketEndoint).getRecommendedStories()
-
-        val result = refreshUseCase.invoke()
-
-        assertFalse(result)
-        verify(pocketEndoint).getRecommendedStories()
-        verify(pocketRepo, never()).addAllPocketApiStories(any())
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesUseCases WHEN GetPocketStories is constructed THEN use the same parameters`() {
-        val getStoriesUseCase = useCases.getStories
-
-        assertSame(testContext, getStoriesUseCase.context)
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesUseCases constructed WHEN GetPocketStories is constructed separately THEN default to use the same parameters`() {
-        val getStoriesUseCase = useCases.GetPocketStories()
-
-        assertSame(testContext, getStoriesUseCase.context)
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesUseCases constructed WHEN GetPocketStories is constructed separately THEN allow using different parameters`() {
-        val context2: Context = mock()
-
-        val getStoriesUseCase = useCases.GetPocketStories(context2)
-
-        assertSame(context2, getStoriesUseCase.context)
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesUseCases WHEN GetPocketStories is called THEN delegate the repository to return locally stored stories`() =
-        runTest {
-            val getStoriesUseCase = useCases.GetPocketStories()
-            doReturn(emptyList<PocketRecommendedStory>()).`when`(pocketRepo)
-                .getPocketRecommendedStories()
-            var result = getStoriesUseCase.invoke()
-            verify(pocketRepo).getPocketRecommendedStories()
-            assertTrue(result.isEmpty())
-
-            val stories = listOf(PocketTestResources.clientExpectedPocketStory)
-            doReturn(stories).`when`(pocketRepo).getPocketRecommendedStories()
-            result = getStoriesUseCase.invoke()
-            // getPocketRecommendedStories() should've been called 2 times. Once in the above check, once now.
-            verify(pocketRepo, times(2)).getPocketRecommendedStories()
-            assertEquals(result, stories)
-        }
-
-    @Test
-    fun `GIVEN PocketStoriesUseCases WHEN UpdateStoriesTimesShown is constructed THEN use the same parameters`() {
-        val updateStoriesTimesShown = useCases.updateTimesShown
-
-        assertSame(testContext, updateStoriesTimesShown.context)
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesUseCases constructed WHEN UpdateStoriesTimesShown is constructed separately THEN default to use the same parameters`() {
-        val updateStoriesTimesShown = useCases.UpdateStoriesTimesShown()
-
-        assertSame(testContext, updateStoriesTimesShown.context)
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesUseCases constructed WHEN UpdateStoriesTimesShown is constructed separately THEN allow using different parameters`() {
-        val context2: Context = mock()
-
-        val updateStoriesTimesShown = useCases.UpdateStoriesTimesShown(context2)
-
-        assertSame(context2, updateStoriesTimesShown.context)
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesUseCases WHEN UpdateStoriesTimesShown is called THEN delegate the repository to update the stories shown`() = runTest {
-        val updateStoriesTimesShown = useCases.UpdateStoriesTimesShown()
-        val updatedStories: List<PocketRecommendedStory> = mock()
-
-        updateStoriesTimesShown.invoke(updatedStories)
-
-        verify(pocketRepo).updateShownPocketRecommendedStories(updatedStories)
-    }
-
-    private fun getSuccessfulPocketStories() =
-        PocketResponse.wrap(PocketTestResources.apiExpectedPocketStoriesRecommendations)
-
-    private fun getFailedPocketStories() = PocketResponse.wrap(null)
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/api/PocketApiStoryTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/api/PocketApiStoryTest.kt
deleted file mode 100644
index 34960a83d1..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/api/PocketApiStoryTest.kt
+++ /dev/null
@@ -1,17 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories.api
-
-import mozilla.components.service.pocket.helpers.assertClassVisibility
-import org.junit.Test
-import kotlin.reflect.KVisibility
-
-class PocketApiStoryTest {
-    // This is the data type as received from the Pocket endpoint. No need to be public.
-    @Test
-    fun `GIVEN a PocketRecommendedStory THEN its visibility is internal`() {
-        assertClassVisibility(PocketApiStory::class, KVisibility.INTERNAL)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/api/PocketEndpointRawTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/api/PocketEndpointRawTest.kt
deleted file mode 100644
index e438b8c849..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/api/PocketEndpointRawTest.kt
+++ /dev/null
@@ -1,115 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories.api
-
-import androidx.core.net.toUri
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import mozilla.components.concept.fetch.Client
-import mozilla.components.concept.fetch.Response
-import mozilla.components.service.pocket.helpers.MockResponses
-import mozilla.components.service.pocket.helpers.assertClassVisibility
-import mozilla.components.service.pocket.helpers.assertRequestParams
-import mozilla.components.service.pocket.helpers.assertResponseIsClosed
-import mozilla.components.service.pocket.helpers.assertSuccessfulRequestReturnsResponseBody
-import mozilla.components.support.test.any
-import mozilla.components.support.test.mock
-import mozilla.components.support.test.whenever
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertNull
-import org.junit.Assert.assertSame
-import org.junit.Before
-import org.junit.Test
-import org.junit.runner.RunWith
-import java.io.IOException
-import kotlin.reflect.KVisibility
-
-@RunWith(AndroidJUnit4::class)
-class PocketEndpointRawTest {
-    private val url = "https://mozilla.org".toUri()
-
-    private lateinit var endpoint: PocketEndpointRaw
-    private lateinit var client: Client
-
-    private lateinit var errorResponse: Response
-    private lateinit var successResponse: Response
-    private lateinit var defaultResponse: Response
-
-    @Before
-    fun setUp() {
-        errorResponse = MockResponses.getError()
-        successResponse = MockResponses.getSuccess()
-        defaultResponse = errorResponse
-
-        client = mock<Client>().also {
-            whenever(it.fetch(any())).thenReturn(defaultResponse)
-        }
-
-        endpoint = PocketEndpointRaw(client)
-    }
-
-    @Test
-    fun `GIVEN a PocketEndpointRaw THEN its visibility is internal`() {
-        assertClassVisibility(PocketEndpointRaw::class, KVisibility.INTERNAL)
-    }
-
-    @Test
-    fun `WHEN requesting stories recommendations THEN the firefox android home recommendations url is used`() {
-        val expectedUrl = "https://firefox-android-home-recommendations.getpocket.com/"
-
-        assertRequestParams(
-            client,
-            makeRequest = {
-                endpoint.getRecommendedStories()
-            },
-            assertParams = { request ->
-                assertEquals(expectedUrl, request.url)
-            },
-        )
-    }
-
-    @Test
-    fun `WHEN requesting stories recommendations and the client throws an IOException THEN null is returned`() {
-        whenever(client.fetch(any())).thenThrow(IOException::class.java)
-        assertNull(endpoint.getRecommendedStories())
-    }
-
-    @Test
-    fun `WHEN requesting stories recommendations and the response is null THEN null is returned`() {
-        whenever(client.fetch(any())).thenReturn(null)
-        assertNull(endpoint.getRecommendedStories())
-    }
-
-    @Test
-    fun `WHEN requesting stories recommendations and the response is not a success THEN null is returned`() {
-        whenever(client.fetch(any())).thenReturn(errorResponse)
-        assertNull(endpoint.getRecommendedStories())
-    }
-
-    @Test
-    fun `WHEN requesting stories recommendations and the response is a success THEN the response body is returned`() {
-        assertSuccessfulRequestReturnsResponseBody(client, endpoint::getRecommendedStories)
-    }
-
-    @Test
-    fun `WHEN requesting stories recommendations and the response is an error THEN response is closed`() {
-        assertResponseIsClosed(client, errorResponse) {
-            endpoint.getRecommendedStories()
-        }
-    }
-
-    @Test
-    fun `WHEN requesting stories recommendations and the response is a success THEN response is closed`() {
-        assertResponseIsClosed(client, successResponse) {
-            endpoint.getRecommendedStories()
-        }
-    }
-
-    @Test
-    fun `WHEN newInstance is called THEN a new instance configured with the client provided is returned`() {
-        val result = PocketEndpointRaw.newInstance(client)
-
-        assertSame(client, result.client)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/api/PocketEndpointTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/api/PocketEndpointTest.kt
deleted file mode 100644
index db53750279..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/api/PocketEndpointTest.kt
+++ /dev/null
@@ -1,97 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories.api
-
-import mozilla.components.concept.fetch.Client
-import mozilla.components.service.pocket.helpers.PocketTestResources
-import mozilla.components.service.pocket.helpers.assertClassVisibility
-import mozilla.components.service.pocket.helpers.assertResponseIsFailure
-import mozilla.components.support.test.any
-import mozilla.components.support.test.mock
-import mozilla.components.support.test.whenever
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertSame
-import org.junit.Before
-import org.junit.Test
-import org.mockito.Mockito.times
-import org.mockito.Mockito.verify
-import kotlin.reflect.KVisibility
-
-class PocketEndpointTest {
-
-    private lateinit var endpoint: PocketEndpoint
-    private lateinit var raw: PocketEndpointRaw // we shorten the name to avoid confusion with endpoint.
-    private lateinit var jsonParser: PocketJSONParser
-
-    private lateinit var client: Client
-
-    @Before
-    fun setUp() {
-        raw = mock()
-        jsonParser = mock()
-        endpoint = PocketEndpoint(raw, jsonParser)
-
-        client = mock()
-    }
-
-    @Test
-    fun `GIVEN a PocketEndpoint THEN its visibility is internal`() {
-        assertClassVisibility(PocketEndpoint::class, KVisibility.INTERNAL)
-    }
-
-    @Test
-    fun `GIVEN an api request for stories WHEN getting a null response THEN a failure is returned`() {
-        whenever(raw.getRecommendedStories()).thenReturn(null)
-        whenever(jsonParser.jsonToPocketApiStories(any())).thenThrow(
-            AssertionError(
-                "We assume this won't get called so we don't mock it",
-            ),
-        )
-
-        assertResponseIsFailure(endpoint.getRecommendedStories())
-    }
-
-    @Test
-    fun `GIVEN an api request for stories WHEN getting an empty response THEN a failure is returned`() {
-        whenever(raw.getRecommendedStories()).thenReturn("")
-        whenever(jsonParser.jsonToPocketApiStories(any())).thenReturn(null)
-
-        assertResponseIsFailure(endpoint.getRecommendedStories())
-    }
-
-    @Test
-    fun `GIVEN an api request for stories WHEN getting a response THEN parse map it through PocketJSONParser`() {
-        arrayOf(
-            "",
-            " ",
-            "{}",
-            """{"expectedJSON": 101}""",
-        ).forEach { expected ->
-            whenever(raw.getRecommendedStories()).thenReturn(expected)
-
-            endpoint.getRecommendedStories()
-
-            verify(jsonParser, times(1)).jsonToPocketApiStories(expected)
-        }
-    }
-
-    @Test
-    fun `GIVEN an api request for stories WHEN getting a valid response THEN a success with the data is returned`() {
-        val expected = PocketTestResources.apiExpectedPocketStoriesRecommendations
-        whenever(raw.getRecommendedStories()).thenReturn("")
-        whenever(jsonParser.jsonToPocketApiStories(any())).thenReturn(expected)
-
-        val actual = endpoint.getRecommendedStories()
-
-        assertEquals(expected, (actual as? PocketResponse.Success)?.data)
-    }
-
-    @Test
-    fun `WHEN newInstance is called THEN a new PocketEndpoint is returned as a wrapper over a configured PocketEndpointRaw`() {
-        val result = PocketEndpoint.newInstance(client)
-
-        assertSame(client, result.rawEndpoint.client)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/api/PocketJSONParserTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/api/PocketJSONParserTest.kt
deleted file mode 100644
index d3adc89455..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/api/PocketJSONParserTest.kt
+++ /dev/null
@@ -1,158 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories.api
-
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import mozilla.components.service.pocket.helpers.PocketTestResources
-import mozilla.components.service.pocket.helpers.assertClassVisibility
-import mozilla.components.service.pocket.stories.api.PocketJSONParser.Companion.KEY_ARRAY_ITEMS
-import org.json.JSONObject
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertNotNull
-import org.junit.Assert.assertNull
-import org.junit.Before
-import org.junit.Test
-import org.junit.runner.RunWith
-import kotlin.reflect.KVisibility
-
-@RunWith(AndroidJUnit4::class)
-class PocketJSONParserTest {
-
-    private lateinit var parser: PocketJSONParser
-
-    @Before
-    fun setUp() {
-        parser = PocketJSONParser()
-    }
-
-    @Test
-    fun `GIVEN a PocketJSONParser THEN its visibility is internal`() {
-        assertClassVisibility(PocketJSONParser::class, KVisibility.INTERNAL)
-    }
-
-    @Test
-    fun `GIVEN PocketJSONParser WHEN parsing valid stories recommendations THEN PocketApiStories are returned`() {
-        val expectedStories = PocketTestResources.apiExpectedPocketStoriesRecommendations
-        val pocketJSON = PocketTestResources.pocketEndointFiveStoriesResponse
-        val actualStories = parser.jsonToPocketApiStories(pocketJSON)
-
-        assertNotNull(actualStories)
-        assertEquals(5, actualStories!!.size)
-        assertEquals(expectedStories, actualStories)
-    }
-
-    @Test
-    fun `WHEN parsing stories recommendations with missing titles THEN those entries are dropped`() {
-        val pocketJSON = PocketTestResources.pocketEndointFiveStoriesResponse
-        val expectedStoriesIfMissingTitle = ArrayList(PocketTestResources.apiExpectedPocketStoriesRecommendations)
-            .apply { removeAt(4) }
-        val pocketJsonWithMissingTitle = removeJsonFieldFromArrayIndex("title", 4, pocketJSON)
-
-        val result = parser.jsonToPocketApiStories(pocketJsonWithMissingTitle)
-
-        assertEquals(4, result!!.size)
-        assertEquals(expectedStoriesIfMissingTitle.joinToString(), result.joinToString())
-    }
-
-    @Test
-    fun `WHEN parsing stories recommendations with missing urls THEN those entries are dropped`() {
-        val pocketJSON = PocketTestResources.pocketEndointFiveStoriesResponse
-        val expectedStoriesIfMissingUrl = ArrayList(PocketTestResources.apiExpectedPocketStoriesRecommendations)
-            .apply { removeAt(3) }
-        val pocketJsonWithMissingUrl = removeJsonFieldFromArrayIndex("url", 3, pocketJSON)
-
-        val result = parser.jsonToPocketApiStories(pocketJsonWithMissingUrl)
-
-        assertEquals(4, result!!.size)
-        assertEquals(expectedStoriesIfMissingUrl.joinToString(), result.joinToString())
-    }
-
-    @Test
-    fun `WHEN parsing stories recommendations with missing imageUrls THEN those entries are dropped`() {
-        val pocketJSON = PocketTestResources.pocketEndointFiveStoriesResponse
-        val expectedStoriesIfMissingImageUrl = ArrayList(PocketTestResources.apiExpectedPocketStoriesRecommendations)
-            .apply { removeAt(2) }
-        val pocketJsonWithMissingImageUrl = removeJsonFieldFromArrayIndex("imageUrl", 2, pocketJSON)
-
-        val result = parser.jsonToPocketApiStories(pocketJsonWithMissingImageUrl)
-
-        assertEquals(4, result!!.size)
-        assertEquals(expectedStoriesIfMissingImageUrl.joinToString(), result.joinToString())
-    }
-
-    @Test
-    fun `WHEN parsing stories recommendations with missing publishers THEN those entries are kept but with default values`() {
-        val pocketJSON = PocketTestResources.pocketEndointFiveStoriesResponse
-        val expectedStoriesIfMissingPublishers = PocketTestResources.apiExpectedPocketStoriesRecommendations
-            .mapIndexed { index, story ->
-                if (index == 2) {
-                    story.copy(publisher = STRING_NOT_FOUND_DEFAULT_VALUE)
-                } else {
-                    story
-                }
-            }
-        val pocketJsonWithMissingPublisher = removeJsonFieldFromArrayIndex("publisher", 2, pocketJSON)
-
-        val result = parser.jsonToPocketApiStories(pocketJsonWithMissingPublisher)
-
-        assertEquals(5, result!!.size)
-        assertEquals(expectedStoriesIfMissingPublishers.joinToString(), result.joinToString())
-    }
-
-    @Test
-    fun `WHEN parsing stories recommendations with missing categories THEN those entries are kept but with default values`() {
-        val pocketJSON = PocketTestResources.pocketEndointFiveStoriesResponse
-        val expectedStoriesIfMissingCategories = PocketTestResources.apiExpectedPocketStoriesRecommendations
-            .mapIndexed { index, story ->
-                if (index == 3) {
-                    story.copy(category = STRING_NOT_FOUND_DEFAULT_VALUE)
-                } else {
-                    story
-                }
-            }
-        val pocketJsonWithMissingCategories = removeJsonFieldFromArrayIndex("category", 3, pocketJSON)
-
-        val result = parser.jsonToPocketApiStories(pocketJsonWithMissingCategories)
-
-        assertEquals(5, result!!.size)
-        assertEquals(expectedStoriesIfMissingCategories.joinToString(), result.joinToString())
-    }
-
-    @Test
-    fun `WHEN parsing stories recommendations with missing timeToRead THEN those entries are kept but with default values`() {
-        val pocketJSON = PocketTestResources.pocketEndointFiveStoriesResponse
-        val expectedStoriesIfMissingTimeToRead = PocketTestResources.apiExpectedPocketStoriesRecommendations
-            .mapIndexed { index, story ->
-                if (index == 4) {
-                    story.copy(timeToRead = INT_NOT_FOUND_DEFAULT_VALUE)
-                } else {
-                    story
-                }
-            }
-        val pocketJsonWithMissingTimeToRead = removeJsonFieldFromArrayIndex("timeToRead", 4, pocketJSON)
-
-        val result = parser.jsonToPocketApiStories(pocketJsonWithMissingTimeToRead)
-
-        assertEquals(5, result!!.size)
-        assertEquals(expectedStoriesIfMissingTimeToRead.joinToString(), result.joinToString())
-    }
-
-    @Test
-    fun `WHEN parsing stories recommendations for an empty string THEN null is returned`() {
-        assertNull(parser.jsonToPocketApiStories(""))
-    }
-
-    @Test
-    fun `WHEN parsing stories recommendations for an invalid JSON String THEN null is returned`() {
-        assertNull(parser.jsonToPocketApiStories("{!!}}"))
-    }
-}
-
-private fun removeJsonFieldFromArrayIndex(fieldName: String, indexInArray: Int, json: String): String {
-    val obj = JSONObject(json)
-    val storiesJson = obj.getJSONArray(KEY_ARRAY_ITEMS)
-    storiesJson.getJSONObject(indexInArray).remove(fieldName)
-    return obj.toString()
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/api/PocketResponseTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/api/PocketResponseTest.kt
deleted file mode 100644
index 3a77bbec7f..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/api/PocketResponseTest.kt
+++ /dev/null
@@ -1,56 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories.api
-
-import org.junit.Assert.assertSame
-import org.junit.Assert.assertTrue
-import org.junit.Test
-
-class PocketResponseTest {
-    @Test
-    fun `GIVEN a null argument WHEN wrap is called THEN a Failure is returned`() {
-        assertTrue(PocketResponse.wrap(null) is PocketResponse.Failure)
-    }
-
-    @Test
-    fun `GIVEN an empty Collection argument WHEN wrap is called THEN a Failure is returned`() {
-        assertTrue(PocketResponse.wrap(emptyList<Any>()) is PocketResponse.Failure<*>)
-    }
-
-    @Test
-    fun `GIVEN a not empty Collection argument WHEN wrap is called THEN a Success wrapping that argument is returned`() {
-        val argument = listOf(1)
-
-        val result = PocketResponse.wrap(argument)
-
-        assertTrue(result is PocketResponse.Success)
-        assertSame(argument, (result as PocketResponse.Success).data)
-    }
-
-    @Test
-    fun `GIVEN an empty String argument WHEN wrap is called THEN a Failure is returned`() {
-        assertTrue(PocketResponse.wrap("") is PocketResponse.Failure<String>)
-    }
-
-    @Test
-    fun `GIVEN a not empty String argument WHEN wrap is called THEN a Success wrapping that argument is returned`() {
-        val argument = "not empty"
-
-        val result = PocketResponse.wrap(argument)
-
-        assertTrue(result is PocketResponse.Success)
-        assertSame(argument, (result as PocketResponse.Success).data)
-    }
-
-    @Test
-    fun `GIVEN a random argument WHEN wrap is called THEN a Success wrapping that argument is returned`() {
-        val argument = 42
-
-        val result = PocketResponse.wrap(argument)
-
-        assertTrue(result is PocketResponse.Success)
-        assertSame(argument, (result as PocketResponse.Success).data)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/db/PocketRecommendationsDaoTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/db/PocketRecommendationsDaoTest.kt
deleted file mode 100644
index e9f2b8208d..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/db/PocketRecommendationsDaoTest.kt
+++ /dev/null
@@ -1,387 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories.db
-
-import android.content.Context
-import androidx.arch.core.executor.testing.InstantTaskExecutorRule
-import androidx.room.Room
-import androidx.test.core.app.ApplicationProvider
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import kotlinx.coroutines.ExperimentalCoroutinesApi
-import kotlinx.coroutines.test.runTest
-import mozilla.components.service.pocket.helpers.PocketTestResources
-import org.junit.After
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertTrue
-import org.junit.Before
-import org.junit.Rule
-import org.junit.Test
-import org.junit.runner.RunWith
-import java.util.concurrent.ExecutorService
-import java.util.concurrent.Executors
-
-@OptIn(ExperimentalCoroutinesApi::class)
-@RunWith(AndroidJUnit4::class)
-class PocketRecommendationsDaoTest {
-    private val context: Context
-        get() = ApplicationProvider.getApplicationContext()
-    private lateinit var database: PocketRecommendationsDatabase
-    private lateinit var dao: PocketRecommendationsDao
-    private lateinit var executor: ExecutorService
-
-    @get:Rule
-    var instantTaskExecutorRule = InstantTaskExecutorRule()
-
-    @Before
-    fun setUp() {
-        executor = Executors.newSingleThreadExecutor()
-        database = Room
-            .inMemoryDatabaseBuilder(context, PocketRecommendationsDatabase::class.java)
-            .allowMainThreadQueries()
-            .build()
-        dao = database.pocketRecommendationsDao()
-    }
-
-    @After
-    fun tearDown() {
-        database.close()
-        executor.shutdown()
-    }
-
-    @Test
-    fun `GIVEN an empty table WHEN a story is inserted and then queried THEN return the same story`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketStory
-
-        dao.insertPocketStories(listOf(story))
-        val result = dao.getPocketStories()
-
-        assertEquals(listOf(story), result)
-    }
-
-    @Test
-    fun `GIVEN a story already persisted WHEN another story with identical url is tried to be inserted THEN add that to the table`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketStory
-        val newStory = story.copy(
-            url = "updated" + story.url,
-        )
-        dao.insertPocketStories(listOf(story))
-
-        dao.insertPocketStories(listOf(newStory))
-        val result = dao.getPocketStories()
-
-        assertEquals(listOf(story, newStory), result)
-    }
-
-    @Test
-    fun `GIVEN a story with the same url exists WHEN another story with updated title is tried to be inserted THEN don't update the table`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketStory
-        val updatedStory = story.copy(
-            title = "updated" + story.title,
-        )
-        dao.insertPocketStories(listOf(story))
-
-        dao.insertPocketStories(listOf(updatedStory))
-        val result = dao.getPocketStories()
-
-        assertTrue(result.size == 1)
-        assertEquals(story, result[0])
-    }
-
-    @Test
-    fun `GIVEN a story with the same url exists WHEN another story with updated imageUrl is tried to be inserted THEN don't update the table`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketStory
-        val updatedStory = story.copy(
-            imageUrl = "updated" + story.imageUrl,
-        )
-        dao.insertPocketStories(listOf(story))
-
-        dao.insertPocketStories(listOf(updatedStory))
-        val result = dao.getPocketStories()
-
-        assertEquals(listOf(story), result)
-    }
-
-    @Test
-    fun `GIVEN a story with the same url exists WHEN another story with updated publisher is tried to be inserted THEN don't update the table`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketStory
-        val updatedStory = story.copy(
-            publisher = "updated" + story.publisher,
-        )
-        dao.insertPocketStories(listOf(story))
-
-        dao.insertPocketStories(listOf(updatedStory))
-        val result = dao.getPocketStories()
-
-        assertEquals(listOf(story), result)
-    }
-
-    @Test
-    fun `GIVEN a story with the same url exists WHEN another story with updated category is tried to be inserted THEN don't update the table`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketStory
-        val updatedStory = story.copy(
-            category = "updated" + story.category,
-        )
-        dao.insertPocketStories(listOf(story))
-
-        dao.insertPocketStories(listOf(updatedStory))
-        val result = dao.getPocketStories()
-
-        assertEquals(listOf(story), result)
-    }
-
-    @Test
-    fun `GIVEN a story with the same url exists WHEN another story with updated timeToRead is tried to be inserted THEN don't update the table`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketStory
-        val updatedStory = story.copy(
-            timesShown = story.timesShown * 2,
-        )
-        dao.insertPocketStories(listOf(story))
-
-        dao.insertPocketStories(listOf(updatedStory))
-        val result = dao.getPocketStories()
-
-        assertEquals(listOf(story), result)
-    }
-
-    @Test
-    fun `GIVEN a story with the same url exists WHEN another story with updated timesShown is tried to be inserted THEN don't update the table`() = runTest {
-        val story = PocketTestResources.dbExpectedPocketStory
-        val updatedStory = story.copy(
-            timesShown = story.timesShown * 2,
-        )
-        dao.insertPocketStories(listOf(story))
-
-        dao.insertPocketStories(listOf(updatedStory))
-        val result = dao.getPocketStories()
-
-        assertEquals(listOf(story), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to delete some THEN remove them from the table`() = runTest {
-        val story1 = PocketTestResources.dbExpectedPocketStory
-        val story2 = PocketTestResources.dbExpectedPocketStory.copy(url = story1.url + "2")
-        val story3 = PocketTestResources.dbExpectedPocketStory.copy(url = story1.url + "3")
-        val story4 = PocketTestResources.dbExpectedPocketStory.copy(url = story1.url + "4")
-        dao.insertPocketStories(listOf(story1, story2, story3, story4))
-
-        dao.delete(listOf(story2, story4))
-        val result = dao.getPocketStories()
-
-        assertEquals(listOf(story1, story3), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to delete one not present in the table THEN don't update the table`() = runTest {
-        val story1 = PocketTestResources.dbExpectedPocketStory
-        val story2 = PocketTestResources.dbExpectedPocketStory.copy(url = story1.url + "2")
-        val story3 = PocketTestResources.dbExpectedPocketStory.copy(url = story1.url + "3")
-        val story4 = PocketTestResources.dbExpectedPocketStory.copy(url = story1.url + "4")
-        dao.insertPocketStories(listOf(story1, story2, story3))
-
-        dao.delete(listOf(story4))
-        val result = dao.getPocketStories()
-
-        assertEquals(listOf(story1, story2, story3), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to update timesShown for one THEN update only that story`() = runTest {
-        val story1 = PocketTestResources.dbExpectedPocketStory
-        val story2 = PocketTestResources.dbExpectedPocketStory.copy(
-            url = story1.url + "2",
-            timesShown = story1.timesShown * 2,
-        )
-        val story3 = PocketTestResources.dbExpectedPocketStory.copy(
-            url = story1.url + "3",
-            timesShown = story1.timesShown * 3,
-        )
-        val story4 = PocketTestResources.dbExpectedPocketStory.copy(
-            url = story1.url + "4",
-            timesShown = story1.timesShown * 4,
-        )
-        val updatedStory2 = PocketLocalStoryTimesShown(story2.url, 222)
-        val updatedStory4 = PocketLocalStoryTimesShown(story4.url, 444)
-        dao.insertPocketStories(listOf(story1, story2, story3, story4))
-
-        dao.updateTimesShown(listOf(updatedStory2, updatedStory4))
-        val result = dao.getPocketStories()
-
-        assertEquals(
-            listOf(
-                story1,
-                story2.copy(timesShown = 222),
-                story3,
-                story4.copy(timesShown = 444),
-            ),
-            result,
-        )
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to update timesShown for one not present in the table THEN don't update the table`() = runTest {
-        val story1 = PocketTestResources.dbExpectedPocketStory
-        val story2 = PocketTestResources.dbExpectedPocketStory.copy(
-            url = story1.url + "2",
-            timesShown = story1.timesShown * 2,
-        )
-        val story3 = PocketTestResources.dbExpectedPocketStory.copy(
-            url = story1.url + "3",
-            timesShown = story1.timesShown * 3,
-        )
-        val story4 = PocketTestResources.dbExpectedPocketStory.copy(
-            url = story1.url + "4",
-            timesShown = story1.timesShown * 4,
-        )
-        val otherStoryUpdateDetails = PocketLocalStoryTimesShown("differentUrl", 111)
-        dao.insertPocketStories(listOf(story1, story2, story3, story4))
-
-        dao.updateTimesShown(listOf(otherStoryUpdateDetails))
-        val result = dao.getPocketStories()
-
-        assertEquals(listOf(story1, story2, story3, story4), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN remove from table all stories not found in the new list`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketStory
-        val story2 = PocketTestResources.dbExpectedPocketStory.copy(url = story1.url + "2")
-        val story3 = PocketTestResources.dbExpectedPocketStory.copy(url = story1.url + "3")
-        val story4 = PocketTestResources.dbExpectedPocketStory.copy(url = story1.url + "4")
-        dao.insertPocketStories(listOf(story1, story2, story3, story4))
-
-        dao.cleanOldAndInsertNewPocketStories(listOf(story2, story4))
-        val result = dao.getPocketStories()
-
-        assertEquals(listOf(story2, story4), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN update stories with new urls`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketStory
-        val story2 = PocketTestResources.dbExpectedPocketStory.copy(url = story1.url + "2")
-        val updatedStory1 = story1.copy(
-            url = "updated" + story1.url,
-        )
-        dao.insertPocketStories(listOf(story1, story2))
-
-        dao.cleanOldAndInsertNewPocketStories(listOf(updatedStory1, story2))
-        val result = dao.getPocketStories()
-
-        // Order gets reversed because the original story is replaced and another one is added.
-        assertEquals(listOf(story2, updatedStory1), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN update stories with new image urls`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketStory
-        val story2 = PocketTestResources.dbExpectedPocketStory.copy(url = story1.url + "2")
-        val updatedStory2 = story2.copy(
-            imageUrl = "updated" + story2.url,
-        )
-        dao.insertPocketStories(listOf(story1, story2))
-
-        dao.cleanOldAndInsertNewPocketStories(listOf(story1, updatedStory2))
-        val result = dao.getPocketStories()
-
-        assertEquals(listOf(story1, updatedStory2), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN don't update story if only title changed`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketStory
-        val story2 = PocketTestResources.dbExpectedPocketStory.copy(url = story1.url + "2")
-        val updatedStory1 = story1.copy(
-            title = "updated" + story1.title,
-        )
-        dao.insertPocketStories(listOf(story1, story2))
-
-        dao.cleanOldAndInsertNewPocketStories(listOf(updatedStory1, story2))
-        val result = dao.getPocketStories()
-
-        assertEquals(listOf(story1, story2), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN don't update story if only publisher changed`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketStory
-        val story2 = PocketTestResources.dbExpectedPocketStory.copy(url = story1.url + "2")
-        val updatedStory2 = story2.copy(
-            publisher = "updated" + story2.publisher,
-        )
-        dao.insertPocketStories(listOf(story1, story2))
-
-        dao.cleanOldAndInsertNewPocketStories(listOf(story1, updatedStory2))
-        val result = dao.getPocketStories()
-
-        assertEquals(listOf(story1, story2), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN don't update story if only category changed`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketStory
-        val story2 = PocketTestResources.dbExpectedPocketStory.copy(url = story1.url + "2")
-        val updatedStory1 = story1.copy(
-            category = "updated" + story1.category,
-        )
-        dao.insertPocketStories(listOf(story1, story2))
-
-        dao.cleanOldAndInsertNewPocketStories(listOf(updatedStory1, story2))
-        val result = dao.getPocketStories()
-
-        assertEquals(listOf(story1, story2), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN don't update story if only timeToRead changed`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketStory
-        val story2 = PocketTestResources.dbExpectedPocketStory.copy(url = story1.url + "2")
-        val updatedStory1 = story1.copy(
-            timeToRead = story1.timeToRead * 2,
-        )
-        dao.insertPocketStories(listOf(story1, story2))
-
-        dao.cleanOldAndInsertNewPocketStories(listOf(updatedStory1, story2))
-        val result = dao.getPocketStories()
-
-        assertEquals(listOf(story1, story2), result)
-    }
-
-    @Test
-    fun `GIVEN stories already persisted WHEN asked to clean and insert new ones THEN don't update story if only timesShown changed`() = runTest {
-        setupDatabseForTransactions()
-        val story1 = PocketTestResources.dbExpectedPocketStory
-        val story2 = PocketTestResources.dbExpectedPocketStory.copy(url = story1.url + "2")
-        val updatedStory2 = story2.copy(
-            timesShown = story2.timesShown * 2,
-        )
-        dao.insertPocketStories(listOf(story1, story2))
-
-        dao.cleanOldAndInsertNewPocketStories(listOf(story1, updatedStory2))
-        val result = dao.getPocketStories()
-
-        assertEquals(listOf(story1, story2), result)
-    }
-
-    /**
-     * Sets an executor to be used for database transactions.
-     * Needs to be used along with "runTest" to ensure waiting for transactions to finish but not hang tests.
-     */
-    private fun setupDatabseForTransactions() {
-        database = Room
-            .inMemoryDatabaseBuilder(context, PocketRecommendationsDatabase::class.java)
-            .setTransactionExecutor(executor)
-            .allowMainThreadQueries()
-            .build()
-        dao = database.pocketRecommendationsDao()
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/db/PocketStoryEntityTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/db/PocketStoryEntityTest.kt
deleted file mode 100644
index 66c0f66c30..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/stories/db/PocketStoryEntityTest.kt
+++ /dev/null
@@ -1,23 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.stories.db
-
-import mozilla.components.service.pocket.helpers.assertClassVisibility
-import org.junit.Test
-import kotlin.reflect.KVisibility
-
-class PocketStoryEntityTest {
-    // This is the data type persisted locally. No need to be public
-    @Test
-    fun `GIVEN a PocketLocalStory THEN its visibility is internal`() {
-        assertClassVisibility(PocketStoryEntity::class, KVisibility.INTERNAL)
-    }
-
-    // This is a data type only used in local updates. No need to be public
-    @Test
-    fun `GIVEN a PocketLocalStoryTimesShown THEN its visibility is internal`() {
-        assertClassVisibility(PocketLocalStoryTimesShown::class, KVisibility.INTERNAL)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/update/DeleteSpocsProfileWorkerTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/update/DeleteSpocsProfileWorkerTest.kt
deleted file mode 100644
index ab66365577..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/update/DeleteSpocsProfileWorkerTest.kt
+++ /dev/null
@@ -1,65 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.update
-
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import androidx.work.ListenableWorker.Result
-import androidx.work.await
-import androidx.work.testing.TestListenableWorkerBuilder
-import kotlinx.coroutines.ExperimentalCoroutinesApi
-import mozilla.components.service.pocket.GlobalDependencyProvider
-import mozilla.components.service.pocket.helpers.assertClassVisibility
-import mozilla.components.service.pocket.spocs.SpocsUseCases
-import mozilla.components.service.pocket.spocs.SpocsUseCases.DeleteProfile
-import mozilla.components.support.test.mock
-import mozilla.components.support.test.robolectric.testContext
-import mozilla.components.support.test.rule.MainCoroutineRule
-import mozilla.components.support.test.rule.runTestOnMain
-import org.junit.Assert.assertEquals
-import org.junit.Rule
-import org.junit.Test
-import org.junit.runner.RunWith
-import org.mockito.Mockito.doReturn
-import kotlin.reflect.KVisibility.INTERNAL
-
-@ExperimentalCoroutinesApi // for runTestOnMain
-@RunWith(AndroidJUnit4::class)
-class DeleteSpocsProfileWorkerTest {
-    @get:Rule
-    val mainCoroutineRule = MainCoroutineRule()
-
-    @Test
-    fun `GIVEN a DeleteSpocsProfileWorker THEN its visibility is internal`() {
-        assertClassVisibility(RefreshSpocsWorker::class, INTERNAL)
-    }
-
-    @Test
-    fun `GIVEN a DeleteSpocsProfileWorker WHEN profile deletion is successful THEN return success`() = runTestOnMain {
-        val useCases: SpocsUseCases = mock()
-        val deleteProfileUseCase: DeleteProfile = mock()
-        doReturn(true).`when`(deleteProfileUseCase).invoke()
-        doReturn(deleteProfileUseCase).`when`(useCases).deleteProfile
-        GlobalDependencyProvider.SponsoredStories.initialize(useCases)
-        val worker = TestListenableWorkerBuilder<DeleteSpocsProfileWorker>(testContext).build()
-
-        val result = worker.startWork().await()
-
-        assertEquals(Result.success(), result)
-    }
-
-    @Test
-    fun `GIVEN a DeleteSpocsProfileWorker WHEN profile deletion fails THEN work should be retried`() = runTestOnMain {
-        val useCases: SpocsUseCases = mock()
-        val deleteProfileUseCase: DeleteProfile = mock()
-        doReturn(false).`when`(deleteProfileUseCase).invoke()
-        doReturn(deleteProfileUseCase).`when`(useCases).deleteProfile
-        GlobalDependencyProvider.SponsoredStories.initialize(useCases)
-        val worker = TestListenableWorkerBuilder<DeleteSpocsProfileWorker>(testContext).build()
-
-        val result = worker.startWork().await()
-
-        assertEquals(Result.retry(), result)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/update/PocketStoriesRefreshSchedulerTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/update/PocketStoriesRefreshSchedulerTest.kt
deleted file mode 100644
index 121b8a5145..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/update/PocketStoriesRefreshSchedulerTest.kt
+++ /dev/null
@@ -1,103 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.update
-
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import androidx.work.ExistingPeriodicWorkPolicy
-import androidx.work.NetworkType
-import androidx.work.PeriodicWorkRequest
-import androidx.work.WorkManager
-import mozilla.components.lib.fetch.httpurlconnection.HttpURLConnectionClient
-import mozilla.components.service.pocket.PocketStoriesConfig
-import mozilla.components.service.pocket.helpers.assertClassVisibility
-import mozilla.components.service.pocket.update.RefreshPocketWorker.Companion.REFRESH_WORK_TAG
-import mozilla.components.support.base.worker.Frequency
-import mozilla.components.support.test.any
-import mozilla.components.support.test.mock
-import mozilla.components.support.test.robolectric.testContext
-import org.junit.Assert.assertFalse
-import org.junit.Assert.assertTrue
-import org.junit.Test
-import org.junit.runner.RunWith
-import org.mockito.Mockito
-import org.mockito.Mockito.doReturn
-import org.mockito.Mockito.spy
-import org.mockito.Mockito.verify
-import java.util.concurrent.TimeUnit
-import kotlin.reflect.KVisibility
-
-@RunWith(AndroidJUnit4::class)
-class PocketStoriesRefreshSchedulerTest {
-    @Test
-    fun `GIVEN a PocketStoriesRefreshScheduler THEN its visibility is internal`() {
-        assertClassVisibility(PocketStoriesRefreshScheduler::class, KVisibility.INTERNAL)
-    }
-
-    @Test
-    fun `GIVEN a PocketStoriesRefreshScheduler WHEN schedulePeriodicRefreshes THEN a RefreshPocketWorker is created and enqueued`() {
-        val client: HttpURLConnectionClient = mock()
-        val scheduler = spy(
-            PocketStoriesRefreshScheduler(
-                PocketStoriesConfig(
-                    client,
-                    Frequency(1, TimeUnit.HOURS),
-                ),
-            ),
-        )
-        val workManager = mock<WorkManager>()
-        val worker = mock<PeriodicWorkRequest>()
-        doReturn(workManager).`when`(scheduler).getWorkManager(any())
-        doReturn(worker).`when`(scheduler).createPeriodicWorkerRequest(any())
-
-        scheduler.schedulePeriodicRefreshes(testContext)
-
-        verify(workManager).enqueueUniquePeriodicWork(REFRESH_WORK_TAG, ExistingPeriodicWorkPolicy.KEEP, worker)
-    }
-
-    @Test
-    fun `GIVEN a PocketStoriesRefreshScheduler WHEN stopPeriodicRefreshes THEN it should cancel all unfinished work`() {
-        val scheduler = spy(PocketStoriesRefreshScheduler(mock()))
-        val workManager = mock<WorkManager>()
-        doReturn(workManager).`when`(scheduler).getWorkManager(any())
-
-        scheduler.stopPeriodicRefreshes(testContext)
-
-        verify(workManager).cancelAllWorkByTag(REFRESH_WORK_TAG)
-        verify(workManager, Mockito.never()).cancelAllWork()
-    }
-
-    @Test
-    fun `GIVEN a PocketStoriesRefreshScheduler WHEN createPeriodicWorkerRequest THEN a properly configured PeriodicWorkRequest is returned`() {
-        val scheduler = spy(PocketStoriesRefreshScheduler(mock()))
-
-        val result = scheduler.createPeriodicWorkerRequest(
-            Frequency(1, TimeUnit.HOURS),
-        )
-
-        verify(scheduler).getWorkerConstrains()
-        assertTrue(result.workSpec.intervalDuration == TimeUnit.HOURS.toMillis(1))
-        assertFalse(result.workSpec.constraints.requiresBatteryNotLow())
-        assertFalse(result.workSpec.constraints.requiresCharging())
-        assertFalse(result.workSpec.constraints.hasContentUriTriggers())
-        assertFalse(result.workSpec.constraints.requiresStorageNotLow())
-        assertFalse(result.workSpec.constraints.requiresDeviceIdle())
-        assertTrue(result.workSpec.constraints.requiredNetworkType == NetworkType.CONNECTED)
-        assertTrue(result.tags.contains(REFRESH_WORK_TAG))
-    }
-
-    @Test
-    fun `GIVEN PocketStoriesRefreshScheduler THEN Worker constraints should be to have Internet`() {
-        val scheduler = PocketStoriesRefreshScheduler(mock())
-
-        val result = scheduler.getWorkerConstrains()
-
-        assertFalse(result.requiresBatteryNotLow())
-        assertFalse(result.requiresCharging())
-        assertFalse(result.hasContentUriTriggers())
-        assertFalse(result.requiresStorageNotLow())
-        assertFalse(result.requiresDeviceIdle())
-        assertTrue(result.requiredNetworkType == NetworkType.CONNECTED)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/update/RefreshPocketWorkerTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/update/RefreshPocketWorkerTest.kt
deleted file mode 100644
index 3691fb76a5..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/update/RefreshPocketWorkerTest.kt
+++ /dev/null
@@ -1,64 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.update
-
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import androidx.work.ListenableWorker
-import androidx.work.await
-import androidx.work.testing.TestListenableWorkerBuilder
-import kotlinx.coroutines.ExperimentalCoroutinesApi
-import mozilla.components.service.pocket.GlobalDependencyProvider
-import mozilla.components.service.pocket.helpers.assertClassVisibility
-import mozilla.components.service.pocket.stories.PocketStoriesUseCases
-import mozilla.components.service.pocket.stories.PocketStoriesUseCases.RefreshPocketStories
-import mozilla.components.support.test.mock
-import mozilla.components.support.test.robolectric.testContext
-import mozilla.components.support.test.rule.MainCoroutineRule
-import mozilla.components.support.test.rule.runTestOnMain
-import org.junit.Assert.assertEquals
-import org.junit.Rule
-import org.junit.Test
-import org.junit.runner.RunWith
-import org.mockito.Mockito.doReturn
-import kotlin.reflect.KVisibility
-
-@ExperimentalCoroutinesApi // for runTestOnMain
-@RunWith(AndroidJUnit4::class)
-class RefreshPocketWorkerTest {
-
-    @get:Rule
-    val mainCoroutineRule = MainCoroutineRule()
-
-    @Test
-    fun `GIVEN a RefreshPocketWorker THEN its visibility is internal`() {
-        assertClassVisibility(RefreshPocketWorker::class, KVisibility.INTERNAL)
-    }
-
-    @Test
-    fun `GIVEN a RefreshPocketWorker WHEN stories are refreshed successfully THEN return success`() = runTestOnMain {
-        val useCases: PocketStoriesUseCases = mock()
-        val refreshStoriesUseCase: RefreshPocketStories = mock()
-        doReturn(true).`when`(refreshStoriesUseCase).invoke()
-        doReturn(refreshStoriesUseCase).`when`(useCases).refreshStories
-        GlobalDependencyProvider.RecommendedStories.initialize(useCases)
-        val worker = TestListenableWorkerBuilder<RefreshPocketWorker>(testContext).build()
-
-        val result = worker.startWork().await()
-        assertEquals(ListenableWorker.Result.success(), result)
-    }
-
-    @Test
-    fun `GIVEN a RefreshPocketWorker WHEN stories are could not be refreshed THEN work should be retried`() = runTestOnMain {
-        val useCases: PocketStoriesUseCases = mock()
-        val refreshStoriesUseCase: RefreshPocketStories = mock()
-        doReturn(false).`when`(refreshStoriesUseCase).invoke()
-        doReturn(refreshStoriesUseCase).`when`(useCases).refreshStories
-        GlobalDependencyProvider.RecommendedStories.initialize(useCases)
-        val worker = TestListenableWorkerBuilder<RefreshPocketWorker>(testContext).build()
-
-        val result = worker.startWork().await()
-        assertEquals(ListenableWorker.Result.retry(), result)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/update/RefreshSpocsWorkerTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/update/RefreshSpocsWorkerTest.kt
deleted file mode 100644
index 89ea044add..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/update/RefreshSpocsWorkerTest.kt
+++ /dev/null
@@ -1,64 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.update
-
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import androidx.work.ListenableWorker
-import androidx.work.await
-import androidx.work.testing.TestListenableWorkerBuilder
-import kotlinx.coroutines.ExperimentalCoroutinesApi
-import mozilla.components.service.pocket.GlobalDependencyProvider
-import mozilla.components.service.pocket.helpers.assertClassVisibility
-import mozilla.components.service.pocket.spocs.SpocsUseCases
-import mozilla.components.service.pocket.spocs.SpocsUseCases.RefreshSponsoredStories
-import mozilla.components.support.test.mock
-import mozilla.components.support.test.robolectric.testContext
-import mozilla.components.support.test.rule.MainCoroutineRule
-import mozilla.components.support.test.rule.runTestOnMain
-import org.junit.Assert.assertEquals
-import org.junit.Rule
-import org.junit.Test
-import org.junit.runner.RunWith
-import org.mockito.Mockito.doReturn
-import kotlin.reflect.KVisibility.INTERNAL
-
-@ExperimentalCoroutinesApi // for runTestOnMain
-@RunWith(AndroidJUnit4::class)
-class RefreshSpocsWorkerTest {
-
-    @get:Rule
-    val mainCoroutineRule = MainCoroutineRule()
-
-    @Test
-    fun `GIVEN a RefreshSpocsWorker THEN its visibility is internal`() {
-        assertClassVisibility(RefreshSpocsWorker::class, INTERNAL)
-    }
-
-    @Test
-    fun `GIVEN a RefreshSpocsWorker WHEN stories are refreshed successfully THEN return success`() = runTestOnMain {
-        val useCases: SpocsUseCases = mock()
-        val refreshStoriesUseCase: RefreshSponsoredStories = mock()
-        doReturn(true).`when`(refreshStoriesUseCase).invoke()
-        doReturn(refreshStoriesUseCase).`when`(useCases).refreshStories
-        GlobalDependencyProvider.SponsoredStories.initialize(useCases)
-        val worker = TestListenableWorkerBuilder<RefreshSpocsWorker>(testContext).build()
-
-        val result = worker.startWork().await()
-        assertEquals(ListenableWorker.Result.success(), result)
-    }
-
-    @Test
-    fun `GIVEN a RefreshSpocsWorker WHEN stories are could not be refreshed THEN work should be retried`() = runTestOnMain {
-        val useCases: SpocsUseCases = mock()
-        val refreshStoriesUseCase: RefreshSponsoredStories = mock()
-        doReturn(false).`when`(refreshStoriesUseCase).invoke()
-        doReturn(refreshStoriesUseCase).`when`(useCases).refreshStories
-        GlobalDependencyProvider.SponsoredStories.initialize(useCases)
-        val worker = TestListenableWorkerBuilder<RefreshSpocsWorker>(testContext).build()
-
-        val result = worker.startWork().await()
-        assertEquals(ListenableWorker.Result.retry(), result)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/update/SpocsRefreshSchedulerTest.kt b/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/update/SpocsRefreshSchedulerTest.kt
deleted file mode 100644
index 70194c2939..0000000000
--- a/android-components/components/service/pocket/src/test/java/mozilla/components/service/pocket/update/SpocsRefreshSchedulerTest.kt
+++ /dev/null
@@ -1,161 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package mozilla.components.service.pocket.update
-
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import androidx.work.BackoffPolicy
-import androidx.work.ExistingPeriodicWorkPolicy
-import androidx.work.ExistingWorkPolicy
-import androidx.work.NetworkType
-import androidx.work.OneTimeWorkRequest
-import androidx.work.PeriodicWorkRequest
-import androidx.work.WorkManager
-import mozilla.components.lib.fetch.httpurlconnection.HttpURLConnectionClient
-import mozilla.components.service.pocket.PocketStoriesConfig
-import mozilla.components.service.pocket.helpers.assertClassVisibility
-import mozilla.components.service.pocket.update.DeleteSpocsProfileWorker.Companion.DELETE_SPOCS_PROFILE_WORK_TAG
-import mozilla.components.service.pocket.update.RefreshSpocsWorker.Companion.REFRESH_SPOCS_WORK_TAG
-import mozilla.components.support.base.worker.Frequency
-import mozilla.components.support.test.any
-import mozilla.components.support.test.mock
-import mozilla.components.support.test.robolectric.testContext
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertFalse
-import org.junit.Assert.assertTrue
-import org.junit.Test
-import org.junit.runner.RunWith
-import org.mockito.Mockito
-import org.mockito.Mockito.doReturn
-import org.mockito.Mockito.never
-import org.mockito.Mockito.spy
-import org.mockito.Mockito.verify
-import java.util.concurrent.TimeUnit
-import kotlin.reflect.KVisibility
-
-@RunWith(AndroidJUnit4::class)
-class SpocsRefreshSchedulerTest {
-    @Test
-    fun `GIVEN a spocs refresh scheduler THEN its visibility is internal`() {
-        assertClassVisibility(SpocsRefreshScheduler::class, KVisibility.INTERNAL)
-    }
-
-    @Test
-    fun `GIVEN a spocs refresh scheduler WHEN scheduling stories refresh THEN a RefreshPocketWorker is created and enqueued`() {
-        val client: HttpURLConnectionClient = mock()
-        val scheduler = spy(
-            SpocsRefreshScheduler(
-                PocketStoriesConfig(
-                    client,
-                    Frequency(1, TimeUnit.HOURS),
-                ),
-            ),
-        )
-        val workManager = mock<WorkManager>()
-        val worker = mock<PeriodicWorkRequest>()
-        doReturn(workManager).`when`(scheduler).getWorkManager(any())
-        doReturn(worker).`when`(scheduler).createPeriodicRefreshWorkerRequest(any())
-
-        scheduler.schedulePeriodicRefreshes(testContext)
-
-        verify(workManager).enqueueUniquePeriodicWork(REFRESH_SPOCS_WORK_TAG, ExistingPeriodicWorkPolicy.KEEP, worker)
-    }
-
-    @Test
-    fun `GIVEN a spocs refresh scheduler WHEN stopping stories refresh THEN it should cancel all unfinished work`() {
-        val scheduler = spy(SpocsRefreshScheduler(mock()))
-        val workManager = mock<WorkManager>()
-        doReturn(workManager).`when`(scheduler).getWorkManager(any())
-
-        scheduler.stopPeriodicRefreshes(testContext)
-
-        verify(workManager).cancelAllWorkByTag(REFRESH_SPOCS_WORK_TAG)
-        verify(workManager, Mockito.never()).cancelAllWork()
-    }
-
-    @Test
-    fun `GIVEN a spocs refresh scheduler WHEN scheduling profile deletion THEN a RefreshPocketWorker is created and enqueued`() {
-        val client: HttpURLConnectionClient = mock()
-        val scheduler = spy(
-            SpocsRefreshScheduler(
-                PocketStoriesConfig(
-                    client,
-                    Frequency(1, TimeUnit.HOURS),
-                ),
-            ),
-        )
-        val workManager = mock<WorkManager>()
-        val worker = mock<OneTimeWorkRequest>()
-        doReturn(workManager).`when`(scheduler).getWorkManager(any())
-        doReturn(worker).`when`(scheduler).createOneTimeProfileDeletionWorkerRequest()
-
-        scheduler.scheduleProfileDeletion(testContext)
-
-        verify(workManager).enqueueUniqueWork(DELETE_SPOCS_PROFILE_WORK_TAG, ExistingWorkPolicy.KEEP, worker)
-    }
-
-    @Test
-    fun `GIVEN a spocs refresh scheduler WHEN cancelling profile deletion THEN it should cancel all unfinished work`() {
-        val scheduler = spy(SpocsRefreshScheduler(mock()))
-        val workManager = mock<WorkManager>()
-        doReturn(workManager).`when`(scheduler).getWorkManager(any())
-
-        scheduler.stopProfileDeletion(testContext)
-
-        verify(workManager).cancelAllWorkByTag(DELETE_SPOCS_PROFILE_WORK_TAG)
-        verify(workManager, never()).cancelAllWork()
-    }
-
-    @Test
-    fun `GIVEN a spocs refresh scheduler WHEN creating a periodic worker THEN a properly configured PeriodicWorkRequest is returned`() {
-        val scheduler = spy(SpocsRefreshScheduler(mock()))
-
-        val result = scheduler.createPeriodicRefreshWorkerRequest(
-            Frequency(1, TimeUnit.HOURS),
-        )
-
-        verify(scheduler).getWorkerConstrains()
-        assertTrue(result.workSpec.intervalDuration == TimeUnit.HOURS.toMillis(1))
-        assertFalse(result.workSpec.constraints.requiresBatteryNotLow())
-        assertFalse(result.workSpec.constraints.requiresCharging())
-        assertFalse(result.workSpec.constraints.hasContentUriTriggers())
-        assertFalse(result.workSpec.constraints.requiresStorageNotLow())
-        assertFalse(result.workSpec.constraints.requiresDeviceIdle())
-        assertTrue(result.workSpec.constraints.requiredNetworkType == NetworkType.CONNECTED)
-        assertTrue(result.tags.contains(REFRESH_SPOCS_WORK_TAG))
-    }
-
-    @Test
-    fun `GIVEN a spocs refresh scheduler WHEN creating a one time worker THEN a properly configured OneTimeWorkRequest is returned`() {
-        val scheduler = spy(SpocsRefreshScheduler(mock()))
-
-        val result = scheduler.createOneTimeProfileDeletionWorkerRequest()
-
-        verify(scheduler).getWorkerConstrains()
-        assertEquals(0, result.workSpec.intervalDuration)
-        assertEquals(0, result.workSpec.initialDelay)
-        assertEquals(BackoffPolicy.EXPONENTIAL, result.workSpec.backoffPolicy)
-        assertFalse(result.workSpec.constraints.requiresBatteryNotLow())
-        assertFalse(result.workSpec.constraints.requiresCharging())
-        assertFalse(result.workSpec.constraints.hasContentUriTriggers())
-        assertFalse(result.workSpec.constraints.requiresStorageNotLow())
-        assertFalse(result.workSpec.constraints.requiresDeviceIdle())
-        assertTrue(result.workSpec.constraints.requiredNetworkType == NetworkType.CONNECTED)
-        assertTrue(result.tags.contains(DELETE_SPOCS_PROFILE_WORK_TAG))
-    }
-
-    @Test
-    fun `GIVEN a spocs refresh scheduler THEN Worker constraints should be to have Internet`() {
-        val scheduler = SpocsRefreshScheduler(mock())
-
-        val result = scheduler.getWorkerConstrains()
-
-        assertFalse(result.requiresBatteryNotLow())
-        assertFalse(result.requiresCharging())
-        assertFalse(result.hasContentUriTriggers())
-        assertFalse(result.requiresStorageNotLow())
-        assertFalse(result.requiresDeviceIdle())
-        assertTrue(result.requiredNetworkType == NetworkType.CONNECTED)
-    }
-}
diff --git a/android-components/components/service/pocket/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker b/android-components/components/service/pocket/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker
deleted file mode 100644
index cf1c399ea8..0000000000
--- a/android-components/components/service/pocket/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker
+++ /dev/null
@@ -1,2 +0,0 @@
-mock-maker-inline
-// This allows mocking final classes (classes are final by default in Kotlin)
diff --git a/android-components/components/service/pocket/src/test/resources/pocket/sponsored_stories_response.json b/android-components/components/service/pocket/src/test/resources/pocket/sponsored_stories_response.json
deleted file mode 100644
index 45ca1e5b63..0000000000
--- a/android-components/components/service/pocket/src/test/resources/pocket/sponsored_stories_response.json
+++ /dev/null
@@ -1,98 +0,0 @@
-{
-  "feature_flags": {
-    "spoc_v2": true,
-    "collections": false
-  },
-  "spocs": [
-    {
-      "id": 193815086,
-      "flight_id": 191739319,
-      "campaign_id": 1315172,
-      "title": "Eating Keto Has Never Been So Easy With Green Chef",
-      "url": "https://i.geistm.com/l/GC_7ReasonsKetoV2_Journiest?bcid=601c567ac5b18a0414cce1d4&bhid=624f3ea9adad7604086ac6b3&utm_content=PKT_A_7ReasonsKetoV2_Journiest_40702022_RawMeatballUGC_130Off_601c567ac5b18a0414cce1d4_624f3ea9adad7604086ac6b3&tv=su4&ct=NAT-PK-PROS-130OFF5WEEK-037&utm_medium=DB&utm_source=pocket~geistm&utm_campaign=PKT_A_7ReasonsKetoV2_Journiest_40702022_RawMeatballUGC_130Off",
-      "domain": "journiest.com",
-      "excerpt": "Get Green Chef's Special Spring Offer: ${'$'}130 off plus free shipping.",
-      "priority": 3,
-      "raw_image_src": "https://s.zkcdn.net/Advertisers/a3644de3c18948ffbd9aa43e8f9c7bf0.png",
-      "image_src": "https://img-getpocket.cdn.mozilla.net/direct?url=realUrl.png&resize=w618-h310",
-      "shim": {
-        "click": "193815086ClickShim",
-        "impression": "193815086ImpressionShim",
-        "delete": "193815086DeleteShim",
-        "save": "193815086SaveShim"
-      },
-      "caps": {
-        "lifetime": 50,
-        "campaign": {
-          "count": 10,
-          "period": 86400
-        },
-        "flight": {
-          "count": 10,
-          "period": 86400
-        }
-      },
-      "sponsor": "Green Chef"
-    },
-    {
-      "id": 177986195,
-      "flight_id": 191739667,
-      "campaign_id": 63548984,
-      "title": "This Leading Cash Back Card Is a Slam Dunk if You Want a One-Card Wallet",
-      "url": "https://www.fool.com/the-ascent/credit-cards/landing/discover-it-cash-back-review-v2-csr/?utm_site=theascent&utm_campaign=ta-cc-co-pocket-discb-04012022-5-na-firefox&utm_medium=cpc&utm_source=pocket",
-      "domain": "fool.com",
-      "excerpt": "Make 2022 your year for a one-card wallet.",
-      "priority": 2,
-      "raw_image_src": "https://s.zkcdn.net/Advertisers/359f56a5423c4926ab3aa148e448d839.webp",
-      "image_src": "https://img-getpocket.cdn.mozilla.net/direct?url=https%3A//s.zkcdn.net/Advertisers/359f56a5423c4926ab3aa148e448d839.webp&resize=w618-h310",
-      "shim": {
-        "click": "177986195ClickShim",
-        "impression": "177986195ImpressionShim",
-        "delete": "177986195DeleteShim",
-        "save": "177986195SaveShim"
-      },
-      "caps": {
-        "lifetime": 50,
-        "campaign": {
-          "count": 10,
-          "period": 86400
-        },
-        "flight": {
-          "count": 10,
-          "period": 86400
-        }
-      },
-      "sponsor": "The Ascent"
-    },
-    {
-      "id": 192560056,
-      "flight_id": 189212196,
-      "campaign_id": 65544139,
-      "title": "The Incredible Lawn Hack That Can Make Your Neighbors Green With Envy Over Your Lawn",
-      "url": "https://go.lawnbuddy.org/zf/50/7673?campaign=SUN_Pocket2022&creative=SUN_LawnCompare4-TheIncredibleLawnHackThatCanMakeYourNeighborsGreenWithEnvyOverYourLawn-WithoutSpendingAFortuneOnNewGrassAndWithoutBreakingASweat-20220420",
-      "domain": "go.lawnbuddy.org",
-      "excerpt": "Without spending a fortune on new grass and without breaking a sweat.",
-      "priority": 1,
-      "raw_image_src": "https://s.zkcdn.net/Advertisers/ce16302e184342cda0619c08b7604c9c.jpg",
-      "image_src": "https://img-getpocket.cdn.mozilla.net/direct?url=https%3A//s.zkcdn.net/Advertisers/ce16302e184342cda0619c08b7604c9c.jpg&resize=w618-h310",
-      "shim": {
-        "click": "192560056ClickShim",
-        "impression": "192560056ImpressionShim",
-        "delete": "192560056DeleteShim",
-        "save": "192560056SaveShim"
-      },
-      "caps": {
-        "lifetime": 50,
-        "campaign": {
-          "count": 10,
-          "period": 86400
-        },
-        "flight": {
-          "count": 10,
-          "period": 86400
-        }
-      },
-      "sponsor": "Sunday"
-    }
-  ]
-}
diff --git a/android-components/components/service/pocket/src/test/resources/pocket/stories_recommendations_response.json b/android-components/components/service/pocket/src/test/resources/pocket/stories_recommendations_response.json
deleted file mode 100644
index da2b9a2953..0000000000
--- a/android-components/components/service/pocket/src/test/resources/pocket/stories_recommendations_response.json
+++ /dev/null
@@ -1,44 +0,0 @@
-{
-    "recommendations": [
-        {
-            "category": "general",
-            "url": "https://getpocket.com/explore/item/how-to-remember-anything-you-really-want-to-remember-backed-by-science",
-            "title": "How to Remember Anything You Really Want to Remember, Backed by Science",
-            "imageUrl": "https://img-getpocket.cdn.mozilla.net/{wh}/filters:format(jpeg):quality(60):no_upscale():strip_exif()/https%3A%2F%2Fpocket-image-cache.com%2F1200x%2Ffilters%3Aformat(jpg)%3Aextract_focal()%2Fhttps%253A%252F%252Fwww.incimages.com%252Fuploaded_files%252Fimage%252F1920x1080%252Fgetty-862457080_394628.jpg",
-            "publisher": "Pocket",
-            "timeToRead": 3
-        },
-        {
-            "category": "general",
-            "url": "https://www.thecut.com/article/i-dont-want-to-be-like-a-family-with-my-co-workers.html",
-            "title": "‘I Don’t Want to Be Like a Family With My Co-Workers’",
-            "imageUrl": "https://img-getpocket.cdn.mozilla.net/{wh}/filters:format(jpeg):quality(60):no_upscale():strip_exif()/https%3A%2F%2Fpyxis.nymag.com%2Fv1%2Fimgs%2Fac8%2Fd22%2F315cd0cf1e3a43edfe0e0548f2edbcb1a1-ask-a-boss.1x.rsocial.w1200.jpg",
-            "publisher": "The Cut",
-            "timeToRead": 5
-        },
-        {
-            "category": "general",
-            "url": "https://www.newyorker.com/news/q-and-a/how-america-failed-in-afghanistan",
-            "title": "How America Failed in Afghanistan",
-            "imageUrl": "https://img-getpocket.cdn.mozilla.net/{wh}/filters:format(jpeg):quality(60):no_upscale():strip_exif()/https%3A%2F%2Fmedia.newyorker.com%2Fphotos%2F6119484157b611aec9c99b43%2F16%3A9%2Fw_1280%2Cc_limit%2FChotiner-Afghanistan01.jpg",
-            "publisher": "The New Yorker",
-            "timeToRead": 14
-        },
-        {
-            "category": "general",
-            "url": "https://www.technologyreview.com/2021/08/15/1031804/digital-beauty-filters-photoshop-photo-editing-colorism-racism/",
-            "title": "How digital beauty filters perpetuate colorism",
-            "imageUrl": "https://img-getpocket.cdn.mozilla.net/{wh}/filters:format(jpeg):quality(60):no_upscale():strip_exif()/https%3A%2F%2Fwp.technologyreview.com%2Fwp-content%2Fuploads%2F2021%2F08%2FBeautyScoreColorism.jpg%3Fresize%3D1200%2C600",
-            "publisher": "MIT Technology Review",
-            "timeToRead": 11
-        },
-        {
-            "category": "general",
-            "url": "https://getpocket.com/explore/item/how-to-get-rid-of-black-mold-naturally",
-            "title": "How to Get Rid of Black Mold Naturally",
-            "imageUrl": "https://img-getpocket.cdn.mozilla.net/{wh}/filters:format(jpeg):quality(60):no_upscale():strip_exif()/https%3A%2F%2Fpocket-image-cache.com%2F1200x%2Ffilters%3Aformat(jpg)%3Aextract_focal()%2Fhttps%253A%252F%252Fpocket-syndicated-images.s3.amazonaws.com%252Farticles%252F6757%252F1628024495_6109ae86db6cc.png",
-            "publisher": "Pocket",
-            "timeToRead": 4
-        }
-     ]
-}
diff --git a/android-components/components/service/pocket/src/test/resources/pocket/story.json b/android-components/components/service/pocket/src/test/resources/pocket/story.json
deleted file mode 100644
index a8b2d9bd70..0000000000
--- a/android-components/components/service/pocket/src/test/resources/pocket/story.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-  "category": "career",
-  "url": "https://getpocket.com/explore/item/this-scheduling-strategy-can-save-you-hours-per-week",
-  "title": "This Scheduling Strategy Can Save You Hours Per Week",
-  "imageUrl": "https://img-getpocket.cdn.mozilla.net/{wh}/filters:format(jpeg):quality(60):no_upscale():strip_exif()/https%3A%2F%2Fpocket-image-cache.com%2F1200x%2Ffilters%3Aformat(jpg)%3Aextract_focal()%2Fhttps%253A%252F%252Fpocket-syndicated-images.s3.amazonaws.com%252Farticles%252F6668%252F1627343665_GettyImages-1189531274.jpg",
-  "publisher": "Pocket",
-  "timeToRead": 3
-}
diff --git a/android-components/components/service/pocket/src/test/resources/pocket/story_recommendation_response.json b/android-components/components/service/pocket/src/test/resources/pocket/story_recommendation_response.json
deleted file mode 100644
index 8fa6e33ad7..0000000000
--- a/android-components/components/service/pocket/src/test/resources/pocket/story_recommendation_response.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-    "recommendations": [
-        {
-            "category": "science",
-            "url": "https://getpocket.com/explore/item/you-think-you-know-what-blue-is-but-you-have-no-idea",
-            "title": "You Think You Know What Blue Is, But You Have No Idea",
-            "imageUrl": "https://img-getpocket.cdn.mozilla.net/{wh}/filters:format(jpeg):quality(60):no_upscale():strip_exif()/https%3A%2F%2Fpocket-image-cache.com%2F1200x%2Ffilters%3Aformat(jpg)%3Aextract_focal()%2Fhttps%253A%252F%252Fpocket-syndicated-images.s3.amazonaws.com%252Farticles%252F3713%252F1584373694_GettyImages-83522858.jpg",
-            "publisher": "Pocket",
-            "timeToRead": 3
-        }
-    ]
-}
diff --git a/android-components/components/service/pocket/src/test/resources/robolectric.properties b/android-components/components/service/pocket/src/test/resources/robolectric.properties
deleted file mode 100644
index 932b01b9eb..0000000000
--- a/android-components/components/service/pocket/src/test/resources/robolectric.properties
+++ /dev/null
@@ -1 +0,0 @@
-sdk=28
diff --git a/fenix/.buildconfig.yml b/fenix/.buildconfig.yml
index f582b9d06d..6cc65f65c6 100644
--- a/fenix/.buildconfig.yml
+++ b/fenix/.buildconfig.yml
@@ -71,7 +71,6 @@ projects:
     - service-glean
     - service-location
     - service-nimbus
-    - service-pocket
     - service-sync-autofill
     - service-sync-logins
     - support-base
diff --git a/fenix/app/build.gradle b/fenix/app/build.gradle
index db786e75e3..776daef76d 100644
--- a/fenix/app/build.gradle
+++ b/fenix/app/build.gradle
@@ -447,21 +447,6 @@ android.applicationVariants.configureEach { variant ->
         println("--")
     }
 
-// -------------------------------------------------------------------------------------------------
-// BuildConfig: Set the Pocket consumer key from a local file if it exists
-// -------------------------------------------------------------------------------------------------
-
-    print("Pocket consumer key: ")
-
-    try {
-        def token = new File("${rootDir}/.pocket_consumer_key").text.trim()
-        buildConfigField 'String', 'POCKET_CONSUMER_KEY', '"' + token + '"'
-        println "(Added from .pocket_consumer_key file)"
-    } catch (FileNotFoundException ignored) {
-        buildConfigField 'String', 'POCKET_CONSUMER_KEY', '""'
-        println("--")
-    }
-
 // -------------------------------------------------------------------------------------------------
 // BuildConfig: Set flag to disable LeakCanary in debug (on CI builds)
 // -------------------------------------------------------------------------------------------------
@@ -581,7 +566,6 @@ dependencies {
     implementation project(':feature-webnotifications')
     implementation project(':feature-webcompat-reporter')
 
-    implementation project(':service-pocket')
     implementation project(':service-contile')
     implementation project(':service-digitalassetlinks')
     implementation project(':service-sync-autofill')
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/HomeActivity.kt b/fenix/app/src/main/java/org/mozilla/fenix/HomeActivity.kt
index 69d8ffb8d9..1010e09e9e 100644
--- a/fenix/app/src/main/java/org/mozilla/fenix/HomeActivity.kt
+++ b/fenix/app/src/main/java/org/mozilla/fenix/HomeActivity.kt
@@ -384,22 +384,6 @@ open class HomeActivity : LocaleAwareAppCompatActivity(), NavHostActivity {
             components.useCases.searchUseCases.restoreHiddenSearchEngines.invoke()
         }
 
-        // To assess whether the Pocket stories are to be downloaded or not multiple SharedPreferences
-        // are read possibly needing to load them on the current thread. Move that to a background thread.
-        lifecycleScope.launch(IO) {
-            if (settings().showPocketRecommendationsFeature) {
-                components.core.pocketStoriesService.startPeriodicStoriesRefresh()
-            }
-            if (settings().showPocketSponsoredStories) {
-                components.core.pocketStoriesService.startPeriodicSponsoredStoriesRefresh()
-                // If the secret setting for sponsored stories parameters is set,
-                // force refresh the sponsored Pocket stories.
-                if (settings().useCustomConfigurationForSponsoredStories) {
-                    components.core.pocketStoriesService.refreshSponsoredStories()
-                }
-            }
-        }
-
         components.backgroundServices.accountManagerAvailableQueue.runIfReadyOrQueue {
             lifecycleScope.launch(IO) {
                 // If we're authenticated, kick-off a sync and a device state refresh.
@@ -622,8 +606,6 @@ open class HomeActivity : LocaleAwareAppCompatActivity(), NavHostActivity {
         )
 
         components.core.contileTopSitesUpdater.stopPeriodicWork()
-        components.core.pocketStoriesService.stopPeriodicStoriesRefresh()
-        components.core.pocketStoriesService.stopPeriodicSponsoredStoriesRefresh()
         privateNotificationObserver?.stop()
         components.notificationsDelegate.unBindActivity(this)
         stopMediaSession()
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/components/Components.kt b/fenix/app/src/main/java/org/mozilla/fenix/components/Components.kt
index fb5dc10724..bb91b8abad 100644
--- a/fenix/app/src/main/java/org/mozilla/fenix/components/Components.kt
+++ b/fenix/app/src/main/java/org/mozilla/fenix/components/Components.kt
@@ -34,7 +34,6 @@ import org.mozilla.fenix.ext.components
 import org.mozilla.fenix.ext.filterState
 import org.mozilla.fenix.ext.settings
 import org.mozilla.fenix.ext.sort
-import org.mozilla.fenix.home.PocketUpdatesMiddleware
 import org.mozilla.fenix.home.blocklist.BlocklistHandler
 import org.mozilla.fenix.home.blocklist.BlocklistMiddleware
 import org.mozilla.fenix.messaging.state.MessagingMiddleware
@@ -215,10 +214,6 @@ class Components(private val context: Context) {
             ).run { filterState(blocklistHandler) },
             middlewares = listOf(
                 BlocklistMiddleware(blocklistHandler),
-                PocketUpdatesMiddleware(
-                    core.pocketStoriesService,
-                    context.pocketStoriesSelectedCategoriesDataStore,
-                ),
                 MessagingMiddleware(
                     messagingStorage = analytics.messagingStorage,
                 ),
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt b/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
index b9a73a5df0..960701467b 100644
--- a/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
+++ b/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
@@ -75,10 +75,6 @@ import mozilla.components.service.digitalassetlinks.local.StatementApi
 import mozilla.components.service.digitalassetlinks.local.StatementRelationChecker
 import mozilla.components.service.location.LocationService
 import mozilla.components.service.location.MozillaLocationService
-import mozilla.components.service.pocket.PocketStoriesConfig
-import mozilla.components.service.pocket.PocketStoriesRequestConfig
-import mozilla.components.service.pocket.PocketStoriesService
-import mozilla.components.service.pocket.Profile
 import mozilla.components.service.sync.autofill.AutofillCreditCardsAddressesStorage
 import mozilla.components.service.sync.logins.SyncableLoginsStorage
 import mozilla.components.support.base.worker.Frequency
@@ -427,28 +423,6 @@ class Core(
 
     val pinnedSiteStorage by lazyMonitored { PinnedSiteStorage(context) }
 
-    @Suppress("MagicNumber")
-    val pocketStoriesConfig by lazyMonitored {
-        PocketStoriesConfig(
-            client,
-            Frequency(4, TimeUnit.HOURS),
-            Profile(
-                profileId = UUID.fromString(context.settings().pocketSponsoredStoriesProfileId),
-                appId = BuildConfig.POCKET_CONSUMER_KEY,
-            ),
-            sponsoredStoriesParams = if (context.settings().useCustomConfigurationForSponsoredStories) {
-                PocketStoriesRequestConfig(
-                    context.settings().pocketSponsoredStoriesSiteId,
-                    context.settings().pocketSponsoredStoriesCountry,
-                    context.settings().pocketSponsoredStoriesCity,
-                )
-            } else {
-                PocketStoriesRequestConfig()
-            },
-        )
-    }
-    val pocketStoriesService by lazyMonitored { PocketStoriesService(context, pocketStoriesConfig) }
-
     val contileTopSitesProvider by lazyMonitored {
         ContileTopSitesProvider(
             context = context,
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/components/appstate/AppAction.kt b/fenix/app/src/main/java/org/mozilla/fenix/components/appstate/AppAction.kt
index 6a2bb18e0b..8c794f802f 100644
--- a/fenix/app/src/main/java/org/mozilla/fenix/components/appstate/AppAction.kt
+++ b/fenix/app/src/main/java/org/mozilla/fenix/components/appstate/AppAction.kt
@@ -10,13 +10,9 @@ import mozilla.components.lib.crash.Crash.NativeCodeCrash
 import mozilla.components.lib.state.Action
 import mozilla.components.service.nimbus.messaging.Message
 import mozilla.components.service.nimbus.messaging.MessageSurfaceId
-import mozilla.components.service.pocket.PocketStory
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStory
 import org.mozilla.fenix.browser.StandardSnackbarError
 import org.mozilla.fenix.browser.browsingmode.BrowsingMode
 import org.mozilla.fenix.components.AppStore
-import org.mozilla.fenix.home.pocket.PocketRecommendedStoriesCategory
-import org.mozilla.fenix.home.pocket.PocketRecommendedStoriesSelectedCategory
 import org.mozilla.fenix.home.recentbookmarks.RecentBookmark
 import org.mozilla.fenix.home.recentsyncedtabs.RecentSyncedTab
 import org.mozilla.fenix.home.recentsyncedtabs.RecentSyncedTabState
@@ -66,31 +62,6 @@ sealed class AppAction : Action {
     data class RemoveRecentHistoryHighlight(val highlightUrl: String) : AppAction()
     data class DisbandSearchGroupAction(val searchTerm: String) : AppAction()
 
-    /**
-     * Indicates the given [categoryName] was selected by the user.
-     */
-    data class SelectPocketStoriesCategory(val categoryName: String) : AppAction()
-
-    /**
-     * Indicates the given [categoryName] was deselected by the user.
-     */
-    data class DeselectPocketStoriesCategory(val categoryName: String) : AppAction()
-
-    /**
-     * Indicates the given [storiesShown] were seen by the user.
-     */
-    data class PocketStoriesShown(val storiesShown: List<PocketStory>) : AppAction()
-
-    /**
-     * Cleans all in-memory data about Pocket stories and categories.
-     */
-    object PocketStoriesClean : AppAction()
-
-    /**
-     * Replaces the current list of Pocket sponsored stories.
-     */
-    data class PocketSponsoredStoriesChange(val sponsoredStories: List<PocketSponsoredStory>) : AppAction()
-
     /**
      * Adds a set of items marked for removal to the app state, to be hidden in the UI.
      */
@@ -101,19 +72,6 @@ sealed class AppAction : Action {
      */
     data class UndoPendingDeletionSet(val historyItems: Set<PendingDeletionHistory>) : AppAction()
 
-    /**
-     * Replaces the list of available Pocket recommended stories categories.
-     */
-    data class PocketStoriesCategoriesChange(val storiesCategories: List<PocketRecommendedStoriesCategory>) :
-        AppAction()
-
-    /**
-     * Restores the list of Pocket recommended stories categories selections.
-     */
-    data class PocketStoriesCategoriesSelectionsChange(
-        val storiesCategories: List<PocketRecommendedStoriesCategory>,
-        val categoriesSelected: List<PocketRecommendedStoriesSelectedCategory>,
-    ) : AppAction()
     object RemoveCollectionsPlaceholder : AppAction()
 
     /**
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/components/appstate/AppState.kt b/fenix/app/src/main/java/org/mozilla/fenix/components/appstate/AppState.kt
index 77edd2d016..719d512df9 100644
--- a/fenix/app/src/main/java/org/mozilla/fenix/components/appstate/AppState.kt
+++ b/fenix/app/src/main/java/org/mozilla/fenix/components/appstate/AppState.kt
@@ -9,15 +9,10 @@ import mozilla.components.feature.tab.collections.TabCollection
 import mozilla.components.feature.top.sites.TopSite
 import mozilla.components.lib.crash.Crash.NativeCodeCrash
 import mozilla.components.lib.state.State
-import mozilla.components.service.pocket.PocketStory
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStory
 import org.mozilla.fenix.browser.StandardSnackbarError
 import org.mozilla.fenix.browser.browsingmode.BrowsingMode
 import org.mozilla.fenix.components.appstate.shopping.ShoppingState
 import org.mozilla.fenix.home.HomeFragment
-import org.mozilla.fenix.home.pocket.PocketRecommendedStoriesCategory
-import org.mozilla.fenix.home.pocket.PocketRecommendedStoriesSelectedCategory
 import org.mozilla.fenix.home.recentbookmarks.RecentBookmark
 import org.mozilla.fenix.home.recentsyncedtabs.RecentSyncedTabState
 import org.mozilla.fenix.home.recenttabs.RecentTab
@@ -70,10 +65,6 @@ data class AppState(
     val recentSyncedTabState: RecentSyncedTabState = RecentSyncedTabState.None,
     val recentBookmarks: List<RecentBookmark> = emptyList(),
     val recentHistory: List<RecentlyVisitedItem> = emptyList(),
-    val pocketStories: List<PocketStory> = emptyList(),
-    val pocketStoriesCategories: List<PocketRecommendedStoriesCategory> = emptyList(),
-    val pocketStoriesCategoriesSelections: List<PocketRecommendedStoriesSelectedCategory> = emptyList(),
-    val pocketSponsoredStories: List<PocketSponsoredStory> = emptyList(),
     val messaging: MessagingState = MessagingState(),
     val pendingDeletionHistoryItems: Set<PendingDeletionHistory> = emptySet(),
     val wallpaperState: WallpaperState = WallpaperState.default,
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/components/appstate/AppStoreReducer.kt b/fenix/app/src/main/java/org/mozilla/fenix/components/appstate/AppStoreReducer.kt
index e175301533..5c681cd7d0 100644
--- a/fenix/app/src/main/java/org/mozilla/fenix/components/appstate/AppStoreReducer.kt
+++ b/fenix/app/src/main/java/org/mozilla/fenix/components/appstate/AppStoreReducer.kt
@@ -5,14 +5,9 @@
 package org.mozilla.fenix.components.appstate
 
 import androidx.annotation.VisibleForTesting
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStory
-import mozilla.components.service.pocket.ext.recordNewImpression
 import org.mozilla.fenix.components.AppStore
 import org.mozilla.fenix.components.appstate.shopping.ShoppingStateReducer
 import org.mozilla.fenix.ext.filterOutTab
-import org.mozilla.fenix.ext.getFilteredStories
-import org.mozilla.fenix.home.pocket.PocketRecommendedStoriesSelectedCategory
 import org.mozilla.fenix.home.recentsyncedtabs.RecentSyncedTabState
 import org.mozilla.fenix.home.recentvisits.RecentlyVisitedItem
 import org.mozilla.fenix.home.recentvisits.RecentlyVisitedItem.RecentHistoryGroup
@@ -105,99 +100,6 @@ internal object AppStoreReducer {
                 it is RecentHistoryGroup && it.title.equals(action.searchTerm, true)
             },
         )
-        is AppAction.SelectPocketStoriesCategory -> {
-            val updatedCategoriesState = state.copy(
-                pocketStoriesCategoriesSelections =
-                state.pocketStoriesCategoriesSelections + PocketRecommendedStoriesSelectedCategory(
-                    name = action.categoryName,
-                ),
-            )
-
-            // Selecting a category means the stories to be displayed needs to also be changed.
-            updatedCategoriesState.copy(
-                pocketStories = updatedCategoriesState.getFilteredStories(),
-            )
-        }
-        is AppAction.DeselectPocketStoriesCategory -> {
-            val updatedCategoriesState = state.copy(
-                pocketStoriesCategoriesSelections = state.pocketStoriesCategoriesSelections.filterNot {
-                    it.name == action.categoryName
-                },
-            )
-
-            // Deselecting a category means the stories to be displayed needs to also be changed.
-            updatedCategoriesState.copy(
-                pocketStories = updatedCategoriesState.getFilteredStories(),
-            )
-        }
-        is AppAction.PocketStoriesCategoriesChange -> {
-            val updatedCategoriesState =
-                state.copy(pocketStoriesCategories = action.storiesCategories)
-            // Whenever categories change stories to be displayed needs to also be changed.
-            updatedCategoriesState.copy(
-                pocketStories = updatedCategoriesState.getFilteredStories(),
-            )
-        }
-        is AppAction.PocketStoriesCategoriesSelectionsChange -> {
-            val updatedCategoriesState = state.copy(
-                pocketStoriesCategories = action.storiesCategories,
-                pocketStoriesCategoriesSelections = action.categoriesSelected,
-            )
-            // Whenever categories change stories to be displayed needs to also be changed.
-            updatedCategoriesState.copy(
-                pocketStories = updatedCategoriesState.getFilteredStories(),
-            )
-        }
-        is AppAction.PocketStoriesClean -> state.copy(
-            pocketStoriesCategories = emptyList(),
-            pocketStoriesCategoriesSelections = emptyList(),
-            pocketStories = emptyList(),
-            pocketSponsoredStories = emptyList(),
-        )
-        is AppAction.PocketSponsoredStoriesChange -> {
-            val updatedStoriesState = state.copy(
-                pocketSponsoredStories = action.sponsoredStories,
-            )
-
-            updatedStoriesState.copy(
-                pocketStories = updatedStoriesState.getFilteredStories(),
-            )
-        }
-        is AppAction.PocketStoriesShown -> {
-            var updatedCategories = state.pocketStoriesCategories
-            action.storiesShown.filterIsInstance<PocketRecommendedStory>().forEach { shownStory ->
-                updatedCategories = updatedCategories.map { category ->
-                    when (category.name == shownStory.category) {
-                        true -> {
-                            category.copy(
-                                stories = category.stories.map { story ->
-                                    when (story.title == shownStory.title) {
-                                        true -> story.copy(timesShown = story.timesShown.inc())
-                                        false -> story
-                                    }
-                                },
-                            )
-                        }
-                        false -> category
-                    }
-                }
-            }
-
-            var updatedSponsoredStories = state.pocketSponsoredStories
-            action.storiesShown.filterIsInstance<PocketSponsoredStory>().forEach { shownStory ->
-                updatedSponsoredStories = updatedSponsoredStories.map { story ->
-                    when (story.id == shownStory.id) {
-                        true -> story.recordNewImpression()
-                        false -> story
-                    }
-                }
-            }
-
-            state.copy(
-                pocketStoriesCategories = updatedCategories,
-                pocketSponsoredStories = updatedSponsoredStories,
-            )
-        }
         is AppAction.AddPendingDeletionSet ->
             state.copy(pendingDeletionHistoryItems = state.pendingDeletionHistoryItems + action.historyItems)
 
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/ext/AppState.kt b/fenix/app/src/main/java/org/mozilla/fenix/ext/AppState.kt
index d0491be7f0..ad471ca838 100644
--- a/fenix/app/src/main/java/org/mozilla/fenix/ext/AppState.kt
+++ b/fenix/app/src/main/java/org/mozilla/fenix/ext/AppState.kt
@@ -5,163 +5,11 @@
 package org.mozilla.fenix.ext
 
 import androidx.annotation.VisibleForTesting
-import mozilla.components.service.pocket.PocketStory
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStory
-import mozilla.components.service.pocket.ext.hasFlightImpressionsLimitReached
-import mozilla.components.service.pocket.ext.hasLifetimeImpressionsLimitReached
 import org.mozilla.fenix.components.appstate.AppState
 import org.mozilla.fenix.home.blocklist.BlocklistHandler
-import org.mozilla.fenix.home.pocket.POCKET_STORIES_DEFAULT_CATEGORY_NAME
-import org.mozilla.fenix.home.pocket.PocketRecommendedStoriesCategory
-import org.mozilla.fenix.home.pocket.PocketStory
 import org.mozilla.fenix.home.recentsyncedtabs.RecentSyncedTabState
 import org.mozilla.fenix.utils.Settings
 
-/**
- * Total count of all stories to show irrespective of their type.
- * This is an optimistic value taking into account that fewer than this stories may actually be available.
- */
-@VisibleForTesting
-internal const val POCKET_STORIES_TO_SHOW_COUNT = 8
-
-/**
- * Total count of all sponsored Pocket stories to show.
- * This is an optimistic value taking into account that fewer than this stories may actually be available.
- */
-@VisibleForTesting
-internal const val POCKET_SPONSORED_STORIES_TO_SHOW_COUNT = 2
-
-/**
- * Get the list of stories to be displayed based on the user selected categories.
- *
- * @return a list of [PocketStory]es from the currently selected categories.
- */
-fun AppState.getFilteredStories(): List<PocketStory> {
-    val recommendedStories = when (pocketStoriesCategoriesSelections.isEmpty()) {
-        true -> {
-            pocketStoriesCategories
-                .find { it.name == POCKET_STORIES_DEFAULT_CATEGORY_NAME }
-                ?.stories
-                ?.sortedBy { it.timesShown }
-                ?.take(POCKET_STORIES_TO_SHOW_COUNT) ?: emptyList()
-        }
-        false -> {
-            val oldestSortedCategories = pocketStoriesCategoriesSelections
-                .sortedByDescending { it.selectionTimestamp }
-                .mapNotNull { selectedCategory ->
-                    pocketStoriesCategories.find {
-                        it.name == selectedCategory.name
-                    }
-                }
-
-            val filteredStoriesCount = getFilteredStoriesCount(
-                oldestSortedCategories,
-                POCKET_STORIES_TO_SHOW_COUNT,
-            )
-
-            oldestSortedCategories
-                .flatMap { category ->
-                    category.stories
-                        .sortedBy { it.timesShown }
-                        .take(filteredStoriesCount[category.name]!!)
-                }.take(POCKET_STORIES_TO_SHOW_COUNT)
-        }
-    }
-
-    val sponsoredStories = getFilteredSponsoredStories(
-        stories = pocketSponsoredStories,
-        limit = POCKET_SPONSORED_STORIES_TO_SHOW_COUNT,
-    )
-
-    return combineRecommendedAndSponsoredStories(
-        recommendedStories = recommendedStories,
-        sponsoredStories = sponsoredStories,
-    )
-}
-
-/**
- * Combine all available Pocket recommended and sponsored stories to show at max [POCKET_STORIES_TO_SHOW_COUNT]
- * stories of both types but based on a specific split.
- */
-@VisibleForTesting
-internal fun combineRecommendedAndSponsoredStories(
-    recommendedStories: List<PocketRecommendedStory>,
-    sponsoredStories: List<PocketSponsoredStory>,
-): List<PocketStory> {
-    val recommendedStoriesToShow =
-        POCKET_STORIES_TO_SHOW_COUNT - sponsoredStories.size.coerceAtMost(
-            POCKET_SPONSORED_STORIES_TO_SHOW_COUNT,
-        )
-
-    // Sponsored stories should be shown at position 2 and 8. If possible.
-    return recommendedStories.take(1) +
-        sponsoredStories.take(1) +
-        recommendedStories.take(recommendedStoriesToShow).drop(1) +
-        sponsoredStories.take(2).drop(1)
-}
-
-/**
- * Get how many stories needs to be shown from each currently selected category.
- *
- * @param selectedCategories ordered list of categories from which to return results.
- * @param neededStoriesCount how many stories are intended to be displayed.
- * This impacts the results by guaranteeing an even spread of stories from each category in that stories count.
- *
- * @return a mapping of how many stories are to be shown from each category from [selectedCategories].
- */
-@VisibleForTesting
-@Suppress("ReturnCount", "NestedBlockDepth")
-internal fun getFilteredStoriesCount(
-    selectedCategories: List<PocketRecommendedStoriesCategory>,
-    neededStoriesCount: Int,
-): Map<String, Int> {
-    val totalStoriesInFilteredCategories = selectedCategories.fold(0) { availableStories, category ->
-        availableStories + category.stories.size
-    }
-
-    when (totalStoriesInFilteredCategories > neededStoriesCount) {
-        true -> {
-            val storiesCountFromEachCategory = mutableMapOf<String, Int>()
-            var currentFilteredStoriesCount = 0
-
-            for (i in 0 until selectedCategories.maxOf { it.stories.size }) {
-                selectedCategories.forEach { category ->
-                    if (category.stories.getOrNull(i) != null) {
-                        storiesCountFromEachCategory[category.name] =
-                            storiesCountFromEachCategory[category.name]?.inc() ?: 1
-
-                        if (++currentFilteredStoriesCount == neededStoriesCount) {
-                            return storiesCountFromEachCategory
-                        }
-                    }
-                }
-            }
-        }
-        false -> {
-            return selectedCategories.associate { it.name to it.stories.size }
-        }
-    }
-
-    return emptyMap()
-}
-
-/**
- * Handle pacing and rotation of sponsored stories.
- */
-@VisibleForTesting
-internal fun getFilteredSponsoredStories(
-    stories: List<PocketSponsoredStory>,
-    limit: Int,
-): List<PocketSponsoredStory> {
-    return stories.asSequence()
-        .filterNot { it.hasLifetimeImpressionsLimitReached() }
-        .sortedByDescending { it.priority }
-        .filterNot { it.hasFlightImpressionsLimitReached() }
-        .take(limit)
-        .toList()
-}
-
 /**
  * Filter a [AppState] by the blocklist.
  *
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/home/HomeFragment.kt b/fenix/app/src/main/java/org/mozilla/fenix/home/HomeFragment.kt
index f5d2304907..fe47624dd4 100644
--- a/fenix/app/src/main/java/org/mozilla/fenix/home/HomeFragment.kt
+++ b/fenix/app/src/main/java/org/mozilla/fenix/home/HomeFragment.kt
@@ -95,8 +95,6 @@ import org.mozilla.fenix.ext.nav
 import org.mozilla.fenix.ext.requireComponents
 import org.mozilla.fenix.ext.scaleToBottomOfView
 import org.mozilla.fenix.ext.settings
-import org.mozilla.fenix.home.pocket.DefaultPocketStoriesController
-import org.mozilla.fenix.home.pocket.PocketRecommendedStoriesCategory
 import org.mozilla.fenix.home.privatebrowsing.controller.DefaultPrivateBrowsingController
 import org.mozilla.fenix.home.recentbookmarks.RecentBookmarksFeature
 import org.mozilla.fenix.home.recentbookmarks.controller.DefaultRecentBookmarksController
@@ -251,26 +249,6 @@ class HomeFragment : Fragment() {
 
         components.appStore.dispatch(AppAction.ModeChange(browsingModeManager.mode))
 
-        lifecycleScope.launch(IO) {
-            if (requireContext().settings().showPocketRecommendationsFeature) {
-                val categories = components.core.pocketStoriesService.getStories()
-                    .groupBy { story -> story.category }
-                    .map { (category, stories) -> PocketRecommendedStoriesCategory(category, stories) }
-
-                components.appStore.dispatch(AppAction.PocketStoriesCategoriesChange(categories))
-
-                if (requireContext().settings().showPocketSponsoredStories) {
-                    components.appStore.dispatch(
-                        AppAction.PocketSponsoredStoriesChange(
-                            components.core.pocketStoriesService.getSponsoredStories(),
-                        ),
-                    )
-                }
-            } else {
-                components.appStore.dispatch(AppAction.PocketStoriesClean)
-            }
-        }
-
         if (requireContext().settings().isExperimentationEnabled) {
             messagingFeature.set(
                 feature = MessagingFeature(
@@ -398,10 +376,6 @@ class HomeFragment : Fragment() {
                 scope = viewLifecycleOwner.lifecycleScope,
                 store = components.core.store,
             ),
-            pocketStoriesController = DefaultPocketStoriesController(
-                homeActivity = activity,
-                appStore = components.appStore,
-            ),
             privateBrowsingController = DefaultPrivateBrowsingController(
                 activity = activity,
                 appStore = components.appStore,
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/home/PocketUpdatesMiddleware.kt b/fenix/app/src/main/java/org/mozilla/fenix/home/PocketUpdatesMiddleware.kt
deleted file mode 100644
index 755ec4e82f..0000000000
--- a/fenix/app/src/main/java/org/mozilla/fenix/home/PocketUpdatesMiddleware.kt
+++ /dev/null
@@ -1,180 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package org.mozilla.fenix.home
-
-import androidx.annotation.VisibleForTesting
-import androidx.datastore.core.DataStore
-import kotlinx.coroutines.CoroutineScope
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.flow.first
-import kotlinx.coroutines.launch
-import mozilla.components.lib.state.Action
-import mozilla.components.lib.state.Middleware
-import mozilla.components.lib.state.MiddlewareContext
-import mozilla.components.lib.state.Store
-import mozilla.components.service.pocket.PocketStoriesService
-import mozilla.components.service.pocket.PocketStory
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStory
-import org.mozilla.fenix.components.AppStore
-import org.mozilla.fenix.components.appstate.AppAction
-import org.mozilla.fenix.components.appstate.AppState
-import org.mozilla.fenix.datastore.SelectedPocketStoriesCategories
-import org.mozilla.fenix.datastore.SelectedPocketStoriesCategories.SelectedPocketStoriesCategory
-import org.mozilla.fenix.home.pocket.PocketRecommendedStoriesCategory
-import org.mozilla.fenix.home.pocket.PocketRecommendedStoriesSelectedCategory
-
-/**
- * [AppStore] middleware reacting in response to Pocket related [Action]s.
- *
- * @param pocketStoriesService [PocketStoriesService] used for updating details about the Pocket recommended stories.
- * @param selectedPocketCategoriesDataStore [DataStore] used for reading or persisting details about the
- * currently selected Pocket recommended stories categories.
- * @param coroutineScope [CoroutineScope] used for long running operations like disk IO.
- */
-class PocketUpdatesMiddleware(
-    private val pocketStoriesService: PocketStoriesService,
-    private val selectedPocketCategoriesDataStore: DataStore<SelectedPocketStoriesCategories>,
-    private val coroutineScope: CoroutineScope = CoroutineScope(Dispatchers.IO),
-) : Middleware<AppState, AppAction> {
-    override fun invoke(
-        context: MiddlewareContext<AppState, AppAction>,
-        next: (AppAction) -> Unit,
-        action: AppAction,
-    ) {
-        // Pre process actions
-        when (action) {
-            is AppAction.PocketStoriesCategoriesChange -> {
-                // Intercept the original action which would only update categories and
-                // dispatch a new action which also updates which categories are selected by the user
-                // from previous locally persisted data.
-                restoreSelectedCategories(
-                    coroutineScope = coroutineScope,
-                    currentCategories = action.storiesCategories,
-                    store = context.store,
-                    selectedPocketCategoriesDataStore = selectedPocketCategoriesDataStore,
-                )
-            }
-            else -> {
-                // no-op
-            }
-        }
-
-        next(action)
-
-        // Post process actions
-        when (action) {
-            is AppAction.PocketStoriesShown -> {
-                persistStoriesImpressions(
-                    coroutineScope = coroutineScope,
-                    pocketStoriesService = pocketStoriesService,
-                    updatedStories = action.storiesShown,
-                )
-            }
-            is AppAction.SelectPocketStoriesCategory,
-            is AppAction.DeselectPocketStoriesCategory,
-            -> {
-                persistSelectedCategories(
-                    coroutineScope = coroutineScope,
-                    currentCategoriesSelections = context.state.pocketStoriesCategoriesSelections,
-                    selectedPocketCategoriesDataStore = selectedPocketCategoriesDataStore,
-                )
-            }
-            else -> {
-                // no-op
-            }
-        }
-    }
-}
-
-/**
- * Persist [updatedStories] for making their details available in between app restarts.
- *
- * @param coroutineScope [CoroutineScope] used for reading the locally persisted data.
- * @param pocketStoriesService [PocketStoriesService] used for updating details about the Pocket recommended stories.
- * @param updatedStories the list of stories to persist.
- */
-@VisibleForTesting
-internal fun persistStoriesImpressions(
-    coroutineScope: CoroutineScope,
-    pocketStoriesService: PocketStoriesService,
-    updatedStories: List<PocketStory>,
-) {
-    coroutineScope.launch {
-        pocketStoriesService.updateStoriesTimesShown(
-            updatedStories.filterIsInstance<PocketRecommendedStory>()
-                .map {
-                    it.copy(timesShown = it.timesShown.inc())
-                },
-        )
-
-        pocketStoriesService.recordStoriesImpressions(
-            updatedStories.filterIsInstance<PocketSponsoredStory>()
-                .map { it.id },
-        )
-    }
-}
-
-/**
- * Persist [currentCategoriesSelections] for making this details available in between app restarts.
- *
- * @param coroutineScope [CoroutineScope] used for reading the locally persisted data.
- * @param currentCategoriesSelections Currently selected Pocket recommended stories categories.
- * @param selectedPocketCategoriesDataStore - DataStore used for persisting [currentCategoriesSelections].
- */
-@VisibleForTesting
-internal fun persistSelectedCategories(
-    coroutineScope: CoroutineScope,
-    currentCategoriesSelections: List<PocketRecommendedStoriesSelectedCategory>,
-    selectedPocketCategoriesDataStore: DataStore<SelectedPocketStoriesCategories>,
-) {
-    val selectedCategories = currentCategoriesSelections
-        .map {
-            SelectedPocketStoriesCategory.newBuilder().apply {
-                name = it.name
-                selectionTimestamp = it.selectionTimestamp
-            }.build()
-        }
-
-    // Irrespective of the current selections or their number overwrite everything we had.
-    coroutineScope.launch {
-        selectedPocketCategoriesDataStore.updateData { data ->
-            data.newBuilderForType().addAllValues(selectedCategories).build()
-        }
-    }
-}
-
-/**
- * Combines [currentCategories] with the locally persisted data about previously selected categories
- * and emits a new [AppAction.PocketStoriesCategoriesSelectionsChange] to update these in store.
- *
- * @param coroutineScope [CoroutineScope] used for reading the locally persisted data.
- * @param currentCategories Stories categories currently available
- * @param store [Store] that will be updated.
- * @param selectedPocketCategoriesDataStore [DataStore] containing details about the previously selected
- * stories categories.
- */
-@VisibleForTesting
-internal fun restoreSelectedCategories(
-    coroutineScope: CoroutineScope,
-    currentCategories: List<PocketRecommendedStoriesCategory>,
-    store: Store<AppState, AppAction>,
-    selectedPocketCategoriesDataStore: DataStore<SelectedPocketStoriesCategories>,
-) {
-    coroutineScope.launch {
-        store.dispatch(
-            AppAction.PocketStoriesCategoriesSelectionsChange(
-                currentCategories,
-                selectedPocketCategoriesDataStore.data.first()
-                    .valuesList.map {
-                        PocketRecommendedStoriesSelectedCategory(
-                            name = it.name,
-                            selectionTimestamp = it.selectionTimestamp,
-                        )
-                    },
-            ),
-        )
-    }
-}
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketCategoriesViewHolder.kt b/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketCategoriesViewHolder.kt
deleted file mode 100644
index 7ca7b47d6a..0000000000
--- a/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketCategoriesViewHolder.kt
+++ /dev/null
@@ -1,141 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package org.mozilla.fenix.home.pocket
-
-import android.view.View
-import androidx.compose.foundation.isSystemInDarkTheme
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.Spacer
-import androidx.compose.foundation.layout.fillMaxWidth
-import androidx.compose.foundation.layout.height
-import androidx.compose.runtime.Composable
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.platform.ComposeView
-import androidx.compose.ui.res.stringResource
-import androidx.compose.ui.unit.dp
-import androidx.lifecycle.LifecycleOwner
-import androidx.recyclerview.widget.RecyclerView
-import mozilla.components.lib.state.ext.observeAsComposableState
-import org.mozilla.fenix.R
-import org.mozilla.fenix.components.components
-import org.mozilla.fenix.compose.ComposeViewHolder
-import org.mozilla.fenix.compose.SelectableChipColors
-import org.mozilla.fenix.compose.annotation.LightDarkPreview
-import org.mozilla.fenix.compose.home.HomeSectionHeader
-import org.mozilla.fenix.theme.FirefoxTheme
-import org.mozilla.fenix.wallpapers.WallpaperState
-
-internal const val POCKET_CATEGORIES_SELECTED_AT_A_TIME_COUNT = 8
-
-/**
- * [RecyclerView.ViewHolder] for displaying the list of [PocketRecommendedStoriesCategory]s from
- * [AppStore].
- *
- * @param composeView [ComposeView] which will be populated with Jetpack Compose UI content.
- * @param viewLifecycleOwner [LifecycleOwner] to which this Composable will be tied to.
- * @param interactor [PocketStoriesInteractor] callback for user interaction.
- */
-class PocketCategoriesViewHolder(
-    composeView: ComposeView,
-    viewLifecycleOwner: LifecycleOwner,
-    private val interactor: PocketStoriesInteractor,
-) : ComposeViewHolder(composeView, viewLifecycleOwner) {
-
-    @Composable
-    override fun Content() {
-        val horizontalPadding =
-            composeView.resources.getDimensionPixelSize(R.dimen.home_item_horizontal_margin)
-        composeView.setPadding(horizontalPadding, 0, horizontalPadding, 0)
-
-        val homeScreenReady = components.appStore
-            .observeAsComposableState { state -> state.firstFrameDrawn }.value ?: false
-
-        val categories = components.appStore
-            .observeAsComposableState { state -> state.pocketStoriesCategories }.value
-        val categoriesSelections = components.appStore
-            .observeAsComposableState { state -> state.pocketStoriesCategoriesSelections }.value
-
-        val wallpaperState = components.appStore
-            .observeAsComposableState { state -> state.wallpaperState }.value ?: WallpaperState.default
-
-        var (selectedBackgroundColor, unselectedBackgroundColor, selectedTextColor, unselectedTextColor) =
-            SelectableChipColors.buildColors()
-        wallpaperState.composeRunIfWallpaperCardColorsAreAvailable { cardColorLight, cardColorDark ->
-            if (isSystemInDarkTheme()) {
-                selectedBackgroundColor = cardColorDark
-                unselectedBackgroundColor = cardColorLight
-                selectedTextColor = FirefoxTheme.colors.textActionPrimary
-                unselectedTextColor = FirefoxTheme.colors.textActionSecondary
-            } else {
-                selectedBackgroundColor = cardColorLight
-                unselectedBackgroundColor = cardColorDark
-                selectedTextColor = FirefoxTheme.colors.textActionSecondary
-                unselectedTextColor = FirefoxTheme.colors.textActionPrimary
-            }
-        }
-
-        val categoryColors = SelectableChipColors(
-            selectedTextColor = selectedTextColor,
-            unselectedTextColor = unselectedTextColor,
-            selectedBackgroundColor = selectedBackgroundColor,
-            unselectedBackgroundColor = unselectedBackgroundColor,
-        )
-
-        // See the detailed comment in PocketStoriesViewHolder for reasoning behind this change.
-        if (!homeScreenReady) return
-        Column {
-            Spacer(Modifier.height(24.dp))
-
-            PocketTopics(
-                categoryColors = categoryColors,
-                categories = categories ?: emptyList(),
-                categoriesSelections = categoriesSelections ?: emptyList(),
-                onCategoryClick = interactor::onCategoryClicked,
-            )
-        }
-    }
-
-    companion object {
-        val LAYOUT_ID = View.generateViewId()
-    }
-}
-
-@Composable
-private fun PocketTopics(
-    categories: List<PocketRecommendedStoriesCategory> = emptyList(),
-    categoriesSelections: List<PocketRecommendedStoriesSelectedCategory> = emptyList(),
-    categoryColors: SelectableChipColors = SelectableChipColors.buildColors(),
-    onCategoryClick: (PocketRecommendedStoriesCategory) -> Unit,
-) {
-    Column {
-        HomeSectionHeader(
-            headerText = stringResource(R.string.pocket_stories_categories_header),
-        )
-
-        Spacer(Modifier.height(16.dp))
-
-        PocketStoriesCategories(
-            categories = categories,
-            selections = categoriesSelections,
-            modifier = Modifier.fillMaxWidth(),
-            categoryColors = categoryColors,
-            onCategoryClick = onCategoryClick,
-        )
-    }
-}
-
-@Composable
-@LightDarkPreview
-private fun PocketCategoriesViewHolderPreview() {
-    FirefoxTheme {
-        PocketTopics(
-            categories = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor"
-                .split(" ")
-                .map { PocketRecommendedStoriesCategory(it) },
-            categoriesSelections = emptyList(),
-            onCategoryClick = {},
-        )
-    }
-}
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketRecommendationsHeaderViewHolder.kt b/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketRecommendationsHeaderViewHolder.kt
deleted file mode 100644
index 43343622b4..0000000000
--- a/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketRecommendationsHeaderViewHolder.kt
+++ /dev/null
@@ -1,90 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-@file:Suppress("MagicNumber")
-
-package org.mozilla.fenix.home.pocket
-
-import android.view.View
-import androidx.compose.foundation.background
-import androidx.compose.foundation.layout.Box
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.Spacer
-import androidx.compose.foundation.layout.fillMaxWidth
-import androidx.compose.foundation.layout.height
-import androidx.compose.runtime.Composable
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.platform.ComposeView
-import androidx.compose.ui.unit.dp
-import androidx.lifecycle.LifecycleOwner
-import androidx.recyclerview.widget.RecyclerView
-import mozilla.components.lib.state.ext.observeAsComposableState
-import org.mozilla.fenix.R
-import org.mozilla.fenix.components.components
-import org.mozilla.fenix.compose.ComposeViewHolder
-import org.mozilla.fenix.compose.annotation.LightDarkPreview
-import org.mozilla.fenix.theme.FirefoxTheme
-
-/**
- * [RecyclerView.ViewHolder] for displaying the Pocket feature header.
- *
- * @param composeView [ComposeView] which will be populated with Jetpack Compose UI content.
- * @param viewLifecycleOwner [LifecycleOwner] to which this Composable will be tied to.
- * @param interactor [PocketStoriesInteractor] callback for user interaction.
- */
-class PocketRecommendationsHeaderViewHolder(
-    composeView: ComposeView,
-    viewLifecycleOwner: LifecycleOwner,
-    private val interactor: PocketStoriesInteractor,
-) : ComposeViewHolder(composeView, viewLifecycleOwner) {
-
-    @Composable
-    override fun Content() {
-        val horizontalPadding =
-            composeView.resources.getDimensionPixelSize(R.dimen.home_item_horizontal_margin)
-        composeView.setPadding(horizontalPadding, 0, horizontalPadding, 0)
-
-        val wallpaperState = components.appStore
-            .observeAsComposableState { state -> state.wallpaperState }.value
-
-        var textColor = FirefoxTheme.colors.textPrimary
-        var linkTextColor = FirefoxTheme.colors.textAccent
-
-        wallpaperState?.currentWallpaper?.let { currentWallpaper ->
-            currentWallpaper.textColor?.let {
-                val wallpaperAdaptedTextColor = Color(it)
-                textColor = wallpaperAdaptedTextColor
-                linkTextColor = wallpaperAdaptedTextColor
-            }
-        }
-
-        Column {
-            Spacer(Modifier.height(24.dp))
-
-            PoweredByPocketHeader(
-                onLearnMoreClicked = interactor::onLearnMoreClicked,
-                modifier = Modifier.fillMaxWidth(),
-                textColor = textColor,
-                linkTextColor = linkTextColor,
-            )
-        }
-    }
-
-    companion object {
-        val LAYOUT_ID = View.generateViewId()
-    }
-}
-
-@Composable
-@LightDarkPreview
-private fun PocketRecommendationsFooterViewHolderPreview() {
-    FirefoxTheme {
-        Box(modifier = Modifier.background(color = FirefoxTheme.colors.layer1)) {
-            PoweredByPocketHeader(
-                onLearnMoreClicked = {},
-            )
-        }
-    }
-}
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketRecommendedStoriesCategory.kt b/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketRecommendedStoriesCategory.kt
deleted file mode 100644
index 1749a0b762..0000000000
--- a/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketRecommendedStoriesCategory.kt
+++ /dev/null
@@ -1,27 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package org.mozilla.fenix.home.pocket
-
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-
-/**
- * Category name of the default category from which stories are to be shown
- * if user hasn't explicitly selected others.
- */
-const val POCKET_STORIES_DEFAULT_CATEGORY_NAME = "general"
-
-/**
- * In memory cache of Pocket assigned topic of interest for recommended stories.
- * Avoids multiple stories mappings for each time we are interested in their categories.
- *
- * One to many relationship with [PocketRecommendedStory]es.
- *
- * @property name The exact name of each category. Case sensitive.
- * @property stories All [PocketRecommendedStory]s with this category.
- */
-data class PocketRecommendedStoriesCategory(
-    val name: String,
-    val stories: List<PocketRecommendedStory> = emptyList(),
-)
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketRecommendedStoriesSelectedCategory.kt b/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketRecommendedStoriesSelectedCategory.kt
deleted file mode 100644
index c86c3719e6..0000000000
--- a/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketRecommendedStoriesSelectedCategory.kt
+++ /dev/null
@@ -1,16 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package org.mozilla.fenix.home.pocket
-
-/**
- * Details about a selected Pocket recommended stories category.
- *
- * @property name The exact name of a selected category. Case sensitive.
- * @property selectionTimestamp The exact time at which a category was selected. Defaults to [System.currentTimeMillis].
- */
-data class PocketRecommendedStoriesSelectedCategory(
-    val name: String,
-    val selectionTimestamp: Long = System.currentTimeMillis(),
-)
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketStoriesComposables.kt b/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketStoriesComposables.kt
deleted file mode 100644
index 3b224dc82d..0000000000
--- a/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketStoriesComposables.kt
+++ /dev/null
@@ -1,569 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-@file:Suppress("MagicNumber")
-
-package org.mozilla.fenix.home.pocket
-
-import android.content.res.Configuration
-import android.graphics.Rect
-import android.net.Uri
-import androidx.compose.foundation.background
-import androidx.compose.foundation.layout.Arrangement
-import androidx.compose.foundation.layout.Box
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.PaddingValues
-import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.Spacer
-import androidx.compose.foundation.layout.fillMaxSize
-import androidx.compose.foundation.layout.fillMaxWidth
-import androidx.compose.foundation.layout.height
-import androidx.compose.foundation.layout.width
-import androidx.compose.foundation.lazy.LazyRow
-import androidx.compose.foundation.lazy.itemsIndexed
-import androidx.compose.foundation.lazy.rememberLazyListState
-import androidx.compose.material.Icon
-import androidx.compose.material.Text
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.remember
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.ExperimentalComposeUiApi
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.platform.LocalConfiguration
-import androidx.compose.ui.platform.LocalContext
-import androidx.compose.ui.platform.LocalDensity
-import androidx.compose.ui.platform.LocalView
-import androidx.compose.ui.res.painterResource
-import androidx.compose.ui.res.stringResource
-import androidx.compose.ui.semantics.Role
-import androidx.compose.ui.semantics.onClick
-import androidx.compose.ui.semantics.role
-import androidx.compose.ui.semantics.semantics
-import androidx.compose.ui.semantics.testTag
-import androidx.compose.ui.semantics.testTagsAsResourceId
-import androidx.compose.ui.text.style.TextDecoration
-import androidx.compose.ui.text.style.TextOverflow
-import androidx.compose.ui.tooling.preview.Preview
-import androidx.compose.ui.tooling.preview.PreviewParameter
-import androidx.compose.ui.tooling.preview.PreviewParameterProvider
-import androidx.compose.ui.unit.Dp
-import androidx.compose.ui.unit.dp
-import androidx.compose.ui.unit.max
-import mozilla.components.service.pocket.PocketStory
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStory
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStoryCaps
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStoryShim
-import org.mozilla.fenix.R
-import org.mozilla.fenix.compose.ClickableSubstringLink
-import org.mozilla.fenix.compose.EagerFlingBehavior
-import org.mozilla.fenix.compose.ITEM_WIDTH
-import org.mozilla.fenix.compose.ListItemTabLarge
-import org.mozilla.fenix.compose.ListItemTabLargePlaceholder
-import org.mozilla.fenix.compose.ListItemTabSurface
-import org.mozilla.fenix.compose.SelectableChip
-import org.mozilla.fenix.compose.SelectableChipColors
-import org.mozilla.fenix.compose.StaggeredHorizontalGrid
-import org.mozilla.fenix.compose.TabSubtitleWithInterdot
-import org.mozilla.fenix.compose.ext.onShown
-import org.mozilla.fenix.compose.inComposePreview
-import org.mozilla.fenix.ext.settings
-import org.mozilla.fenix.theme.FirefoxTheme
-import kotlin.math.roundToInt
-
-private const val URI_PARAM_UTM_KEY = "utm_source"
-private const val POCKET_STORIES_UTM_VALUE = "pocket-newtab-android"
-private const val POCKET_FEATURE_UTM_KEY_VALUE = "utm_source=ff_android"
-
-/**
- * Placeholder [PocketStory] allowing to combine other items in the same list that shows stories.
- * It uses empty values for it's properties ensuring that no conflict is possible since real stories have
- * mandatory values.
- */
-private val placeholderStory = PocketRecommendedStory("", "", "", "", "", 0, 0)
-
-/**
- * Displays a single [PocketRecommendedStory].
- *
- * @param story The [PocketRecommendedStory] to be displayed.
- * @param backgroundColor The background [Color] of the story.
- * @param onStoryClick Callback for when the user taps on this story.
- */
-@OptIn(ExperimentalComposeUiApi::class)
-@Composable
-fun PocketStory(
-    @PreviewParameter(PocketStoryProvider::class) story: PocketRecommendedStory,
-    backgroundColor: Color,
-    onStoryClick: (PocketRecommendedStory) -> Unit,
-) {
-    val imageUrl = story.imageUrl.replace(
-        "{wh}",
-        with(LocalDensity.current) { "${116.dp.toPx().roundToInt()}x${84.dp.toPx().roundToInt()}" },
-    )
-    val isValidPublisher = story.publisher.isNotBlank()
-    val isValidTimeToRead = story.timeToRead >= 0
-    ListItemTabLarge(
-        imageUrl = imageUrl,
-        backgroundColor = backgroundColor,
-        onClick = { onStoryClick(story) },
-        title = {
-            Text(
-                text = story.title,
-                modifier = Modifier.semantics {
-                    testTagsAsResourceId = true
-                    testTag = "pocket.story.title"
-                },
-                color = FirefoxTheme.colors.textPrimary,
-                overflow = TextOverflow.Ellipsis,
-                maxLines = 2,
-                style = FirefoxTheme.typography.body2,
-            )
-        },
-        subtitle = {
-            if (isValidPublisher && isValidTimeToRead) {
-                TabSubtitleWithInterdot(story.publisher, "${story.timeToRead} min")
-            } else if (isValidPublisher) {
-                Text(
-                    text = story.publisher,
-                    modifier = Modifier.semantics {
-                        testTagsAsResourceId = true
-                        testTag = "pocket.story.publisher"
-                    },
-                    color = FirefoxTheme.colors.textSecondary,
-                    overflow = TextOverflow.Ellipsis,
-                    maxLines = 1,
-                    style = FirefoxTheme.typography.caption,
-                )
-            } else if (isValidTimeToRead) {
-                Text(
-                    text = "${story.timeToRead} min",
-                    modifier = Modifier.semantics {
-                        testTagsAsResourceId = true
-                        testTag = "pocket.story.timeToRead"
-                    },
-                    color = FirefoxTheme.colors.textSecondary,
-                    overflow = TextOverflow.Ellipsis,
-                    maxLines = 1,
-                    style = FirefoxTheme.typography.caption,
-                )
-            }
-        },
-    )
-}
-
-/**
- * Displays a single [PocketSponsoredStory].
- *
- * @param story The [PocketSponsoredStory] to be displayed.
- * @param backgroundColor The background [Color] of the story.
- * @param onStoryClick Callback for when the user taps on this story.
- */
-@OptIn(ExperimentalComposeUiApi::class)
-@Composable
-fun PocketSponsoredStory(
-    story: PocketSponsoredStory,
-    backgroundColor: Color,
-    onStoryClick: (PocketSponsoredStory) -> Unit,
-) {
-    val (imageWidth, imageHeight) = with(LocalDensity.current) {
-        116.dp.toPx().roundToInt() to 84.dp.toPx().roundToInt()
-    }
-    val imageUrl = story.imageUrl.replace(
-        "&resize=w[0-9]+-h[0-9]+".toRegex(),
-        "&resize=w$imageWidth-h$imageHeight",
-    )
-
-    ListItemTabSurface(
-        imageUrl = imageUrl,
-        contentPadding = PaddingValues(16.dp, 0.dp),
-        backgroundColor = backgroundColor,
-        onClick = { onStoryClick(story) },
-    ) {
-        Column(
-            modifier = Modifier.fillMaxSize(),
-            verticalArrangement = Arrangement.SpaceEvenly,
-        ) {
-            Text(
-                text = story.title,
-                modifier = Modifier.semantics {
-                    testTagsAsResourceId = true
-                    testTag = "pocket.sponsoredStory.title"
-                },
-                color = FirefoxTheme.colors.textPrimary,
-                overflow = TextOverflow.Ellipsis,
-                maxLines = 2,
-                style = FirefoxTheme.typography.body2,
-            )
-
-            Text(
-                text = stringResource(R.string.pocket_stories_sponsor_indication),
-                modifier = Modifier.semantics {
-                    testTagsAsResourceId = true
-                    testTag = "pocket.sponsoredStory.identifier"
-                },
-                color = FirefoxTheme.colors.textSecondary,
-                overflow = TextOverflow.Ellipsis,
-                maxLines = 1,
-                style = FirefoxTheme.typography.caption,
-            )
-
-            Text(
-                text = story.sponsor,
-                modifier = Modifier.semantics {
-                    testTagsAsResourceId = true
-                    testTag = "pocket.sponsoredStory.sponsor"
-                },
-                color = FirefoxTheme.colors.textSecondary,
-                overflow = TextOverflow.Ellipsis,
-                maxLines = 1,
-                style = FirefoxTheme.typography.caption,
-            )
-        }
-    }
-}
-
-/**
- * Displays a list of [PocketStory]es on 3 by 3 grid.
- * If there aren't enough stories to fill all columns placeholders containing an external link
- * to go to Pocket for more recommendations are added.
- *
- * @param stories The list of [PocketStory]ies to be displayed. Expect a list with 8 items.
- * @param contentPadding Dimension for padding the content after it has been clipped.
- * This space will be used for shadows and also content rendering when the list is scrolled.
- * @param backgroundColor The background [Color] of each story.
- * @param onStoryShown Callback for when a certain story is visible to the user.
- * @param onStoryClicked Callback for when the user taps on a recommended story.
- * @param onDiscoverMoreClicked Callback for when the user taps an element which contains an
- */
-@OptIn(ExperimentalComposeUiApi::class)
-@Suppress("LongParameterList", "LongMethod")
-@Composable
-fun PocketStories(
-    @PreviewParameter(PocketStoryProvider::class) stories: List<PocketStory>,
-    contentPadding: Dp,
-    backgroundColor: Color = FirefoxTheme.colors.layer2,
-    onStoryShown: (PocketStory, Pair<Int, Int>) -> Unit,
-    onStoryClicked: (PocketStory, Pair<Int, Int>) -> Unit,
-    onDiscoverMoreClicked: (String) -> Unit,
-) {
-    // Show stories in at most 3 rows but on any number of columns depending on the data received.
-    val maxRowsNo = 3
-    val storiesToShow = (stories + placeholderStory).chunked(maxRowsNo)
-
-    val listState = rememberLazyListState()
-    val flingBehavior = EagerFlingBehavior(lazyRowState = listState)
-
-    val configuration = LocalConfiguration.current
-    val screenWidth = configuration.screenWidthDp.dp
-
-    val endPadding =
-        remember { mutableStateOf(endPadding(configuration, screenWidth, contentPadding)) }
-    // Force recomposition as padding is not consistently updated when orientation has changed.
-    endPadding.value = endPadding(configuration, screenWidth, contentPadding)
-
-    LazyRow(
-        modifier = Modifier.semantics {
-            testTagsAsResourceId = true
-            testTag = "pocket.stories"
-        },
-        contentPadding = PaddingValues(start = contentPadding, end = endPadding.value),
-        state = listState,
-        flingBehavior = flingBehavior,
-        horizontalArrangement = Arrangement.spacedBy(8.dp),
-    ) {
-        itemsIndexed(storiesToShow) { columnIndex, columnItems ->
-            Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {
-                columnItems.forEachIndexed { rowIndex, story ->
-                    Box(
-                        modifier = Modifier.semantics {
-                            testTagsAsResourceId = true
-                            testTag = when (story) {
-                                placeholderStory -> "pocket.discover.more.story"
-                                is PocketRecommendedStory -> "pocket.recommended.story"
-                                else -> "pocket.sponsored.story"
-                            }
-                        },
-                    ) {
-                        if (story == placeholderStory) {
-                            ListItemTabLargePlaceholder(
-                                text = stringResource(R.string.pocket_stories_placeholder_text),
-                                backgroundColor = backgroundColor,
-                            ) {
-                                onDiscoverMoreClicked("https://getpocket.com/explore?$POCKET_FEATURE_UTM_KEY_VALUE")
-                            }
-                        } else if (story is PocketRecommendedStory) {
-                            PocketStory(
-                                story = story,
-                                backgroundColor = backgroundColor,
-                            ) {
-                                val uri = Uri.parse(story.url)
-                                    .buildUpon()
-                                    .appendQueryParameter(URI_PARAM_UTM_KEY, POCKET_STORIES_UTM_VALUE)
-                                    .build().toString()
-                                onStoryClicked(it.copy(url = uri), rowIndex to columnIndex)
-                            }
-                        } else if (story is PocketSponsoredStory) {
-                            val screenBounds = Rect()
-                                .apply { LocalView.current.getWindowVisibleDisplayFrame(this) }
-                                .apply {
-                                    // Check if this is in a preview because `.settings()` breaks previews
-                                    if (!inComposePreview) {
-                                        val verticalOffset = LocalContext.current.resources.getDimensionPixelSize(
-                                            R.dimen.browser_toolbar_height,
-                                        )
-
-                                        if (LocalContext.current.settings().shouldUseBottomToolbar) {
-                                            bottom -= verticalOffset
-                                        } else {
-                                            top += verticalOffset
-                                        }
-                                    }
-                                }
-                            Box(
-                                modifier = Modifier.onShown(
-                                    threshold = 0.5f,
-                                    onVisible = { onStoryShown(story, rowIndex to columnIndex) },
-                                    screenBounds = screenBounds,
-                                ),
-                            ) {
-                                PocketSponsoredStory(
-                                    story = story,
-                                    backgroundColor = backgroundColor,
-                                ) {
-                                    onStoryClicked(story, rowIndex to columnIndex)
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-        }
-    }
-}
-
-private fun endPadding(configuration: Configuration, screenWidth: Dp, contentPadding: Dp) =
-    if (configuration.orientation == Configuration.ORIENTATION_PORTRAIT) {
-        alignColumnToTitlePadding(screenWidth = screenWidth, contentPadding = contentPadding)
-    } else {
-        contentPadding
-    }
-
-/**
- * If the column item is wider than the [screenWidth] default to the [contentPadding].
- */
-private fun alignColumnToTitlePadding(screenWidth: Dp, contentPadding: Dp) =
-    max(screenWidth - (ITEM_WIDTH.dp + contentPadding), contentPadding)
-
-/**
- * Displays a list of [PocketRecommendedStoriesCategory]s.
- *
- * @param categories The categories needed to be displayed.
- * @param selections List of categories currently selected.
- * @param modifier [Modifier] to be applied to the layout.
- * @param categoryColors The color set defined by [SelectableChipColors] used to style Pocket categories.
- * @param onCategoryClick Callback for when the user taps a category.
- */
-@OptIn(ExperimentalComposeUiApi::class)
-@Suppress("LongParameterList")
-@Composable
-fun PocketStoriesCategories(
-    categories: List<PocketRecommendedStoriesCategory>,
-    selections: List<PocketRecommendedStoriesSelectedCategory>,
-    modifier: Modifier = Modifier,
-    categoryColors: SelectableChipColors = SelectableChipColors.buildColors(),
-    onCategoryClick: (PocketRecommendedStoriesCategory) -> Unit,
-) {
-    Box(
-        modifier = modifier.semantics {
-            testTagsAsResourceId = true
-            testTag = "pocket.categories"
-        },
-    ) {
-        StaggeredHorizontalGrid(
-            horizontalItemsSpacing = 16.dp,
-            verticalItemsSpacing = 16.dp,
-        ) {
-            categories.filter { it.name != POCKET_STORIES_DEFAULT_CATEGORY_NAME }.forEach { category ->
-                SelectableChip(
-                    text = category.name,
-                    isSelected = selections.map { it.name }.contains(category.name),
-                    isSquare = true,
-                    selectableChipColors = categoryColors,
-                ) {
-                    onCategoryClick(category)
-                }
-            }
-        }
-    }
-}
-
-/**
- * Pocket feature section title.
- * Shows a default text about Pocket and offers a external link to learn more.
- *
- * @param onLearnMoreClicked Callback invoked when the user clicks the "Learn more" link.
- * Contains the full URL for where the user should be navigated to.
- * @param modifier [Modifier] to be applied to the layout.
- * @param textColor [Color] to be applied to the text.
- * @param linkTextColor [Color] of the link text.
- */
-@OptIn(ExperimentalComposeUiApi::class)
-@Suppress("Deprecation")
-@Composable
-fun PoweredByPocketHeader(
-    onLearnMoreClicked: (String) -> Unit,
-    modifier: Modifier = Modifier,
-    textColor: Color = FirefoxTheme.colors.textPrimary,
-    linkTextColor: Color = FirefoxTheme.colors.textAccent,
-) {
-    val link = stringResource(R.string.pocket_stories_feature_learn_more)
-    val text = stringResource(R.string.pocket_stories_feature_caption, link)
-    val linkStartIndex = text.indexOf(link)
-    val linkEndIndex = linkStartIndex + link.length
-
-    Column(
-        modifier = modifier.semantics {
-            testTagsAsResourceId = true
-            testTag = "pocket.header"
-        },
-        horizontalAlignment = Alignment.CenterHorizontally,
-    ) {
-        Row(
-            Modifier
-                .fillMaxWidth()
-                .semantics(mergeDescendants = true) {},
-            verticalAlignment = Alignment.CenterVertically,
-        ) {
-            Icon(
-                painter = painterResource(id = R.drawable.pocket_vector),
-                contentDescription = null,
-                // Apply the red tint in code. Otherwise the image is black and white.
-                tint = Color(0xFFEF4056),
-            )
-
-            Spacer(modifier = Modifier.width(16.dp))
-
-            val onClickLabel = stringResource(id = R.string.a11y_action_label_pocket_learn_more)
-            Column(
-                Modifier.semantics(mergeDescendants = true) {
-                    role = Role.Button
-                    onClick(label = onClickLabel) {
-                        onLearnMoreClicked(
-                            "https://www.mozilla.org/en-US/firefox/pocket/?$POCKET_FEATURE_UTM_KEY_VALUE",
-                        )
-                        false
-                    }
-                },
-            ) {
-                Text(
-                    text = stringResource(
-                        R.string.pocket_stories_feature_title_2,
-                        LocalContext.current.getString(R.string.pocket_product_name),
-                    ),
-                    modifier = Modifier.semantics {
-                        testTagsAsResourceId = true
-                        testTag = "pocket.header.title"
-                    },
-                    color = textColor,
-                    style = FirefoxTheme.typography.caption,
-                )
-
-                Box(
-                    modifier = modifier.semantics {
-                        testTagsAsResourceId = true
-                        testTag = "pocket.header.subtitle"
-                    },
-                ) {
-                    ClickableSubstringLink(
-                        text = text,
-                        textColor = textColor,
-                        linkTextColor = linkTextColor,
-                        linkTextDecoration = TextDecoration.Underline,
-                        clickableStartIndex = linkStartIndex,
-                        clickableEndIndex = linkEndIndex,
-                    ) {
-                        onLearnMoreClicked(
-                            "https://www.mozilla.org/en-US/firefox/pocket/?$POCKET_FEATURE_UTM_KEY_VALUE",
-                        )
-                    }
-                }
-            }
-        }
-    }
-}
-
-@Composable
-@Preview
-private fun PocketStoriesComposablesPreview() {
-    FirefoxTheme {
-        Box(Modifier.background(FirefoxTheme.colors.layer2)) {
-            Column {
-                PocketStories(
-                    stories = getFakePocketStories(8),
-                    contentPadding = 0.dp,
-                    onStoryShown = { _, _ -> },
-                    onStoryClicked = { _, _ -> },
-                    onDiscoverMoreClicked = {},
-                )
-                Spacer(Modifier.height(10.dp))
-
-                PocketStoriesCategories(
-                    categories = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor"
-                        .split(" ")
-                        .map { PocketRecommendedStoriesCategory(it) },
-                    selections = emptyList(),
-                    onCategoryClick = {},
-                )
-                Spacer(Modifier.height(10.dp))
-
-                PoweredByPocketHeader(
-                    onLearnMoreClicked = {},
-                )
-            }
-        }
-    }
-}
-
-private class PocketStoryProvider : PreviewParameterProvider<PocketStory> {
-    override val values = getFakePocketStories(7).asSequence()
-    override val count = 8
-}
-
-internal fun getFakePocketStories(limit: Int = 1): List<PocketStory> {
-    return mutableListOf<PocketStory>().apply {
-        for (index in 0 until limit) {
-            when (index % 2 == 0) {
-                true -> add(
-                    PocketRecommendedStory(
-                        title = "This is a ${"very ".repeat(index)} long title",
-                        publisher = "Publisher",
-                        url = "https://story$index.com",
-                        imageUrl = "",
-                        timeToRead = index,
-                        category = "Category #$index",
-                        timesShown = index.toLong(),
-                    ),
-                )
-                false -> add(
-                    PocketSponsoredStory(
-                        id = index,
-                        title = "This is a ${"very ".repeat(index)} long title",
-                        url = "https://sponsored-story$index.com",
-                        imageUrl = "",
-                        sponsor = "Mozilla",
-                        shim = PocketSponsoredStoryShim("", ""),
-                        priority = index,
-                        caps = PocketSponsoredStoryCaps(
-                            flightCount = index,
-                            flightPeriod = index * 2,
-                            lifetimeCount = index * 3,
-                        ),
-                    ),
-                )
-            }
-        }
-    }
-}
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketStoriesController.kt b/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketStoriesController.kt
deleted file mode 100644
index e877ab455e..0000000000
--- a/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketStoriesController.kt
+++ /dev/null
@@ -1,186 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package org.mozilla.fenix.home.pocket
-
-import mozilla.components.service.glean.private.NoExtras
-import mozilla.components.service.pocket.PocketStory
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-import mozilla.components.service.pocket.PocketStory.PocketSponsoredStory
-import mozilla.components.service.pocket.ext.getCurrentFlightImpressions
-import org.mozilla.fenix.BrowserDirection
-import org.mozilla.fenix.GleanMetrics.Pings
-import org.mozilla.fenix.GleanMetrics.Pocket
-import org.mozilla.fenix.HomeActivity
-import org.mozilla.fenix.components.AppStore
-import org.mozilla.fenix.components.appstate.AppAction
-
-/**
- * Contract for how all user interactions with the Pocket stories feature are to be handled.
- */
-interface PocketStoriesController {
-    /**
-     * Callback to decide what should happen as an effect of a specific story being shown.
-     *
-     * @param storyShown The just shown [PocketStory].
-     * @param storyPosition `row x column` matrix representing the grid position of the shown story.
-     */
-    fun handleStoryShown(storyShown: PocketStory, storyPosition: Pair<Int, Int>)
-
-    /**
-     * Callback to decide what should happen as an effect of a new list of stories being shown.
-     *
-     * @param storiesShown the new list of [PocketStory]es shown to the user.
-     */
-    fun handleStoriesShown(storiesShown: List<PocketStory>)
-
-    /**
-     * Callback allowing to handle a specific [PocketRecommendedStoriesCategory] being clicked by the user.
-     *
-     * @param categoryClicked the just clicked [PocketRecommendedStoriesCategory].
-     */
-    fun handleCategoryClick(categoryClicked: PocketRecommendedStoriesCategory)
-
-    /**
-     * Callback for when the user clicks on a specific story.
-     *
-     * @param storyClicked The just clicked [PocketStory].
-     * @param storyPosition `row x column` matrix representing the grid position of the clicked story.
-     */
-    fun handleStoryClicked(storyClicked: PocketStory, storyPosition: Pair<Int, Int>)
-
-    /**
-     * Callback for when the "Learn more" link is clicked.
-     *
-     * @param link URL clicked.
-     */
-    fun handleLearnMoreClicked(link: String)
-
-    /**
-     * Callback for when the "Discover more" link is clicked.
-     *
-     * @param link URL clicked.
-     */
-    fun handleDiscoverMoreClicked(link: String)
-}
-
-/**
- * Default behavior for handling all user interactions with the Pocket recommended stories feature.
- *
- * @param homeActivity [HomeActivity] used to open URLs in a new tab.
- * @param appStore [AppStore] from which to read the current Pocket recommendations and dispatch new actions on.
- */
-internal class DefaultPocketStoriesController(
-    private val homeActivity: HomeActivity,
-    private val appStore: AppStore,
-) : PocketStoriesController {
-    override fun handleStoryShown(
-        storyShown: PocketStory,
-        storyPosition: Pair<Int, Int>,
-    ) {
-        appStore.dispatch(AppAction.PocketStoriesShown(listOf(storyShown)))
-
-        when (storyShown) {
-            is PocketSponsoredStory -> {
-                Pocket.homeRecsSpocShown.record(
-                    Pocket.HomeRecsSpocShownExtra(
-                        spocId = storyShown.id.toString(),
-                        position = "${storyPosition.first}x${storyPosition.second}",
-                        timesShown = storyShown.getCurrentFlightImpressions().size.inc().toString(),
-                    ),
-                )
-                Pocket.spocShim.set(storyShown.shim.impression)
-                Pings.spoc.submit(Pings.spocReasonCodes.impression)
-            }
-            else -> {
-                // no-op
-                // The telemetry for PocketRecommendedStory is sent separately for bulk updates.
-            }
-        }
-    }
-
-    override fun handleStoriesShown(storiesShown: List<PocketStory>) {
-        appStore.dispatch(AppAction.PocketStoriesShown(storiesShown))
-        Pocket.homeRecsShown.record(NoExtras())
-    }
-
-    override fun handleCategoryClick(categoryClicked: PocketRecommendedStoriesCategory) {
-        val initialCategoriesSelections = appStore.state.pocketStoriesCategoriesSelections
-
-        // First check whether the category is clicked to be deselected.
-        if (initialCategoriesSelections.map { it.name }.contains(categoryClicked.name)) {
-            appStore.dispatch(AppAction.DeselectPocketStoriesCategory(categoryClicked.name))
-            Pocket.homeRecsCategoryClicked.record(
-                Pocket.HomeRecsCategoryClickedExtra(
-                    categoryName = categoryClicked.name,
-                    newState = "deselected",
-                    selectedTotal = initialCategoriesSelections.size.toString(),
-                ),
-            )
-            return
-        }
-
-        // If a new category is clicked to be selected:
-        // Ensure the number of categories selected at a time is capped.
-        val oldestCategoryToDeselect =
-            if (initialCategoriesSelections.size == POCKET_CATEGORIES_SELECTED_AT_A_TIME_COUNT) {
-                initialCategoriesSelections.minByOrNull { it.selectionTimestamp }
-            } else {
-                null
-            }
-        oldestCategoryToDeselect?.let {
-            appStore.dispatch(AppAction.DeselectPocketStoriesCategory(it.name))
-        }
-
-        // Finally update the selection.
-        appStore.dispatch(AppAction.SelectPocketStoriesCategory(categoryClicked.name))
-
-        Pocket.homeRecsCategoryClicked.record(
-            Pocket.HomeRecsCategoryClickedExtra(
-                categoryName = categoryClicked.name,
-                newState = "selected",
-                selectedTotal = initialCategoriesSelections.size.toString(),
-            ),
-        )
-    }
-
-    override fun handleStoryClicked(
-        storyClicked: PocketStory,
-        storyPosition: Pair<Int, Int>,
-    ) {
-        homeActivity.openToBrowserAndLoad(storyClicked.url, true, BrowserDirection.FromHome)
-
-        when (storyClicked) {
-            is PocketRecommendedStory -> {
-                Pocket.homeRecsStoryClicked.record(
-                    Pocket.HomeRecsStoryClickedExtra(
-                        position = "${storyPosition.first}x${storyPosition.second}",
-                        timesShown = storyClicked.timesShown.inc().toString(),
-                    ),
-                )
-            }
-            is PocketSponsoredStory -> {
-                Pocket.homeRecsSpocClicked.record(
-                    Pocket.HomeRecsSpocClickedExtra(
-                        spocId = storyClicked.id.toString(),
-                        position = "${storyPosition.first}x${storyPosition.second}",
-                        timesShown = storyClicked.getCurrentFlightImpressions().size.inc().toString(),
-                    ),
-                )
-                Pocket.spocShim.set(storyClicked.shim.click)
-                Pings.spoc.submit(Pings.spocReasonCodes.click)
-            }
-        }
-    }
-
-    override fun handleLearnMoreClicked(link: String) {
-        homeActivity.openToBrowserAndLoad(link, true, BrowserDirection.FromHome)
-        Pocket.homeRecsLearnMoreClicked.record(NoExtras())
-    }
-
-    override fun handleDiscoverMoreClicked(link: String) {
-        homeActivity.openToBrowserAndLoad(link, true, BrowserDirection.FromHome)
-        Pocket.homeRecsDiscoverClicked.record(NoExtras())
-    }
-}
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketStoriesInteractor.kt b/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketStoriesInteractor.kt
deleted file mode 100644
index 70650e5580..0000000000
--- a/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketStoriesInteractor.kt
+++ /dev/null
@@ -1,57 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package org.mozilla.fenix.home.pocket
-
-import mozilla.components.service.pocket.PocketStory
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-
-/**
- * Contract for all possible user interactions with the Pocket recommended stories feature.
- */
-interface PocketStoriesInteractor {
-    /**
-     * Callback for when a certain story is shown to the user.
-     *
-     * @param storyShown The story shown to the user.
-     * @param storyPosition `row x column` matrix representing the grid position of the shown story.
-     */
-    fun onStoryShown(storyShown: PocketStory, storyPosition: Pair<Int, Int>)
-
-    /**
-     * Callback for then new stories are shown to the user.
-     *
-     * @param storiesShown The new list of [PocketRecommendedStory]es shown to the user.
-     */
-    fun onStoriesShown(storiesShown: List<PocketStory>)
-
-    /**
-     * Callback for when the user clicks a specific category.
-     *
-     * @param categoryClicked The just clicked [PocketRecommendedStoriesCategory].
-     */
-    fun onCategoryClicked(categoryClicked: PocketRecommendedStoriesCategory)
-
-    /**
-     * Callback for when the user clicks on a specific story.
-     *
-     * @param storyClicked The just clicked [PocketStory].
-     * @param storyPosition `row x column` matrix representing the grid position of the clicked story.
-     */
-    fun onStoryClicked(storyClicked: PocketStory, storyPosition: Pair<Int, Int>)
-
-    /**
-     * Callback for when the user clicks the "Learn more" link.
-     *
-     * @param link URL clicked.
-     */
-    fun onLearnMoreClicked(link: String)
-
-    /**
-     * Callback for when the user clicks the "Discover more" link.
-     *
-     * @param link URL clicked.
-     */
-    fun onDiscoverMoreClicked(link: String)
-}
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketStoriesViewHolder.kt b/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketStoriesViewHolder.kt
deleted file mode 100644
index 760420ed5f..0000000000
--- a/fenix/app/src/main/java/org/mozilla/fenix/home/pocket/PocketStoriesViewHolder.kt
+++ /dev/null
@@ -1,126 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-package org.mozilla.fenix.home.pocket
-
-import android.view.View
-import androidx.compose.foundation.layout.Box
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.Spacer
-import androidx.compose.foundation.layout.height
-import androidx.compose.foundation.layout.padding
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.LaunchedEffect
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.platform.ComposeView
-import androidx.compose.ui.res.dimensionResource
-import androidx.compose.ui.res.stringResource
-import androidx.compose.ui.tooling.preview.Preview
-import androidx.compose.ui.unit.dp
-import androidx.lifecycle.LifecycleOwner
-import androidx.recyclerview.widget.RecyclerView
-import mozilla.components.lib.state.ext.observeAsComposableState
-import mozilla.components.service.pocket.PocketStory.PocketRecommendedStory
-import org.mozilla.fenix.R
-import org.mozilla.fenix.components.components
-import org.mozilla.fenix.compose.ComposeViewHolder
-import org.mozilla.fenix.compose.home.HomeSectionHeader
-import org.mozilla.fenix.theme.FirefoxTheme
-import org.mozilla.fenix.wallpapers.WallpaperState
-
-/**
- * [RecyclerView.ViewHolder] for displaying the list of [PocketRecommendedStory]s from [AppStore].
- *
- * @param composeView [ComposeView] which will be populated with Jetpack Compose UI content.
- * @param viewLifecycleOwner [LifecycleOwner] to which this Composable will be tied to.
- * @param interactor [PocketStoriesInteractor] callback for user interaction.
- */
-class PocketStoriesViewHolder(
-    composeView: ComposeView,
-    viewLifecycleOwner: LifecycleOwner,
-    private val interactor: PocketStoriesInteractor,
-) : ComposeViewHolder(composeView, viewLifecycleOwner) {
-
-    companion object {
-        val LAYOUT_ID = View.generateViewId()
-    }
-
-    @Composable
-    override fun Content() {
-        val horizontalPadding = dimensionResource(R.dimen.home_item_horizontal_margin)
-
-        val homeScreenReady = components.appStore
-            .observeAsComposableState { state -> state.firstFrameDrawn }.value ?: false
-
-        val stories = components.appStore
-            .observeAsComposableState { state -> state.pocketStories }.value
-
-        val wallpaperState = components.appStore
-            .observeAsComposableState { state -> state.wallpaperState }.value ?: WallpaperState.default
-
-        /* This was originally done to address this perf issue:
-         * https://github.com/mozilla-mobile/fenix/issues/25545 for details.
-         * It was determined that Pocket content was becoming available before the first frame was
-         * rendered more regularly. Including Pocket in the first render pass significantly
-         * increases time-to-render in lower-end devices. By waiting until the first frame has
-         * rendered, the perceived performance should increase since the app becomes active more
-         * quickly. This was intended as a workaround until the Compose upgrade was completed and a
-         * more robust solution could be investigated.
-         */
-        if (!homeScreenReady) return
-        LaunchedEffect(stories) {
-            // We should report back when a certain story is actually being displayed.
-            // Cannot do it reliably so for now we'll just mass report everything as being displayed.
-            stories?.let {
-                // Only report here the impressions for recommended stories.
-                // Sponsored stories use a different API for more accurate tracking.
-                interactor.onStoriesShown(it.filterIsInstance<PocketRecommendedStory>())
-            }
-        }
-
-        Column(modifier = Modifier.padding(top = 72.dp)) {
-            // Simple wrapper to add horizontal padding to just the header while the stories have none.
-            Box(modifier = Modifier.padding(horizontal = horizontalPadding)) {
-                HomeSectionHeader(
-                    headerText = stringResource(R.string.pocket_stories_header_1),
-                )
-            }
-
-            Spacer(Modifier.height(16.dp))
-
-            PocketStories(
-                stories = stories ?: emptyList(),
-                contentPadding = horizontalPadding,
-                backgroundColor = wallpaperState.wallpaperCardColor,
-                onStoryShown = interactor::onStoryShown,
-                onStoryClicked = interactor::onStoryClicked,
-                onDiscoverMoreClicked = interactor::onDiscoverMoreClicked,
-            )
-        }
-    }
-}
-
-@Composable
-@Preview
-fun PocketStoriesViewHolderPreview() {
-    FirefoxTheme {
-        Column {
-            HomeSectionHeader(
-                headerText = stringResource(R.string.pocket_stories_header_1),
-            )
-
-            Spacer(Modifier.height(16.dp))
-
-            @Suppress("MagicNumber")
-            PocketStories(
-                stories = getFakePocketStories(8),
-                contentPadding = 0.dp,
-                backgroundColor = FirefoxTheme.colors.layer2,
-                onStoryShown = { _, _ -> },
-                onStoryClicked = { _, _ -> },
-                onDiscoverMoreClicked = {},
-            )
-        }
-    }
-}
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/home/sessioncontrol/SessionControlAdapter.kt b/fenix/app/src/main/java/org/mozilla/fenix/home/sessioncontrol/SessionControlAdapter.kt
index 258ded268a..eaeac396ab 100644
--- a/fenix/app/src/main/java/org/mozilla/fenix/home/sessioncontrol/SessionControlAdapter.kt
+++ b/fenix/app/src/main/java/org/mozilla/fenix/home/sessioncontrol/SessionControlAdapter.kt
@@ -20,9 +20,6 @@ import org.mozilla.fenix.home.BottomSpacerViewHolder
 import org.mozilla.fenix.home.TopPlaceholderViewHolder
 import org.mozilla.fenix.home.collections.CollectionViewHolder
 import org.mozilla.fenix.home.collections.TabInCollectionViewHolder
-import org.mozilla.fenix.home.pocket.PocketCategoriesViewHolder
-import org.mozilla.fenix.home.pocket.PocketRecommendationsHeaderViewHolder
-import org.mozilla.fenix.home.pocket.PocketStoriesViewHolder
 import org.mozilla.fenix.home.recentbookmarks.view.RecentBookmarksHeaderViewHolder
 import org.mozilla.fenix.home.recentbookmarks.view.RecentBookmarksViewHolder
 import org.mozilla.fenix.home.recentsyncedtabs.view.RecentSyncedTabViewHolder
@@ -158,10 +155,6 @@ sealed class AdapterItem(@LayoutRes val viewType: Int) {
     object RecentBookmarksHeader : AdapterItem(RecentBookmarksHeaderViewHolder.LAYOUT_ID)
     object RecentBookmarks : AdapterItem(RecentBookmarksViewHolder.LAYOUT_ID)
 
-    object PocketStoriesItem : AdapterItem(PocketStoriesViewHolder.LAYOUT_ID)
-    object PocketCategoriesItem : AdapterItem(PocketCategoriesViewHolder.LAYOUT_ID)
-    object PocketRecommendationsFooterItem : AdapterItem(PocketRecommendationsHeaderViewHolder.LAYOUT_ID)
-
     object BottomSpacer : AdapterItem(BottomSpacerViewHolder.LAYOUT_ID)
 
     /**
@@ -216,21 +209,6 @@ class SessionControlAdapter(
                 viewLifecycleOwner = viewLifecycleOwner,
                 interactor = interactor,
             )
-            PocketStoriesViewHolder.LAYOUT_ID -> return PocketStoriesViewHolder(
-                composeView = ComposeView(parent.context),
-                viewLifecycleOwner = viewLifecycleOwner,
-                interactor = interactor,
-            )
-            PocketCategoriesViewHolder.LAYOUT_ID -> return PocketCategoriesViewHolder(
-                composeView = ComposeView(parent.context),
-                viewLifecycleOwner = viewLifecycleOwner,
-                interactor = interactor,
-            )
-            PocketRecommendationsHeaderViewHolder.LAYOUT_ID -> return PocketRecommendationsHeaderViewHolder(
-                composeView = ComposeView(parent.context),
-                viewLifecycleOwner = viewLifecycleOwner,
-                interactor = interactor,
-            )
             RecentBookmarksViewHolder.LAYOUT_ID -> return RecentBookmarksViewHolder(
                 composeView = ComposeView(parent.context),
                 viewLifecycleOwner = viewLifecycleOwner,
@@ -321,9 +299,6 @@ class SessionControlAdapter(
             is RecentSyncedTabViewHolder,
             is RecentTabsHeaderViewHolder,
             is PrivateBrowsingDescriptionViewHolder,
-            is PocketCategoriesViewHolder,
-            is PocketRecommendationsHeaderViewHolder,
-            is PocketStoriesViewHolder,
             is TopSitesViewHolder,
             -> {
                 // no op
@@ -398,7 +373,6 @@ class SessionControlAdapter(
             is RecentBookmarksViewHolder,
             is RecentTabViewHolder,
             is RecentSyncedTabViewHolder,
-            is PocketStoriesViewHolder,
             -> {
                 // no-op. This ViewHolder receives the HomeStore as argument and will observe that
                 // without the need for us to manually update from here the data to be displayed.
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/home/sessioncontrol/SessionControlInteractor.kt b/fenix/app/src/main/java/org/mozilla/fenix/home/sessioncontrol/SessionControlInteractor.kt
index 8164184128..d463819595 100644
--- a/fenix/app/src/main/java/org/mozilla/fenix/home/sessioncontrol/SessionControlInteractor.kt
+++ b/fenix/app/src/main/java/org/mozilla/fenix/home/sessioncontrol/SessionControlInteractor.kt
@@ -8,12 +8,8 @@ import mozilla.components.feature.tab.collections.Tab
 import mozilla.components.feature.tab.collections.TabCollection
 import mozilla.components.feature.top.sites.TopSite
 import mozilla.components.service.nimbus.messaging.Message
-import mozilla.components.service.pocket.PocketStory
 import org.mozilla.fenix.browser.browsingmode.BrowsingMode
 import org.mozilla.fenix.components.appstate.AppState
-import org.mozilla.fenix.home.pocket.PocketRecommendedStoriesCategory
-import org.mozilla.fenix.home.pocket.PocketStoriesController
-import org.mozilla.fenix.home.pocket.PocketStoriesInteractor
 import org.mozilla.fenix.home.privatebrowsing.controller.PrivateBrowsingController
 import org.mozilla.fenix.home.privatebrowsing.interactor.PrivateBrowsingInteractor
 import org.mozilla.fenix.home.recentbookmarks.RecentBookmark
@@ -230,7 +226,6 @@ class SessionControlInteractor(
     private val recentSyncedTabController: RecentSyncedTabController,
     private val recentBookmarksController: RecentBookmarksController,
     private val recentVisitsController: RecentVisitsController,
-    private val pocketStoriesController: PocketStoriesController,
     private val privateBrowsingController: PrivateBrowsingController,
     private val searchSelectorController: SearchSelectorController,
     private val toolbarController: ToolbarController,
@@ -244,7 +239,6 @@ class SessionControlInteractor(
     RecentBookmarksInteractor,
     RecentVisitsInteractor,
     CustomizeHomeIteractor,
-    PocketStoriesInteractor,
     PrivateBrowsingInteractor,
     SearchSelectorInteractor,
     WallpaperInteractor {
@@ -403,30 +397,6 @@ class SessionControlInteractor(
         controller.handleCustomizeHomeTapped()
     }
 
-    override fun onStoryShown(storyShown: PocketStory, storyPosition: Pair<Int, Int>) {
-        pocketStoriesController.handleStoryShown(storyShown, storyPosition)
-    }
-
-    override fun onStoriesShown(storiesShown: List<PocketStory>) {
-        pocketStoriesController.handleStoriesShown(storiesShown)
-    }
-
-    override fun onCategoryClicked(categoryClicked: PocketRecommendedStoriesCategory) {
-        pocketStoriesController.handleCategoryClick(categoryClicked)
-    }
-
-    override fun onStoryClicked(storyClicked: PocketStory, storyPosition: Pair<Int, Int>) {
-        pocketStoriesController.handleStoryClicked(storyClicked, storyPosition)
-    }
-
-    override fun onLearnMoreClicked(link: String) {
-        pocketStoriesController.handleLearnMoreClicked(link)
-    }
-
-    override fun onDiscoverMoreClicked(link: String) {
-        pocketStoriesController.handleDiscoverMoreClicked(link)
-    }
-
     override fun reportSessionMetrics(state: AppState) {
         controller.handleReportSessionMetrics(state)
     }
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/home/sessioncontrol/SessionControlView.kt b/fenix/app/src/main/java/org/mozilla/fenix/home/sessioncontrol/SessionControlView.kt
index da17a8b196..de60cd7444 100644
--- a/fenix/app/src/main/java/org/mozilla/fenix/home/sessioncontrol/SessionControlView.kt
+++ b/fenix/app/src/main/java/org/mozilla/fenix/home/sessioncontrol/SessionControlView.kt
@@ -12,7 +12,6 @@ import androidx.recyclerview.widget.RecyclerView
 import mozilla.components.feature.tab.collections.TabCollection
 import mozilla.components.feature.top.sites.TopSite
 import mozilla.components.service.nimbus.messaging.Message
-import mozilla.components.service.pocket.PocketStory
 import org.mozilla.fenix.browser.browsingmode.BrowsingMode
 import org.mozilla.fenix.components.appstate.AppAction
 import org.mozilla.fenix.components.appstate.AppState
@@ -41,8 +40,6 @@ internal fun normalModeAdapterItems(
     showRecentTab: Boolean,
     showRecentSyncedTab: Boolean,
     recentVisits: List<RecentlyVisitedItem>,
-    pocketStories: List<PocketStory>,
-    firstFrameDrawn: Boolean = false,
 ): List<AdapterItem> {
     val items = mutableListOf<AdapterItem>()
     var shouldShowCustomizeHome = false
@@ -91,17 +88,6 @@ internal fun normalModeAdapterItems(
         showCollections(collections, expandedCollections, items)
     }
 
-    // When Pocket is enabled and the initial layout of the app is done, then we can add these items
-    // to render to the home screen.
-    // This is only useful while we have a RecyclerView + Compose implementation. We can remove this
-    // when we switch to a Compose-only home screen.
-    if (firstFrameDrawn && settings.showPocketRecommendationsFeature && pocketStories.isNotEmpty()) {
-        shouldShowCustomizeHome = true
-        items.add(AdapterItem.PocketStoriesItem)
-        items.add(AdapterItem.PocketCategoriesItem)
-        items.add(AdapterItem.PocketRecommendationsFooterItem)
-    }
-
     if (shouldShowCustomizeHome) {
         items.add(AdapterItem.CustomizeHomeButton)
     }
@@ -142,8 +128,6 @@ private fun AppState.toAdapterList(settings: Settings): List<AdapterItem> = when
         shouldShowRecentTabs(settings),
         shouldShowRecentSyncedTabs(),
         recentHistory,
-        pocketStories,
-        firstFrameDrawn,
     )
     BrowsingMode.Private -> privateModeAdapterItems()
 }
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/settings/HomeSettingsFragment.kt b/fenix/app/src/main/java/org/mozilla/fenix/settings/HomeSettingsFragment.kt
index 9bba8fca3d..4410a66bd1 100644
--- a/fenix/app/src/main/java/org/mozilla/fenix/settings/HomeSettingsFragment.kt
+++ b/fenix/app/src/main/java/org/mozilla/fenix/settings/HomeSettingsFragment.kt
@@ -121,28 +121,6 @@ class HomeSettingsFragment : PreferenceFragmentCompat() {
             }
         }
 
-        requirePreference<CheckBoxPreference>(R.string.pref_key_pocket_sponsored_stories).apply {
-            isVisible = FeatureFlags.isPocketSponsoredStoriesFeatureEnabled(context)
-            isChecked = context.settings().showPocketSponsoredStories
-            onPreferenceChangeListener = object : SharedPreferenceUpdater() {
-                override fun onPreferenceChange(preference: Preference, newValue: Any?): Boolean {
-                    when (newValue) {
-                        true -> {
-                            context.components.core.pocketStoriesService.startPeriodicSponsoredStoriesRefresh()
-                        }
-                        false -> {
-                            context.components.core.pocketStoriesService.deleteProfile()
-                            context.components.appStore.dispatch(
-                                AppAction.PocketSponsoredStoriesChange(emptyList()),
-                            )
-                        }
-                    }
-
-                    return super.onPreferenceChange(preference, newValue)
-                }
-            }
-        }
-
         requirePreference<SwitchPreference>(R.string.pref_key_history_metadata_feature).apply {
             isChecked = context.settings().historyMetadataUIFeature
             onPreferenceChangeListener = object : SharedPreferenceUpdater() {
-- 
2.43.0.windows.1

